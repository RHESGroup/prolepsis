
UART-sha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b900  080801b0  080801b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0808bab0  0808bab0  0001bab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808bb3c  0808bb3c  00039074  2**0
                  CONTENTS
  4 .ARM          00000008  0808bb3c  0808bb3c  0001bb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0808bb44  0808bb44  00039074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0808bb44  0808bb44  0001bb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0808bb48  0808bb48  0001bb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00019074  20000000  0808bb4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20019074  080a4bc0  00039074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019128  080a4bc0  00039128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00039074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb56  00000000  00000000  000390a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001daf  00000000  00000000  00045bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000200  00000000  00000000  000479a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002ed21  00000000  00000000  00047ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009200  00000000  00000000  000768ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d7cd1  00000000  00000000  0007faca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0015779b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003524  00000000  00000000  00157818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080801b0 <__do_global_dtors_aux>:
 80801b0:	b510      	push	{r4, lr}
 80801b2:	4c05      	ldr	r4, [pc, #20]	; (80801c8 <__do_global_dtors_aux+0x18>)
 80801b4:	7823      	ldrb	r3, [r4, #0]
 80801b6:	b933      	cbnz	r3, 80801c6 <__do_global_dtors_aux+0x16>
 80801b8:	4b04      	ldr	r3, [pc, #16]	; (80801cc <__do_global_dtors_aux+0x1c>)
 80801ba:	b113      	cbz	r3, 80801c2 <__do_global_dtors_aux+0x12>
 80801bc:	4804      	ldr	r0, [pc, #16]	; (80801d0 <__do_global_dtors_aux+0x20>)
 80801be:	f3af 8000 	nop.w
 80801c2:	2301      	movs	r3, #1
 80801c4:	7023      	strb	r3, [r4, #0]
 80801c6:	bd10      	pop	{r4, pc}
 80801c8:	20019074 	.word	0x20019074
 80801cc:	00000000 	.word	0x00000000
 80801d0:	0808ba98 	.word	0x0808ba98

080801d4 <frame_dummy>:
 80801d4:	b508      	push	{r3, lr}
 80801d6:	4b03      	ldr	r3, [pc, #12]	; (80801e4 <frame_dummy+0x10>)
 80801d8:	b11b      	cbz	r3, 80801e2 <frame_dummy+0xe>
 80801da:	4903      	ldr	r1, [pc, #12]	; (80801e8 <frame_dummy+0x14>)
 80801dc:	4803      	ldr	r0, [pc, #12]	; (80801ec <frame_dummy+0x18>)
 80801de:	f3af 8000 	nop.w
 80801e2:	bd08      	pop	{r3, pc}
 80801e4:	00000000 	.word	0x00000000
 80801e8:	20019078 	.word	0x20019078
 80801ec:	0808ba98 	.word	0x0808ba98

080801f0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80801f0:	b480      	push	{r7}
 80801f2:	b083      	sub	sp, #12
 80801f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80801f6:	2300      	movs	r3, #0
 80801f8:	607b      	str	r3, [r7, #4]
 80801fa:	4b10      	ldr	r3, [pc, #64]	; (808023c <MX_GPIO_Init+0x4c>)
 80801fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80801fe:	4a0f      	ldr	r2, [pc, #60]	; (808023c <MX_GPIO_Init+0x4c>)
 8080200:	f043 0302 	orr.w	r3, r3, #2
 8080204:	6313      	str	r3, [r2, #48]	; 0x30
 8080206:	4b0d      	ldr	r3, [pc, #52]	; (808023c <MX_GPIO_Init+0x4c>)
 8080208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808020a:	f003 0302 	and.w	r3, r3, #2
 808020e:	607b      	str	r3, [r7, #4]
 8080210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8080212:	2300      	movs	r3, #0
 8080214:	603b      	str	r3, [r7, #0]
 8080216:	4b09      	ldr	r3, [pc, #36]	; (808023c <MX_GPIO_Init+0x4c>)
 8080218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808021a:	4a08      	ldr	r2, [pc, #32]	; (808023c <MX_GPIO_Init+0x4c>)
 808021c:	f043 0301 	orr.w	r3, r3, #1
 8080220:	6313      	str	r3, [r2, #48]	; 0x30
 8080222:	4b06      	ldr	r3, [pc, #24]	; (808023c <MX_GPIO_Init+0x4c>)
 8080224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080226:	f003 0301 	and.w	r3, r3, #1
 808022a:	603b      	str	r3, [r7, #0]
 808022c:	683b      	ldr	r3, [r7, #0]

}
 808022e:	bf00      	nop
 8080230:	370c      	adds	r7, #12
 8080232:	46bd      	mov	sp, r7
 8080234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080238:	4770      	bx	lr
 808023a:	bf00      	nop
 808023c:	40023800 	.word	0x40023800

08080240 <sha_transform>:
    E = D; D = C; C = ROT32(B,30); B = A; A = temp

/* do SHA transformation */

static void sha_transform(SHA_INFO *sha_info)
{
 8080240:	b480      	push	{r7}
 8080242:	b0db      	sub	sp, #364	; 0x16c
 8080244:	af00      	add	r7, sp, #0
 8080246:	1d3b      	adds	r3, r7, #4
 8080248:	6018      	str	r0, [r3, #0]
    int i;
    LONG temp, A, B, C, D, E, W[80];

    for (i = 0; i < 16; ++i) {
 808024a:	2300      	movs	r3, #0
 808024c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8080250:	e012      	b.n	8080278 <sha_transform+0x38>
	W[i] = sha_info->data[i];
 8080252:	1d3b      	adds	r3, r7, #4
 8080254:	681a      	ldr	r2, [r3, #0]
 8080256:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 808025a:	3306      	adds	r3, #6
 808025c:	009b      	lsls	r3, r3, #2
 808025e:	4413      	add	r3, r2
 8080260:	6859      	ldr	r1, [r3, #4]
 8080262:	f107 030c 	add.w	r3, r7, #12
 8080266:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 808026a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i) {
 808026e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8080272:	3301      	adds	r3, #1
 8080274:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8080278:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 808027c:	2b0f      	cmp	r3, #15
 808027e:	dde8      	ble.n	8080252 <sha_transform+0x12>
    }
    for (i = 16; i < 80; ++i) {
 8080280:	2310      	movs	r3, #16
 8080282:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8080286:	e02d      	b.n	80802e4 <sha_transform+0xa4>
	W[i] = W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16];
 8080288:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 808028c:	1eda      	subs	r2, r3, #3
 808028e:	f107 030c 	add.w	r3, r7, #12
 8080292:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8080296:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 808029a:	f1a3 0108 	sub.w	r1, r3, #8
 808029e:	f107 030c 	add.w	r3, r7, #12
 80802a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80802a6:	405a      	eors	r2, r3
 80802a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80802ac:	f1a3 010e 	sub.w	r1, r3, #14
 80802b0:	f107 030c 	add.w	r3, r7, #12
 80802b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80802b8:	405a      	eors	r2, r3
 80802ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80802be:	f1a3 0110 	sub.w	r1, r3, #16
 80802c2:	f107 030c 	add.w	r3, r7, #12
 80802c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80802ca:	ea82 0103 	eor.w	r1, r2, r3
 80802ce:	f107 030c 	add.w	r3, r7, #12
 80802d2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80802d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 80; ++i) {
 80802da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80802de:	3301      	adds	r3, #1
 80802e0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80802e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80802e8:	2b4f      	cmp	r3, #79	; 0x4f
 80802ea:	ddcd      	ble.n	8080288 <sha_transform+0x48>
#ifdef USE_MODIFIED_SHA
	W[i] = ROT32(W[i], 1);
#endif /* USE_MODIFIED_SHA */
    }
    A = sha_info->digest[0];
 80802ec:	1d3b      	adds	r3, r7, #4
 80802ee:	681b      	ldr	r3, [r3, #0]
 80802f0:	681b      	ldr	r3, [r3, #0]
 80802f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    B = sha_info->digest[1];
 80802f6:	1d3b      	adds	r3, r7, #4
 80802f8:	681b      	ldr	r3, [r3, #0]
 80802fa:	685b      	ldr	r3, [r3, #4]
 80802fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    C = sha_info->digest[2];
 8080300:	1d3b      	adds	r3, r7, #4
 8080302:	681b      	ldr	r3, [r3, #0]
 8080304:	689b      	ldr	r3, [r3, #8]
 8080306:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    D = sha_info->digest[3];
 808030a:	1d3b      	adds	r3, r7, #4
 808030c:	681b      	ldr	r3, [r3, #0]
 808030e:	68db      	ldr	r3, [r3, #12]
 8080310:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    E = sha_info->digest[4];
 8080314:	1d3b      	adds	r3, r7, #4
 8080316:	681b      	ldr	r3, [r3, #0]
 8080318:	691b      	ldr	r3, [r3, #16]
 808031a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    FUNC(4,60);  FUNC(4,61);  FUNC(4,62);  FUNC(4,63);  FUNC(4,64);
    FUNC(4,65);  FUNC(4,66);  FUNC(4,67);  FUNC(4,68);  FUNC(4,69);
    FUNC(4,70);  FUNC(4,71);  FUNC(4,72);  FUNC(4,73);  FUNC(4,74);
    FUNC(4,75);  FUNC(4,76);  FUNC(4,77);  FUNC(4,78);  FUNC(4,79);
#else /* !UNROLL_LOOPS */
    for (i = 0; i < 20; ++i) {
 808031e:	2300      	movs	r3, #0
 8080320:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8080324:	e039      	b.n	808039a <sha_transform+0x15a>
	FUNC(1,i);
 8080326:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 808032a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 808032e:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8080332:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8080336:	4019      	ands	r1, r3
 8080338:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 808033c:	43d8      	mvns	r0, r3
 808033e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8080342:	4003      	ands	r3, r0
 8080344:	430b      	orrs	r3, r1
 8080346:	441a      	add	r2, r3
 8080348:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 808034c:	441a      	add	r2, r3
 808034e:	f107 030c 	add.w	r3, r7, #12
 8080352:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8080356:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808035a:	441a      	add	r2, r3
 808035c:	4b8b      	ldr	r3, [pc, #556]	; (808058c <sha_transform+0x34c>)
 808035e:	4413      	add	r3, r2
 8080360:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8080364:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8080368:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 808036c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8080370:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8080374:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8080378:	ea4f 03b3 	mov.w	r3, r3, ror #2
 808037c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8080380:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8080384:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8080388:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 808038c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    for (i = 0; i < 20; ++i) {
 8080390:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8080394:	3301      	adds	r3, #1
 8080396:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 808039a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 808039e:	2b13      	cmp	r3, #19
 80803a0:	ddc1      	ble.n	8080326 <sha_transform+0xe6>
    }
    for (i = 20; i < 40; ++i) {
 80803a2:	2314      	movs	r3, #20
 80803a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80803a8:	e035      	b.n	8080416 <sha_transform+0x1d6>
	FUNC(2,i);
 80803aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80803ae:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80803b2:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80803b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80803ba:	4059      	eors	r1, r3
 80803bc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80803c0:	404b      	eors	r3, r1
 80803c2:	441a      	add	r2, r3
 80803c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80803c8:	441a      	add	r2, r3
 80803ca:	f107 030c 	add.w	r3, r7, #12
 80803ce:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 80803d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80803d6:	441a      	add	r2, r3
 80803d8:	4b6d      	ldr	r3, [pc, #436]	; (8080590 <sha_transform+0x350>)
 80803da:	4413      	add	r3, r2
 80803dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80803e0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80803e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80803e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80803ec:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80803f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80803f4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80803f8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80803fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8080400:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8080404:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8080408:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    for (i = 20; i < 40; ++i) {
 808040c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8080410:	3301      	adds	r3, #1
 8080412:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8080416:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 808041a:	2b27      	cmp	r3, #39	; 0x27
 808041c:	ddc5      	ble.n	80803aa <sha_transform+0x16a>
    }
    for (i = 40; i < 60; ++i) {
 808041e:	2328      	movs	r3, #40	; 0x28
 8080420:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8080424:	e03b      	b.n	808049e <sha_transform+0x25e>
	FUNC(3,i);
 8080426:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 808042a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 808042e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8080432:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8080436:	4319      	orrs	r1, r3
 8080438:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 808043c:	4019      	ands	r1, r3
 808043e:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8080442:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8080446:	4003      	ands	r3, r0
 8080448:	430b      	orrs	r3, r1
 808044a:	441a      	add	r2, r3
 808044c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8080450:	441a      	add	r2, r3
 8080452:	f107 030c 	add.w	r3, r7, #12
 8080456:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 808045a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808045e:	441a      	add	r2, r3
 8080460:	4b4c      	ldr	r3, [pc, #304]	; (8080594 <sha_transform+0x354>)
 8080462:	4413      	add	r3, r2
 8080464:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8080468:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 808046c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8080470:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8080474:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8080478:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 808047c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8080480:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8080484:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8080488:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 808048c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8080490:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    for (i = 40; i < 60; ++i) {
 8080494:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8080498:	3301      	adds	r3, #1
 808049a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 808049e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80804a2:	2b3b      	cmp	r3, #59	; 0x3b
 80804a4:	ddbf      	ble.n	8080426 <sha_transform+0x1e6>
    }
    for (i = 60; i < 80; ++i) {
 80804a6:	233c      	movs	r3, #60	; 0x3c
 80804a8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80804ac:	e035      	b.n	808051a <sha_transform+0x2da>
	FUNC(4,i);
 80804ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80804b2:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80804b6:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80804ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80804be:	4059      	eors	r1, r3
 80804c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80804c4:	404b      	eors	r3, r1
 80804c6:	441a      	add	r2, r3
 80804c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80804cc:	441a      	add	r2, r3
 80804ce:	f107 030c 	add.w	r3, r7, #12
 80804d2:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 80804d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80804da:	441a      	add	r2, r3
 80804dc:	4b2e      	ldr	r3, [pc, #184]	; (8080598 <sha_transform+0x358>)
 80804de:	4413      	add	r3, r2
 80804e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80804e4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80804e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80804ec:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80804f0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80804f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80804f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80804fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8080500:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8080504:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8080508:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 808050c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    for (i = 60; i < 80; ++i) {
 8080510:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8080514:	3301      	adds	r3, #1
 8080516:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 808051a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 808051e:	2b4f      	cmp	r3, #79	; 0x4f
 8080520:	ddc5      	ble.n	80804ae <sha_transform+0x26e>
    }
#endif /* !UNROLL_LOOPS */
    sha_info->digest[0] += A;
 8080522:	1d3b      	adds	r3, r7, #4
 8080524:	681b      	ldr	r3, [r3, #0]
 8080526:	681a      	ldr	r2, [r3, #0]
 8080528:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 808052c:	441a      	add	r2, r3
 808052e:	1d3b      	adds	r3, r7, #4
 8080530:	681b      	ldr	r3, [r3, #0]
 8080532:	601a      	str	r2, [r3, #0]
    sha_info->digest[1] += B;
 8080534:	1d3b      	adds	r3, r7, #4
 8080536:	681b      	ldr	r3, [r3, #0]
 8080538:	685a      	ldr	r2, [r3, #4]
 808053a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 808053e:	441a      	add	r2, r3
 8080540:	1d3b      	adds	r3, r7, #4
 8080542:	681b      	ldr	r3, [r3, #0]
 8080544:	605a      	str	r2, [r3, #4]
    sha_info->digest[2] += C;
 8080546:	1d3b      	adds	r3, r7, #4
 8080548:	681b      	ldr	r3, [r3, #0]
 808054a:	689a      	ldr	r2, [r3, #8]
 808054c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8080550:	441a      	add	r2, r3
 8080552:	1d3b      	adds	r3, r7, #4
 8080554:	681b      	ldr	r3, [r3, #0]
 8080556:	609a      	str	r2, [r3, #8]
    sha_info->digest[3] += D;
 8080558:	1d3b      	adds	r3, r7, #4
 808055a:	681b      	ldr	r3, [r3, #0]
 808055c:	68da      	ldr	r2, [r3, #12]
 808055e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8080562:	441a      	add	r2, r3
 8080564:	1d3b      	adds	r3, r7, #4
 8080566:	681b      	ldr	r3, [r3, #0]
 8080568:	60da      	str	r2, [r3, #12]
    sha_info->digest[4] += E;
 808056a:	1d3b      	adds	r3, r7, #4
 808056c:	681b      	ldr	r3, [r3, #0]
 808056e:	691a      	ldr	r2, [r3, #16]
 8080570:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8080574:	441a      	add	r2, r3
 8080576:	1d3b      	adds	r3, r7, #4
 8080578:	681b      	ldr	r3, [r3, #0]
 808057a:	611a      	str	r2, [r3, #16]
}
 808057c:	bf00      	nop
 808057e:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8080582:	46bd      	mov	sp, r7
 8080584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080588:	4770      	bx	lr
 808058a:	bf00      	nop
 808058c:	5a827999 	.word	0x5a827999
 8080590:	6ed9eba1 	.word	0x6ed9eba1
 8080594:	8f1bbcdc 	.word	0x8f1bbcdc
 8080598:	ca62c1d6 	.word	0xca62c1d6

0808059c <byte_reverse>:
#ifdef LITTLE_ENDIAN

/* change endianness of data */

static void byte_reverse(LONG *buffer, int count)
{
 808059c:	b480      	push	{r7}
 808059e:	b087      	sub	sp, #28
 80805a0:	af00      	add	r7, sp, #0
 80805a2:	6078      	str	r0, [r7, #4]
 80805a4:	6039      	str	r1, [r7, #0]
    int i;
    BYTE ct[4], *cp;

    count /= sizeof(LONG);
 80805a6:	683b      	ldr	r3, [r7, #0]
 80805a8:	089b      	lsrs	r3, r3, #2
 80805aa:	603b      	str	r3, [r7, #0]
    cp = (BYTE *) buffer;
 80805ac:	687b      	ldr	r3, [r7, #4]
 80805ae:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count; ++i) {
 80805b0:	2300      	movs	r3, #0
 80805b2:	617b      	str	r3, [r7, #20]
 80805b4:	e020      	b.n	80805f8 <byte_reverse+0x5c>
	ct[0] = cp[0];
 80805b6:	693b      	ldr	r3, [r7, #16]
 80805b8:	781b      	ldrb	r3, [r3, #0]
 80805ba:	733b      	strb	r3, [r7, #12]
	ct[1] = cp[1];
 80805bc:	693b      	ldr	r3, [r7, #16]
 80805be:	785b      	ldrb	r3, [r3, #1]
 80805c0:	737b      	strb	r3, [r7, #13]
	ct[2] = cp[2];
 80805c2:	693b      	ldr	r3, [r7, #16]
 80805c4:	789b      	ldrb	r3, [r3, #2]
 80805c6:	73bb      	strb	r3, [r7, #14]
	ct[3] = cp[3];
 80805c8:	693b      	ldr	r3, [r7, #16]
 80805ca:	78db      	ldrb	r3, [r3, #3]
 80805cc:	73fb      	strb	r3, [r7, #15]
	cp[0] = ct[3];
 80805ce:	7bfa      	ldrb	r2, [r7, #15]
 80805d0:	693b      	ldr	r3, [r7, #16]
 80805d2:	701a      	strb	r2, [r3, #0]
	cp[1] = ct[2];
 80805d4:	693b      	ldr	r3, [r7, #16]
 80805d6:	3301      	adds	r3, #1
 80805d8:	7bba      	ldrb	r2, [r7, #14]
 80805da:	701a      	strb	r2, [r3, #0]
	cp[2] = ct[1];
 80805dc:	693b      	ldr	r3, [r7, #16]
 80805de:	3302      	adds	r3, #2
 80805e0:	7b7a      	ldrb	r2, [r7, #13]
 80805e2:	701a      	strb	r2, [r3, #0]
	cp[3] = ct[0];
 80805e4:	693b      	ldr	r3, [r7, #16]
 80805e6:	3303      	adds	r3, #3
 80805e8:	7b3a      	ldrb	r2, [r7, #12]
 80805ea:	701a      	strb	r2, [r3, #0]
	cp += sizeof(LONG);
 80805ec:	693b      	ldr	r3, [r7, #16]
 80805ee:	3304      	adds	r3, #4
 80805f0:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count; ++i) {
 80805f2:	697b      	ldr	r3, [r7, #20]
 80805f4:	3301      	adds	r3, #1
 80805f6:	617b      	str	r3, [r7, #20]
 80805f8:	697a      	ldr	r2, [r7, #20]
 80805fa:	683b      	ldr	r3, [r7, #0]
 80805fc:	429a      	cmp	r2, r3
 80805fe:	dbda      	blt.n	80805b6 <byte_reverse+0x1a>
    }
}
 8080600:	bf00      	nop
 8080602:	371c      	adds	r7, #28
 8080604:	46bd      	mov	sp, r7
 8080606:	f85d 7b04 	ldr.w	r7, [sp], #4
 808060a:	4770      	bx	lr

0808060c <sha_init>:
#endif /* LITTLE_ENDIAN */

/* initialize the SHA digest */

void sha_init(SHA_INFO *sha_info)
{
 808060c:	b480      	push	{r7}
 808060e:	b083      	sub	sp, #12
 8080610:	af00      	add	r7, sp, #0
 8080612:	6078      	str	r0, [r7, #4]
    sha_info->digest[0] = 0x67452301L;
 8080614:	687b      	ldr	r3, [r7, #4]
 8080616:	4a0d      	ldr	r2, [pc, #52]	; (808064c <sha_init+0x40>)
 8080618:	601a      	str	r2, [r3, #0]
    sha_info->digest[1] = 0xefcdab89L;
 808061a:	687b      	ldr	r3, [r7, #4]
 808061c:	4a0c      	ldr	r2, [pc, #48]	; (8080650 <sha_init+0x44>)
 808061e:	605a      	str	r2, [r3, #4]
    sha_info->digest[2] = 0x98badcfeL;
 8080620:	687b      	ldr	r3, [r7, #4]
 8080622:	4a0c      	ldr	r2, [pc, #48]	; (8080654 <sha_init+0x48>)
 8080624:	609a      	str	r2, [r3, #8]
    sha_info->digest[3] = 0x10325476L;
 8080626:	687b      	ldr	r3, [r7, #4]
 8080628:	4a0b      	ldr	r2, [pc, #44]	; (8080658 <sha_init+0x4c>)
 808062a:	60da      	str	r2, [r3, #12]
    sha_info->digest[4] = 0xc3d2e1f0L;
 808062c:	687b      	ldr	r3, [r7, #4]
 808062e:	4a0b      	ldr	r2, [pc, #44]	; (808065c <sha_init+0x50>)
 8080630:	611a      	str	r2, [r3, #16]
    sha_info->count_lo = 0L;
 8080632:	687b      	ldr	r3, [r7, #4]
 8080634:	2200      	movs	r2, #0
 8080636:	615a      	str	r2, [r3, #20]
    sha_info->count_hi = 0L;
 8080638:	687b      	ldr	r3, [r7, #4]
 808063a:	2200      	movs	r2, #0
 808063c:	619a      	str	r2, [r3, #24]
}
 808063e:	bf00      	nop
 8080640:	370c      	adds	r7, #12
 8080642:	46bd      	mov	sp, r7
 8080644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080648:	4770      	bx	lr
 808064a:	bf00      	nop
 808064c:	67452301 	.word	0x67452301
 8080650:	efcdab89 	.word	0xefcdab89
 8080654:	98badcfe 	.word	0x98badcfe
 8080658:	10325476 	.word	0x10325476
 808065c:	c3d2e1f0 	.word	0xc3d2e1f0

08080660 <sha_update>:

/* update the SHA digest */

void sha_update(SHA_INFO *sha_info, BYTE *buffer, int count)
{
 8080660:	b580      	push	{r7, lr}
 8080662:	b084      	sub	sp, #16
 8080664:	af00      	add	r7, sp, #0
 8080666:	60f8      	str	r0, [r7, #12]
 8080668:	60b9      	str	r1, [r7, #8]
 808066a:	607a      	str	r2, [r7, #4]
    if ((sha_info->count_lo + ((LONG) count << 3)) < sha_info->count_lo) {
 808066c:	68fb      	ldr	r3, [r7, #12]
 808066e:	695a      	ldr	r2, [r3, #20]
 8080670:	687b      	ldr	r3, [r7, #4]
 8080672:	00db      	lsls	r3, r3, #3
 8080674:	441a      	add	r2, r3
 8080676:	68fb      	ldr	r3, [r7, #12]
 8080678:	695b      	ldr	r3, [r3, #20]
 808067a:	429a      	cmp	r2, r3
 808067c:	d204      	bcs.n	8080688 <sha_update+0x28>
	++sha_info->count_hi;
 808067e:	68fb      	ldr	r3, [r7, #12]
 8080680:	699b      	ldr	r3, [r3, #24]
 8080682:	1c5a      	adds	r2, r3, #1
 8080684:	68fb      	ldr	r3, [r7, #12]
 8080686:	619a      	str	r2, [r3, #24]
    }
    sha_info->count_lo += (LONG) count << 3;
 8080688:	68fb      	ldr	r3, [r7, #12]
 808068a:	695a      	ldr	r2, [r3, #20]
 808068c:	687b      	ldr	r3, [r7, #4]
 808068e:	00db      	lsls	r3, r3, #3
 8080690:	441a      	add	r2, r3
 8080692:	68fb      	ldr	r3, [r7, #12]
 8080694:	615a      	str	r2, [r3, #20]
    sha_info->count_hi += (LONG) count >> 29;
 8080696:	68fb      	ldr	r3, [r7, #12]
 8080698:	699a      	ldr	r2, [r3, #24]
 808069a:	687b      	ldr	r3, [r7, #4]
 808069c:	0f5b      	lsrs	r3, r3, #29
 808069e:	441a      	add	r2, r3
 80806a0:	68fb      	ldr	r3, [r7, #12]
 80806a2:	619a      	str	r2, [r3, #24]
    while (count >= SHA_BLOCKSIZE) {
 80806a4:	e015      	b.n	80806d2 <sha_update+0x72>
	memcpy(sha_info->data, buffer, SHA_BLOCKSIZE);
 80806a6:	68fb      	ldr	r3, [r7, #12]
 80806a8:	331c      	adds	r3, #28
 80806aa:	2240      	movs	r2, #64	; 0x40
 80806ac:	68b9      	ldr	r1, [r7, #8]
 80806ae:	4618      	mov	r0, r3
 80806b0:	f00a fdd4 	bl	808b25c <memcpy>
#ifdef LITTLE_ENDIAN
	byte_reverse(sha_info->data, SHA_BLOCKSIZE);
 80806b4:	68fb      	ldr	r3, [r7, #12]
 80806b6:	331c      	adds	r3, #28
 80806b8:	2140      	movs	r1, #64	; 0x40
 80806ba:	4618      	mov	r0, r3
 80806bc:	f7ff ff6e 	bl	808059c <byte_reverse>
#endif /* LITTLE_ENDIAN */
	sha_transform(sha_info);
 80806c0:	68f8      	ldr	r0, [r7, #12]
 80806c2:	f7ff fdbd 	bl	8080240 <sha_transform>
	buffer += SHA_BLOCKSIZE;
 80806c6:	68bb      	ldr	r3, [r7, #8]
 80806c8:	3340      	adds	r3, #64	; 0x40
 80806ca:	60bb      	str	r3, [r7, #8]
	count -= SHA_BLOCKSIZE;
 80806cc:	687b      	ldr	r3, [r7, #4]
 80806ce:	3b40      	subs	r3, #64	; 0x40
 80806d0:	607b      	str	r3, [r7, #4]
    while (count >= SHA_BLOCKSIZE) {
 80806d2:	687b      	ldr	r3, [r7, #4]
 80806d4:	2b3f      	cmp	r3, #63	; 0x3f
 80806d6:	dce6      	bgt.n	80806a6 <sha_update+0x46>
    }
    memcpy(sha_info->data, buffer, count);
 80806d8:	68fb      	ldr	r3, [r7, #12]
 80806da:	331c      	adds	r3, #28
 80806dc:	687a      	ldr	r2, [r7, #4]
 80806de:	68b9      	ldr	r1, [r7, #8]
 80806e0:	4618      	mov	r0, r3
 80806e2:	f00a fdbb 	bl	808b25c <memcpy>
}
 80806e6:	bf00      	nop
 80806e8:	3710      	adds	r7, #16
 80806ea:	46bd      	mov	sp, r7
 80806ec:	bd80      	pop	{r7, pc}

080806ee <sha_final>:

/* finish computing the SHA digest */

void sha_final(SHA_INFO *sha_info)
{
 80806ee:	b580      	push	{r7, lr}
 80806f0:	b086      	sub	sp, #24
 80806f2:	af00      	add	r7, sp, #0
 80806f4:	6078      	str	r0, [r7, #4]
    int count;
    LONG lo_bit_count, hi_bit_count;

    lo_bit_count = sha_info->count_lo;
 80806f6:	687b      	ldr	r3, [r7, #4]
 80806f8:	695b      	ldr	r3, [r3, #20]
 80806fa:	617b      	str	r3, [r7, #20]
    hi_bit_count = sha_info->count_hi;
 80806fc:	687b      	ldr	r3, [r7, #4]
 80806fe:	699b      	ldr	r3, [r3, #24]
 8080700:	613b      	str	r3, [r7, #16]
    count = (int) ((lo_bit_count >> 3) & 0x3f);
 8080702:	697b      	ldr	r3, [r7, #20]
 8080704:	08db      	lsrs	r3, r3, #3
 8080706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808070a:	60fb      	str	r3, [r7, #12]
    ((BYTE *) sha_info->data)[count++] = 0x80;
 808070c:	687b      	ldr	r3, [r7, #4]
 808070e:	f103 021c 	add.w	r2, r3, #28
 8080712:	68fb      	ldr	r3, [r7, #12]
 8080714:	1c59      	adds	r1, r3, #1
 8080716:	60f9      	str	r1, [r7, #12]
 8080718:	4413      	add	r3, r2
 808071a:	2280      	movs	r2, #128	; 0x80
 808071c:	701a      	strb	r2, [r3, #0]
    if (count > 56) {
 808071e:	68fb      	ldr	r3, [r7, #12]
 8080720:	2b38      	cmp	r3, #56	; 0x38
 8080722:	dd1c      	ble.n	808075e <sha_final+0x70>
	memset((BYTE *) &sha_info->data + count, 0, 64 - count);
 8080724:	687b      	ldr	r3, [r7, #4]
 8080726:	f103 021c 	add.w	r2, r3, #28
 808072a:	68fb      	ldr	r3, [r7, #12]
 808072c:	18d0      	adds	r0, r2, r3
 808072e:	68fb      	ldr	r3, [r7, #12]
 8080730:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8080734:	461a      	mov	r2, r3
 8080736:	2100      	movs	r1, #0
 8080738:	f00a fd9b 	bl	808b272 <memset>
#ifdef LITTLE_ENDIAN
	byte_reverse(sha_info->data, SHA_BLOCKSIZE);
 808073c:	687b      	ldr	r3, [r7, #4]
 808073e:	331c      	adds	r3, #28
 8080740:	2140      	movs	r1, #64	; 0x40
 8080742:	4618      	mov	r0, r3
 8080744:	f7ff ff2a 	bl	808059c <byte_reverse>
#endif /* LITTLE_ENDIAN */
	sha_transform(sha_info);
 8080748:	6878      	ldr	r0, [r7, #4]
 808074a:	f7ff fd79 	bl	8080240 <sha_transform>
	memset(&sha_info->data, 0, 56);
 808074e:	687b      	ldr	r3, [r7, #4]
 8080750:	331c      	adds	r3, #28
 8080752:	2238      	movs	r2, #56	; 0x38
 8080754:	2100      	movs	r1, #0
 8080756:	4618      	mov	r0, r3
 8080758:	f00a fd8b 	bl	808b272 <memset>
 808075c:	e00b      	b.n	8080776 <sha_final+0x88>
    } else {
	memset((BYTE *) &sha_info->data + count, 0, 56 - count);
 808075e:	687b      	ldr	r3, [r7, #4]
 8080760:	f103 021c 	add.w	r2, r3, #28
 8080764:	68fb      	ldr	r3, [r7, #12]
 8080766:	18d0      	adds	r0, r2, r3
 8080768:	68fb      	ldr	r3, [r7, #12]
 808076a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 808076e:	461a      	mov	r2, r3
 8080770:	2100      	movs	r1, #0
 8080772:	f00a fd7e 	bl	808b272 <memset>
    }
#ifdef LITTLE_ENDIAN
    byte_reverse(sha_info->data, SHA_BLOCKSIZE);
 8080776:	687b      	ldr	r3, [r7, #4]
 8080778:	331c      	adds	r3, #28
 808077a:	2140      	movs	r1, #64	; 0x40
 808077c:	4618      	mov	r0, r3
 808077e:	f7ff ff0d 	bl	808059c <byte_reverse>
#endif /* LITTLE_ENDIAN */
    sha_info->data[14] = hi_bit_count;
 8080782:	687b      	ldr	r3, [r7, #4]
 8080784:	693a      	ldr	r2, [r7, #16]
 8080786:	655a      	str	r2, [r3, #84]	; 0x54
    sha_info->data[15] = lo_bit_count;
 8080788:	687b      	ldr	r3, [r7, #4]
 808078a:	697a      	ldr	r2, [r7, #20]
 808078c:	659a      	str	r2, [r3, #88]	; 0x58
    sha_transform(sha_info);
 808078e:	6878      	ldr	r0, [r7, #4]
 8080790:	f7ff fd56 	bl	8080240 <sha_transform>
}
 8080794:	bf00      	nop
 8080796:	3718      	adds	r7, #24
 8080798:	46bd      	mov	sp, r7
 808079a:	bd80      	pop	{r7, pc}

0808079c <sha_stream>:
/* compute the SHA digest of a FILE stream */

#define BLOCK_SIZE	8192

void sha_stream(SHA_INFO *sha_info, BYTE *fin) //TODO: cambiare FILE con vettore di byte e prendere un byte per volta
{
 808079c:	b580      	push	{r7, lr}
 808079e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80807a2:	b084      	sub	sp, #16
 80807a4:	af00      	add	r7, sp, #0
 80807a6:	f107 0310 	add.w	r3, r7, #16
 80807aa:	3b0c      	subs	r3, #12
 80807ac:	6018      	str	r0, [r3, #0]
 80807ae:	f107 0310 	add.w	r3, r7, #16
 80807b2:	3b10      	subs	r3, #16
 80807b4:	6019      	str	r1, [r3, #0]
    int i;
    BYTE data[BLOCK_SIZE];

    sha_init(sha_info);
 80807b6:	f107 0310 	add.w	r3, r7, #16
 80807ba:	3b0c      	subs	r3, #12
 80807bc:	6818      	ldr	r0, [r3, #0]
 80807be:	f7ff ff25 	bl	808060c <sha_init>
    while (read_counter < 102400) {
 80807c2:	e04d      	b.n	8080860 <sha_stream+0xc4>
    if (read_counter + BLOCK_SIZE < 102400) {
 80807c4:	4b2f      	ldr	r3, [pc, #188]	; (8080884 <sha_stream+0xe8>)
 80807c6:	681b      	ldr	r3, [r3, #0]
 80807c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80807cc:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 80807d0:	d218      	bcs.n	8080804 <sha_stream+0x68>
    	memcpy(data, fin + read_counter, BLOCK_SIZE);
 80807d2:	4b2c      	ldr	r3, [pc, #176]	; (8080884 <sha_stream+0xe8>)
 80807d4:	681a      	ldr	r2, [r3, #0]
 80807d6:	f107 0310 	add.w	r3, r7, #16
 80807da:	3b10      	subs	r3, #16
 80807dc:	681b      	ldr	r3, [r3, #0]
 80807de:	441a      	add	r2, r3
 80807e0:	f107 0310 	add.w	r3, r7, #16
 80807e4:	3b04      	subs	r3, #4
 80807e6:	4618      	mov	r0, r3
 80807e8:	4611      	mov	r1, r2
 80807ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80807ee:	461a      	mov	r2, r3
 80807f0:	f00a fd34 	bl	808b25c <memcpy>
    	i = BLOCK_SIZE;
 80807f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80807f8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80807fc:	f102 020c 	add.w	r2, r2, #12
 8080800:	6013      	str	r3, [r2, #0]
 8080802:	e019      	b.n	8080838 <sha_stream+0x9c>
    }else{
    	memcpy(data, fin + read_counter, (102400 - read_counter));
 8080804:	4b1f      	ldr	r3, [pc, #124]	; (8080884 <sha_stream+0xe8>)
 8080806:	681a      	ldr	r2, [r3, #0]
 8080808:	f107 0310 	add.w	r3, r7, #16
 808080c:	3b10      	subs	r3, #16
 808080e:	681b      	ldr	r3, [r3, #0]
 8080810:	1899      	adds	r1, r3, r2
 8080812:	4b1c      	ldr	r3, [pc, #112]	; (8080884 <sha_stream+0xe8>)
 8080814:	681b      	ldr	r3, [r3, #0]
 8080816:	f5c3 32c8 	rsb	r2, r3, #102400	; 0x19000
 808081a:	f107 0310 	add.w	r3, r7, #16
 808081e:	3b04      	subs	r3, #4
 8080820:	4618      	mov	r0, r3
 8080822:	f00a fd1b 	bl	808b25c <memcpy>
    	i = (102400 - read_counter);
 8080826:	4b17      	ldr	r3, [pc, #92]	; (8080884 <sha_stream+0xe8>)
 8080828:	681b      	ldr	r3, [r3, #0]
 808082a:	f5c3 33c8 	rsb	r3, r3, #102400	; 0x19000
 808082e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8080832:	f102 020c 	add.w	r2, r2, #12
 8080836:	6013      	str	r3, [r2, #0]
    }

	sha_update(sha_info, data, i);
 8080838:	f107 0110 	add.w	r1, r7, #16
 808083c:	3904      	subs	r1, #4
 808083e:	f107 0310 	add.w	r3, r7, #16
 8080842:	3b0c      	subs	r3, #12
 8080844:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8080848:	f102 020c 	add.w	r2, r2, #12
 808084c:	6812      	ldr	r2, [r2, #0]
 808084e:	6818      	ldr	r0, [r3, #0]
 8080850:	f7ff ff06 	bl	8080660 <sha_update>
	read_counter += BLOCK_SIZE;
 8080854:	4b0b      	ldr	r3, [pc, #44]	; (8080884 <sha_stream+0xe8>)
 8080856:	681b      	ldr	r3, [r3, #0]
 8080858:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 808085c:	4a09      	ldr	r2, [pc, #36]	; (8080884 <sha_stream+0xe8>)
 808085e:	6013      	str	r3, [r2, #0]
    while (read_counter < 102400) {
 8080860:	4b08      	ldr	r3, [pc, #32]	; (8080884 <sha_stream+0xe8>)
 8080862:	681b      	ldr	r3, [r3, #0]
 8080864:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 8080868:	d3ac      	bcc.n	80807c4 <sha_stream+0x28>
    }
    sha_final(sha_info);
 808086a:	f107 0310 	add.w	r3, r7, #16
 808086e:	3b0c      	subs	r3, #12
 8080870:	6818      	ldr	r0, [r3, #0]
 8080872:	f7ff ff3c 	bl	80806ee <sha_final>
}
 8080876:	bf00      	nop
 8080878:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 808087c:	3710      	adds	r7, #16
 808087e:	46bd      	mov	sp, r7
 8080880:	bd80      	pop	{r7, pc}
 8080882:	bf00      	nop
 8080884:	20019090 	.word	0x20019090

08080888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8080888:	b480      	push	{r7}
 808088a:	b083      	sub	sp, #12
 808088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 808088e:	2300      	movs	r3, #0
 8080890:	607b      	str	r3, [r7, #4]
 8080892:	4b10      	ldr	r3, [pc, #64]	; (80808d4 <HAL_MspInit+0x4c>)
 8080894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080896:	4a0f      	ldr	r2, [pc, #60]	; (80808d4 <HAL_MspInit+0x4c>)
 8080898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 808089c:	6453      	str	r3, [r2, #68]	; 0x44
 808089e:	4b0d      	ldr	r3, [pc, #52]	; (80808d4 <HAL_MspInit+0x4c>)
 80808a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80808a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80808a6:	607b      	str	r3, [r7, #4]
 80808a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80808aa:	2300      	movs	r3, #0
 80808ac:	603b      	str	r3, [r7, #0]
 80808ae:	4b09      	ldr	r3, [pc, #36]	; (80808d4 <HAL_MspInit+0x4c>)
 80808b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80808b2:	4a08      	ldr	r2, [pc, #32]	; (80808d4 <HAL_MspInit+0x4c>)
 80808b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80808b8:	6413      	str	r3, [r2, #64]	; 0x40
 80808ba:	4b06      	ldr	r3, [pc, #24]	; (80808d4 <HAL_MspInit+0x4c>)
 80808bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80808be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80808c2:	603b      	str	r3, [r7, #0]
 80808c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80808c6:	bf00      	nop
 80808c8:	370c      	adds	r7, #12
 80808ca:	46bd      	mov	sp, r7
 80808cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80808d0:	4770      	bx	lr
 80808d2:	bf00      	nop
 80808d4:	40023800 	.word	0x40023800

080808d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80808d8:	b480      	push	{r7}
 80808da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80808dc:	bf00      	nop
 80808de:	46bd      	mov	sp, r7
 80808e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80808e4:	4770      	bx	lr

080808e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80808e6:	b480      	push	{r7}
 80808e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80808ea:	e7fe      	b.n	80808ea <HardFault_Handler+0x4>

080808ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80808ec:	b480      	push	{r7}
 80808ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80808f0:	e7fe      	b.n	80808f0 <MemManage_Handler+0x4>

080808f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80808f2:	b480      	push	{r7}
 80808f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80808f6:	e7fe      	b.n	80808f6 <BusFault_Handler+0x4>

080808f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80808f8:	b480      	push	{r7}
 80808fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80808fc:	e7fe      	b.n	80808fc <UsageFault_Handler+0x4>

080808fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80808fe:	b480      	push	{r7}
 8080900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8080902:	bf00      	nop
 8080904:	46bd      	mov	sp, r7
 8080906:	f85d 7b04 	ldr.w	r7, [sp], #4
 808090a:	4770      	bx	lr

0808090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 808090c:	b480      	push	{r7}
 808090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8080910:	bf00      	nop
 8080912:	46bd      	mov	sp, r7
 8080914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080918:	4770      	bx	lr

0808091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 808091a:	b480      	push	{r7}
 808091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 808091e:	bf00      	nop
 8080920:	46bd      	mov	sp, r7
 8080922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080926:	4770      	bx	lr

08080928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8080928:	b580      	push	{r7, lr}
 808092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 808092c:	f000 faa6 	bl	8080e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8080930:	bf00      	nop
 8080932:	bd80      	pop	{r7, pc}

08080934 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8080934:	b580      	push	{r7, lr}
 8080936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8080938:	4802      	ldr	r0, [pc, #8]	; (8080944 <USART1_IRQHandler+0x10>)
 808093a:	f009 fa49 	bl	8089dd0 <HAL_UART_IRQHandler>
//  }



  /* USER CODE END USART1_IRQn 1 */
}
 808093e:	bf00      	nop
 8080940:	bd80      	pop	{r7, pc}
 8080942:	bf00      	nop
 8080944:	200190e0 	.word	0x200190e0

08080948 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8080948:	b580      	push	{r7, lr}
 808094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 808094c:	4802      	ldr	r0, [pc, #8]	; (8080958 <TIM5_IRQHandler+0x10>)
 808094e:	f005 f813 	bl	8085978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8080952:	bf00      	nop
 8080954:	bd80      	pop	{r7, pc}
 8080956:	bf00      	nop
 8080958:	200190a0 	.word	0x200190a0

0808095c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 808095c:	b480      	push	{r7}
 808095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8080960:	4b16      	ldr	r3, [pc, #88]	; (80809bc <SystemInit+0x60>)
 8080962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8080966:	4a15      	ldr	r2, [pc, #84]	; (80809bc <SystemInit+0x60>)
 8080968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 808096c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8080970:	4b13      	ldr	r3, [pc, #76]	; (80809c0 <SystemInit+0x64>)
 8080972:	681b      	ldr	r3, [r3, #0]
 8080974:	4a12      	ldr	r2, [pc, #72]	; (80809c0 <SystemInit+0x64>)
 8080976:	f043 0301 	orr.w	r3, r3, #1
 808097a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 808097c:	4b10      	ldr	r3, [pc, #64]	; (80809c0 <SystemInit+0x64>)
 808097e:	2200      	movs	r2, #0
 8080980:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8080982:	4b0f      	ldr	r3, [pc, #60]	; (80809c0 <SystemInit+0x64>)
 8080984:	681b      	ldr	r3, [r3, #0]
 8080986:	4a0e      	ldr	r2, [pc, #56]	; (80809c0 <SystemInit+0x64>)
 8080988:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 808098c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8080990:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8080992:	4b0b      	ldr	r3, [pc, #44]	; (80809c0 <SystemInit+0x64>)
 8080994:	4a0b      	ldr	r2, [pc, #44]	; (80809c4 <SystemInit+0x68>)
 8080996:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8080998:	4b09      	ldr	r3, [pc, #36]	; (80809c0 <SystemInit+0x64>)
 808099a:	681b      	ldr	r3, [r3, #0]
 808099c:	4a08      	ldr	r2, [pc, #32]	; (80809c0 <SystemInit+0x64>)
 808099e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80809a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80809a4:	4b06      	ldr	r3, [pc, #24]	; (80809c0 <SystemInit+0x64>)
 80809a6:	2200      	movs	r2, #0
 80809a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80809aa:	4b04      	ldr	r3, [pc, #16]	; (80809bc <SystemInit+0x60>)
 80809ac:	4a06      	ldr	r2, [pc, #24]	; (80809c8 <SystemInit+0x6c>)
 80809ae:	609a      	str	r2, [r3, #8]
#endif
}
 80809b0:	bf00      	nop
 80809b2:	46bd      	mov	sp, r7
 80809b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80809b8:	4770      	bx	lr
 80809ba:	bf00      	nop
 80809bc:	e000ed00 	.word	0xe000ed00
 80809c0:	40023800 	.word	0x40023800
 80809c4:	24003010 	.word	0x24003010
 80809c8:	08080000 	.word	0x08080000

080809cc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80809cc:	b480      	push	{r7}
 80809ce:	b087      	sub	sp, #28
 80809d0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80809d2:	2300      	movs	r3, #0
 80809d4:	613b      	str	r3, [r7, #16]
 80809d6:	2300      	movs	r3, #0
 80809d8:	617b      	str	r3, [r7, #20]
 80809da:	2302      	movs	r3, #2
 80809dc:	60fb      	str	r3, [r7, #12]
 80809de:	2300      	movs	r3, #0
 80809e0:	60bb      	str	r3, [r7, #8]
 80809e2:	2302      	movs	r3, #2
 80809e4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80809e6:	4b31      	ldr	r3, [pc, #196]	; (8080aac <SystemCoreClockUpdate+0xe0>)
 80809e8:	689b      	ldr	r3, [r3, #8]
 80809ea:	f003 030c 	and.w	r3, r3, #12
 80809ee:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80809f0:	693b      	ldr	r3, [r7, #16]
 80809f2:	2b04      	cmp	r3, #4
 80809f4:	d007      	beq.n	8080a06 <SystemCoreClockUpdate+0x3a>
 80809f6:	2b08      	cmp	r3, #8
 80809f8:	d009      	beq.n	8080a0e <SystemCoreClockUpdate+0x42>
 80809fa:	2b00      	cmp	r3, #0
 80809fc:	d13d      	bne.n	8080a7a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80809fe:	4b2c      	ldr	r3, [pc, #176]	; (8080ab0 <SystemCoreClockUpdate+0xe4>)
 8080a00:	4a2c      	ldr	r2, [pc, #176]	; (8080ab4 <SystemCoreClockUpdate+0xe8>)
 8080a02:	601a      	str	r2, [r3, #0]
      break;
 8080a04:	e03d      	b.n	8080a82 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8080a06:	4b2a      	ldr	r3, [pc, #168]	; (8080ab0 <SystemCoreClockUpdate+0xe4>)
 8080a08:	4a2b      	ldr	r2, [pc, #172]	; (8080ab8 <SystemCoreClockUpdate+0xec>)
 8080a0a:	601a      	str	r2, [r3, #0]
      break;
 8080a0c:	e039      	b.n	8080a82 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8080a0e:	4b27      	ldr	r3, [pc, #156]	; (8080aac <SystemCoreClockUpdate+0xe0>)
 8080a10:	685b      	ldr	r3, [r3, #4]
 8080a12:	0d9b      	lsrs	r3, r3, #22
 8080a14:	f003 0301 	and.w	r3, r3, #1
 8080a18:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8080a1a:	4b24      	ldr	r3, [pc, #144]	; (8080aac <SystemCoreClockUpdate+0xe0>)
 8080a1c:	685b      	ldr	r3, [r3, #4]
 8080a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8080a22:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8080a24:	68bb      	ldr	r3, [r7, #8]
 8080a26:	2b00      	cmp	r3, #0
 8080a28:	d00c      	beq.n	8080a44 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8080a2a:	4a23      	ldr	r2, [pc, #140]	; (8080ab8 <SystemCoreClockUpdate+0xec>)
 8080a2c:	687b      	ldr	r3, [r7, #4]
 8080a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8080a32:	4a1e      	ldr	r2, [pc, #120]	; (8080aac <SystemCoreClockUpdate+0xe0>)
 8080a34:	6852      	ldr	r2, [r2, #4]
 8080a36:	0992      	lsrs	r2, r2, #6
 8080a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8080a3c:	fb02 f303 	mul.w	r3, r2, r3
 8080a40:	617b      	str	r3, [r7, #20]
 8080a42:	e00b      	b.n	8080a5c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8080a44:	4a1b      	ldr	r2, [pc, #108]	; (8080ab4 <SystemCoreClockUpdate+0xe8>)
 8080a46:	687b      	ldr	r3, [r7, #4]
 8080a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8080a4c:	4a17      	ldr	r2, [pc, #92]	; (8080aac <SystemCoreClockUpdate+0xe0>)
 8080a4e:	6852      	ldr	r2, [r2, #4]
 8080a50:	0992      	lsrs	r2, r2, #6
 8080a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8080a56:	fb02 f303 	mul.w	r3, r2, r3
 8080a5a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8080a5c:	4b13      	ldr	r3, [pc, #76]	; (8080aac <SystemCoreClockUpdate+0xe0>)
 8080a5e:	685b      	ldr	r3, [r3, #4]
 8080a60:	0c1b      	lsrs	r3, r3, #16
 8080a62:	f003 0303 	and.w	r3, r3, #3
 8080a66:	3301      	adds	r3, #1
 8080a68:	005b      	lsls	r3, r3, #1
 8080a6a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8080a6c:	697a      	ldr	r2, [r7, #20]
 8080a6e:	68fb      	ldr	r3, [r7, #12]
 8080a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8080a74:	4a0e      	ldr	r2, [pc, #56]	; (8080ab0 <SystemCoreClockUpdate+0xe4>)
 8080a76:	6013      	str	r3, [r2, #0]
      break;
 8080a78:	e003      	b.n	8080a82 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8080a7a:	4b0d      	ldr	r3, [pc, #52]	; (8080ab0 <SystemCoreClockUpdate+0xe4>)
 8080a7c:	4a0d      	ldr	r2, [pc, #52]	; (8080ab4 <SystemCoreClockUpdate+0xe8>)
 8080a7e:	601a      	str	r2, [r3, #0]
      break;
 8080a80:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8080a82:	4b0a      	ldr	r3, [pc, #40]	; (8080aac <SystemCoreClockUpdate+0xe0>)
 8080a84:	689b      	ldr	r3, [r3, #8]
 8080a86:	091b      	lsrs	r3, r3, #4
 8080a88:	f003 030f 	and.w	r3, r3, #15
 8080a8c:	4a0b      	ldr	r2, [pc, #44]	; (8080abc <SystemCoreClockUpdate+0xf0>)
 8080a8e:	5cd3      	ldrb	r3, [r2, r3]
 8080a90:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8080a92:	4b07      	ldr	r3, [pc, #28]	; (8080ab0 <SystemCoreClockUpdate+0xe4>)
 8080a94:	681a      	ldr	r2, [r3, #0]
 8080a96:	693b      	ldr	r3, [r7, #16]
 8080a98:	fa22 f303 	lsr.w	r3, r2, r3
 8080a9c:	4a04      	ldr	r2, [pc, #16]	; (8080ab0 <SystemCoreClockUpdate+0xe4>)
 8080a9e:	6013      	str	r3, [r2, #0]
}
 8080aa0:	bf00      	nop
 8080aa2:	371c      	adds	r7, #28
 8080aa4:	46bd      	mov	sp, r7
 8080aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080aaa:	4770      	bx	lr
 8080aac:	40023800 	.word	0x40023800
 8080ab0:	20000000 	.word	0x20000000
 8080ab4:	00f42400 	.word	0x00f42400
 8080ab8:	017d7840 	.word	0x017d7840
 8080abc:	0808bae8 	.word	0x0808bae8

08080ac0 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8080ac0:	b580      	push	{r7, lr}
 8080ac2:	b086      	sub	sp, #24
 8080ac4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8080ac6:	f107 0308 	add.w	r3, r7, #8
 8080aca:	2200      	movs	r2, #0
 8080acc:	601a      	str	r2, [r3, #0]
 8080ace:	605a      	str	r2, [r3, #4]
 8080ad0:	609a      	str	r2, [r3, #8]
 8080ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8080ad4:	463b      	mov	r3, r7
 8080ad6:	2200      	movs	r2, #0
 8080ad8:	601a      	str	r2, [r3, #0]
 8080ada:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8080adc:	4b1d      	ldr	r3, [pc, #116]	; (8080b54 <MX_TIM5_Init+0x94>)
 8080ade:	4a1e      	ldr	r2, [pc, #120]	; (8080b58 <MX_TIM5_Init+0x98>)
 8080ae0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 50;
 8080ae2:	4b1c      	ldr	r3, [pc, #112]	; (8080b54 <MX_TIM5_Init+0x94>)
 8080ae4:	2232      	movs	r2, #50	; 0x32
 8080ae6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8080ae8:	4b1a      	ldr	r3, [pc, #104]	; (8080b54 <MX_TIM5_Init+0x94>)
 8080aea:	2200      	movs	r2, #0
 8080aec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8080aee:	4b19      	ldr	r3, [pc, #100]	; (8080b54 <MX_TIM5_Init+0x94>)
 8080af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080af4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8080af6:	4b17      	ldr	r3, [pc, #92]	; (8080b54 <MX_TIM5_Init+0x94>)
 8080af8:	2200      	movs	r2, #0
 8080afa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8080afc:	4b15      	ldr	r3, [pc, #84]	; (8080b54 <MX_TIM5_Init+0x94>)
 8080afe:	2200      	movs	r2, #0
 8080b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8080b02:	4814      	ldr	r0, [pc, #80]	; (8080b54 <MX_TIM5_Init+0x94>)
 8080b04:	f002 fd74 	bl	80835f0 <HAL_TIM_Base_Init>
 8080b08:	4603      	mov	r3, r0
 8080b0a:	2b00      	cmp	r3, #0
 8080b0c:	d001      	beq.n	8080b12 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8080b0e:	f00a f973 	bl	808adf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8080b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8080b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8080b18:	f107 0308 	add.w	r3, r7, #8
 8080b1c:	4619      	mov	r1, r3
 8080b1e:	480d      	ldr	r0, [pc, #52]	; (8080b54 <MX_TIM5_Init+0x94>)
 8080b20:	f005 fef8 	bl	8086914 <HAL_TIM_ConfigClockSource>
 8080b24:	4603      	mov	r3, r0
 8080b26:	2b00      	cmp	r3, #0
 8080b28:	d001      	beq.n	8080b2e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8080b2a:	f00a f965 	bl	808adf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8080b2e:	2300      	movs	r3, #0
 8080b30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8080b32:	2300      	movs	r3, #0
 8080b34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8080b36:	463b      	mov	r3, r7
 8080b38:	4619      	mov	r1, r3
 8080b3a:	4806      	ldr	r0, [pc, #24]	; (8080b54 <MX_TIM5_Init+0x94>)
 8080b3c:	f008 f830 	bl	8088ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8080b40:	4603      	mov	r3, r0
 8080b42:	2b00      	cmp	r3, #0
 8080b44:	d001      	beq.n	8080b4a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8080b46:	f00a f957 	bl	808adf8 <Error_Handler>
  }

}
 8080b4a:	bf00      	nop
 8080b4c:	3718      	adds	r7, #24
 8080b4e:	46bd      	mov	sp, r7
 8080b50:	bd80      	pop	{r7, pc}
 8080b52:	bf00      	nop
 8080b54:	200190a0 	.word	0x200190a0
 8080b58:	40000c00 	.word	0x40000c00

08080b5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8080b5c:	b580      	push	{r7, lr}
 8080b5e:	b084      	sub	sp, #16
 8080b60:	af00      	add	r7, sp, #0
 8080b62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8080b64:	687b      	ldr	r3, [r7, #4]
 8080b66:	681b      	ldr	r3, [r3, #0]
 8080b68:	4a0e      	ldr	r2, [pc, #56]	; (8080ba4 <HAL_TIM_Base_MspInit+0x48>)
 8080b6a:	4293      	cmp	r3, r2
 8080b6c:	d115      	bne.n	8080b9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8080b6e:	2300      	movs	r3, #0
 8080b70:	60fb      	str	r3, [r7, #12]
 8080b72:	4b0d      	ldr	r3, [pc, #52]	; (8080ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8080b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080b76:	4a0c      	ldr	r2, [pc, #48]	; (8080ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8080b78:	f043 0308 	orr.w	r3, r3, #8
 8080b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8080b7e:	4b0a      	ldr	r3, [pc, #40]	; (8080ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8080b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080b82:	f003 0308 	and.w	r3, r3, #8
 8080b86:	60fb      	str	r3, [r7, #12]
 8080b88:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8080b8a:	2200      	movs	r2, #0
 8080b8c:	2100      	movs	r1, #0
 8080b8e:	2032      	movs	r0, #50	; 0x32
 8080b90:	f000 fcd5 	bl	808153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8080b94:	2032      	movs	r0, #50	; 0x32
 8080b96:	f000 fcee 	bl	8081576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8080b9a:	bf00      	nop
 8080b9c:	3710      	adds	r7, #16
 8080b9e:	46bd      	mov	sp, r7
 8080ba0:	bd80      	pop	{r7, pc}
 8080ba2:	bf00      	nop
 8080ba4:	40000c00 	.word	0x40000c00
 8080ba8:	40023800 	.word	0x40023800

08080bac <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8080bac:	b580      	push	{r7, lr}
 8080bae:	b082      	sub	sp, #8
 8080bb0:	af00      	add	r7, sp, #0
 8080bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8080bb4:	687b      	ldr	r3, [r7, #4]
 8080bb6:	681b      	ldr	r3, [r3, #0]
 8080bb8:	4a07      	ldr	r2, [pc, #28]	; (8080bd8 <HAL_TIM_Base_MspDeInit+0x2c>)
 8080bba:	4293      	cmp	r3, r2
 8080bbc:	d108      	bne.n	8080bd0 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM5_MspDeInit 0 */

  /* USER CODE END TIM5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM5_CLK_DISABLE();
 8080bbe:	4b07      	ldr	r3, [pc, #28]	; (8080bdc <HAL_TIM_Base_MspDeInit+0x30>)
 8080bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080bc2:	4a06      	ldr	r2, [pc, #24]	; (8080bdc <HAL_TIM_Base_MspDeInit+0x30>)
 8080bc4:	f023 0308 	bic.w	r3, r3, #8
 8080bc8:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8080bca:	2032      	movs	r0, #50	; 0x32
 8080bcc:	f000 fce1 	bl	8081592 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
} 
 8080bd0:	bf00      	nop
 8080bd2:	3708      	adds	r7, #8
 8080bd4:	46bd      	mov	sp, r7
 8080bd6:	bd80      	pop	{r7, pc}
 8080bd8:	40000c00 	.word	0x40000c00
 8080bdc:	40023800 	.word	0x40023800

08080be0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8080be0:	b580      	push	{r7, lr}
 8080be2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8080be4:	4b11      	ldr	r3, [pc, #68]	; (8080c2c <MX_USART1_UART_Init+0x4c>)
 8080be6:	4a12      	ldr	r2, [pc, #72]	; (8080c30 <MX_USART1_UART_Init+0x50>)
 8080be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8080bea:	4b10      	ldr	r3, [pc, #64]	; (8080c2c <MX_USART1_UART_Init+0x4c>)
 8080bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8080bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8080bf2:	4b0e      	ldr	r3, [pc, #56]	; (8080c2c <MX_USART1_UART_Init+0x4c>)
 8080bf4:	2200      	movs	r2, #0
 8080bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8080bf8:	4b0c      	ldr	r3, [pc, #48]	; (8080c2c <MX_USART1_UART_Init+0x4c>)
 8080bfa:	2200      	movs	r2, #0
 8080bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8080bfe:	4b0b      	ldr	r3, [pc, #44]	; (8080c2c <MX_USART1_UART_Init+0x4c>)
 8080c00:	2200      	movs	r2, #0
 8080c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8080c04:	4b09      	ldr	r3, [pc, #36]	; (8080c2c <MX_USART1_UART_Init+0x4c>)
 8080c06:	220c      	movs	r2, #12
 8080c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8080c0a:	4b08      	ldr	r3, [pc, #32]	; (8080c2c <MX_USART1_UART_Init+0x4c>)
 8080c0c:	2200      	movs	r2, #0
 8080c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8080c10:	4b06      	ldr	r3, [pc, #24]	; (8080c2c <MX_USART1_UART_Init+0x4c>)
 8080c12:	2200      	movs	r2, #0
 8080c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8080c16:	4805      	ldr	r0, [pc, #20]	; (8080c2c <MX_USART1_UART_Init+0x4c>)
 8080c18:	f008 f8ee 	bl	8088df8 <HAL_UART_Init>
 8080c1c:	4603      	mov	r3, r0
 8080c1e:	2b00      	cmp	r3, #0
 8080c20:	d001      	beq.n	8080c26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8080c22:	f00a f8e9 	bl	808adf8 <Error_Handler>
  }

}
 8080c26:	bf00      	nop
 8080c28:	bd80      	pop	{r7, pc}
 8080c2a:	bf00      	nop
 8080c2c:	200190e0 	.word	0x200190e0
 8080c30:	40011000 	.word	0x40011000

08080c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8080c34:	b580      	push	{r7, lr}
 8080c36:	b08a      	sub	sp, #40	; 0x28
 8080c38:	af00      	add	r7, sp, #0
 8080c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8080c3c:	f107 0314 	add.w	r3, r7, #20
 8080c40:	2200      	movs	r2, #0
 8080c42:	601a      	str	r2, [r3, #0]
 8080c44:	605a      	str	r2, [r3, #4]
 8080c46:	609a      	str	r2, [r3, #8]
 8080c48:	60da      	str	r2, [r3, #12]
 8080c4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8080c4c:	687b      	ldr	r3, [r7, #4]
 8080c4e:	681b      	ldr	r3, [r3, #0]
 8080c50:	4a2c      	ldr	r2, [pc, #176]	; (8080d04 <HAL_UART_MspInit+0xd0>)
 8080c52:	4293      	cmp	r3, r2
 8080c54:	d152      	bne.n	8080cfc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8080c56:	2300      	movs	r3, #0
 8080c58:	613b      	str	r3, [r7, #16]
 8080c5a:	4b2b      	ldr	r3, [pc, #172]	; (8080d08 <HAL_UART_MspInit+0xd4>)
 8080c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080c5e:	4a2a      	ldr	r2, [pc, #168]	; (8080d08 <HAL_UART_MspInit+0xd4>)
 8080c60:	f043 0310 	orr.w	r3, r3, #16
 8080c64:	6453      	str	r3, [r2, #68]	; 0x44
 8080c66:	4b28      	ldr	r3, [pc, #160]	; (8080d08 <HAL_UART_MspInit+0xd4>)
 8080c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080c6a:	f003 0310 	and.w	r3, r3, #16
 8080c6e:	613b      	str	r3, [r7, #16]
 8080c70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8080c72:	2300      	movs	r3, #0
 8080c74:	60fb      	str	r3, [r7, #12]
 8080c76:	4b24      	ldr	r3, [pc, #144]	; (8080d08 <HAL_UART_MspInit+0xd4>)
 8080c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080c7a:	4a23      	ldr	r2, [pc, #140]	; (8080d08 <HAL_UART_MspInit+0xd4>)
 8080c7c:	f043 0302 	orr.w	r3, r3, #2
 8080c80:	6313      	str	r3, [r2, #48]	; 0x30
 8080c82:	4b21      	ldr	r3, [pc, #132]	; (8080d08 <HAL_UART_MspInit+0xd4>)
 8080c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080c86:	f003 0302 	and.w	r3, r3, #2
 8080c8a:	60fb      	str	r3, [r7, #12]
 8080c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8080c8e:	2300      	movs	r3, #0
 8080c90:	60bb      	str	r3, [r7, #8]
 8080c92:	4b1d      	ldr	r3, [pc, #116]	; (8080d08 <HAL_UART_MspInit+0xd4>)
 8080c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080c96:	4a1c      	ldr	r2, [pc, #112]	; (8080d08 <HAL_UART_MspInit+0xd4>)
 8080c98:	f043 0301 	orr.w	r3, r3, #1
 8080c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8080c9e:	4b1a      	ldr	r3, [pc, #104]	; (8080d08 <HAL_UART_MspInit+0xd4>)
 8080ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080ca2:	f003 0301 	and.w	r3, r3, #1
 8080ca6:	60bb      	str	r3, [r7, #8]
 8080ca8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8080caa:	2340      	movs	r3, #64	; 0x40
 8080cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8080cae:	2302      	movs	r3, #2
 8080cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8080cb2:	2301      	movs	r3, #1
 8080cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8080cb6:	2303      	movs	r3, #3
 8080cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8080cba:	2307      	movs	r3, #7
 8080cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8080cbe:	f107 0314 	add.w	r3, r7, #20
 8080cc2:	4619      	mov	r1, r3
 8080cc4:	4811      	ldr	r0, [pc, #68]	; (8080d0c <HAL_UART_MspInit+0xd8>)
 8080cc6:	f001 fbd3 	bl	8082470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8080cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8080cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8080cd0:	2302      	movs	r3, #2
 8080cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8080cd4:	2301      	movs	r3, #1
 8080cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8080cd8:	2303      	movs	r3, #3
 8080cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8080cdc:	2307      	movs	r3, #7
 8080cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8080ce0:	f107 0314 	add.w	r3, r7, #20
 8080ce4:	4619      	mov	r1, r3
 8080ce6:	480a      	ldr	r0, [pc, #40]	; (8080d10 <HAL_UART_MspInit+0xdc>)
 8080ce8:	f001 fbc2 	bl	8082470 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8080cec:	2200      	movs	r2, #0
 8080cee:	2100      	movs	r1, #0
 8080cf0:	2025      	movs	r0, #37	; 0x25
 8080cf2:	f000 fc24 	bl	808153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8080cf6:	2025      	movs	r0, #37	; 0x25
 8080cf8:	f000 fc3d 	bl	8081576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8080cfc:	bf00      	nop
 8080cfe:	3728      	adds	r7, #40	; 0x28
 8080d00:	46bd      	mov	sp, r7
 8080d02:	bd80      	pop	{r7, pc}
 8080d04:	40011000 	.word	0x40011000
 8080d08:	40023800 	.word	0x40023800
 8080d0c:	40020400 	.word	0x40020400
 8080d10:	40020000 	.word	0x40020000

08080d14 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8080d14:	b580      	push	{r7, lr}
 8080d16:	b082      	sub	sp, #8
 8080d18:	af00      	add	r7, sp, #0
 8080d1a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8080d1c:	687b      	ldr	r3, [r7, #4]
 8080d1e:	681b      	ldr	r3, [r3, #0]
 8080d20:	4a0c      	ldr	r2, [pc, #48]	; (8080d54 <HAL_UART_MspDeInit+0x40>)
 8080d22:	4293      	cmp	r3, r2
 8080d24:	d111      	bne.n	8080d4a <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8080d26:	4b0c      	ldr	r3, [pc, #48]	; (8080d58 <HAL_UART_MspDeInit+0x44>)
 8080d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080d2a:	4a0b      	ldr	r2, [pc, #44]	; (8080d58 <HAL_UART_MspDeInit+0x44>)
 8080d2c:	f023 0310 	bic.w	r3, r3, #16
 8080d30:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8080d32:	2140      	movs	r1, #64	; 0x40
 8080d34:	4809      	ldr	r0, [pc, #36]	; (8080d5c <HAL_UART_MspDeInit+0x48>)
 8080d36:	f001 fd45 	bl	80827c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8080d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8080d3e:	4808      	ldr	r0, [pc, #32]	; (8080d60 <HAL_UART_MspDeInit+0x4c>)
 8080d40:	f001 fd40 	bl	80827c4 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8080d44:	2025      	movs	r0, #37	; 0x25
 8080d46:	f000 fc24 	bl	8081592 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 8080d4a:	bf00      	nop
 8080d4c:	3708      	adds	r7, #8
 8080d4e:	46bd      	mov	sp, r7
 8080d50:	bd80      	pop	{r7, pc}
 8080d52:	bf00      	nop
 8080d54:	40011000 	.word	0x40011000
 8080d58:	40023800 	.word	0x40023800
 8080d5c:	40020400 	.word	0x40020400
 8080d60:	40020000 	.word	0x40020000

08080d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8080d64:	b580      	push	{r7, lr}
 8080d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8080d68:	4b0e      	ldr	r3, [pc, #56]	; (8080da4 <HAL_Init+0x40>)
 8080d6a:	681b      	ldr	r3, [r3, #0]
 8080d6c:	4a0d      	ldr	r2, [pc, #52]	; (8080da4 <HAL_Init+0x40>)
 8080d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8080d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8080d74:	4b0b      	ldr	r3, [pc, #44]	; (8080da4 <HAL_Init+0x40>)
 8080d76:	681b      	ldr	r3, [r3, #0]
 8080d78:	4a0a      	ldr	r2, [pc, #40]	; (8080da4 <HAL_Init+0x40>)
 8080d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8080d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8080d80:	4b08      	ldr	r3, [pc, #32]	; (8080da4 <HAL_Init+0x40>)
 8080d82:	681b      	ldr	r3, [r3, #0]
 8080d84:	4a07      	ldr	r2, [pc, #28]	; (8080da4 <HAL_Init+0x40>)
 8080d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8080d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8080d8c:	2003      	movs	r0, #3
 8080d8e:	f000 fbcb 	bl	8081528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8080d92:	2000      	movs	r0, #0
 8080d94:	f000 f842 	bl	8080e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8080d98:	f7ff fd76 	bl	8080888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8080d9c:	2300      	movs	r3, #0
}
 8080d9e:	4618      	mov	r0, r3
 8080da0:	bd80      	pop	{r7, pc}
 8080da2:	bf00      	nop
 8080da4:	40023c00 	.word	0x40023c00

08080da8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8080da8:	b580      	push	{r7, lr}
 8080daa:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8080dac:	4b13      	ldr	r3, [pc, #76]	; (8080dfc <HAL_DeInit+0x54>)
 8080dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080db2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8080db4:	4b11      	ldr	r3, [pc, #68]	; (8080dfc <HAL_DeInit+0x54>)
 8080db6:	2200      	movs	r2, #0
 8080db8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8080dba:	4b10      	ldr	r3, [pc, #64]	; (8080dfc <HAL_DeInit+0x54>)
 8080dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080dc0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8080dc2:	4b0e      	ldr	r3, [pc, #56]	; (8080dfc <HAL_DeInit+0x54>)
 8080dc4:	2200      	movs	r2, #0
 8080dc6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8080dc8:	4b0c      	ldr	r3, [pc, #48]	; (8080dfc <HAL_DeInit+0x54>)
 8080dca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080dce:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8080dd0:	4b0a      	ldr	r3, [pc, #40]	; (8080dfc <HAL_DeInit+0x54>)
 8080dd2:	2200      	movs	r2, #0
 8080dd4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8080dd6:	4b09      	ldr	r3, [pc, #36]	; (8080dfc <HAL_DeInit+0x54>)
 8080dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080ddc:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8080dde:	4b07      	ldr	r3, [pc, #28]	; (8080dfc <HAL_DeInit+0x54>)
 8080de0:	2200      	movs	r2, #0
 8080de2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8080de4:	4b05      	ldr	r3, [pc, #20]	; (8080dfc <HAL_DeInit+0x54>)
 8080de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080dea:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8080dec:	4b03      	ldr	r3, [pc, #12]	; (8080dfc <HAL_DeInit+0x54>)
 8080dee:	2200      	movs	r2, #0
 8080df0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8080df2:	f000 f80c 	bl	8080e0e <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8080df6:	2300      	movs	r3, #0
}
 8080df8:	4618      	mov	r0, r3
 8080dfa:	bd80      	pop	{r7, pc}
 8080dfc:	40023800 	.word	0x40023800
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8080e00:	b480      	push	{r7}
 8080e02:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8080e04:	bf00      	nop
 8080e06:	46bd      	mov	sp, r7
 8080e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080e0c:	4770      	bx	lr

08080e0e <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8080e0e:	b480      	push	{r7}
 8080e10:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8080e12:	bf00      	nop
 8080e14:	46bd      	mov	sp, r7
 8080e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080e1a:	4770      	bx	lr

08080e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8080e1c:	b580      	push	{r7, lr}
 8080e1e:	b082      	sub	sp, #8
 8080e20:	af00      	add	r7, sp, #0
 8080e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8080e24:	4b12      	ldr	r3, [pc, #72]	; (8080e70 <HAL_InitTick+0x54>)
 8080e26:	681a      	ldr	r2, [r3, #0]
 8080e28:	4b12      	ldr	r3, [pc, #72]	; (8080e74 <HAL_InitTick+0x58>)
 8080e2a:	781b      	ldrb	r3, [r3, #0]
 8080e2c:	4619      	mov	r1, r3
 8080e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8080e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8080e3a:	4618      	mov	r0, r3
 8080e3c:	f000 fbbb 	bl	80815b6 <HAL_SYSTICK_Config>
 8080e40:	4603      	mov	r3, r0
 8080e42:	2b00      	cmp	r3, #0
 8080e44:	d001      	beq.n	8080e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8080e46:	2301      	movs	r3, #1
 8080e48:	e00e      	b.n	8080e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8080e4a:	687b      	ldr	r3, [r7, #4]
 8080e4c:	2b0f      	cmp	r3, #15
 8080e4e:	d80a      	bhi.n	8080e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8080e50:	2200      	movs	r2, #0
 8080e52:	6879      	ldr	r1, [r7, #4]
 8080e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8080e58:	f000 fb71 	bl	808153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8080e5c:	4a06      	ldr	r2, [pc, #24]	; (8080e78 <HAL_InitTick+0x5c>)
 8080e5e:	687b      	ldr	r3, [r7, #4]
 8080e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8080e62:	2300      	movs	r3, #0
 8080e64:	e000      	b.n	8080e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8080e66:	2301      	movs	r3, #1
}
 8080e68:	4618      	mov	r0, r3
 8080e6a:	3708      	adds	r7, #8
 8080e6c:	46bd      	mov	sp, r7
 8080e6e:	bd80      	pop	{r7, pc}
 8080e70:	20000000 	.word	0x20000000
 8080e74:	20000008 	.word	0x20000008
 8080e78:	20000004 	.word	0x20000004

08080e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8080e7c:	b480      	push	{r7}
 8080e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8080e80:	4b06      	ldr	r3, [pc, #24]	; (8080e9c <HAL_IncTick+0x20>)
 8080e82:	781b      	ldrb	r3, [r3, #0]
 8080e84:	461a      	mov	r2, r3
 8080e86:	4b06      	ldr	r3, [pc, #24]	; (8080ea0 <HAL_IncTick+0x24>)
 8080e88:	681b      	ldr	r3, [r3, #0]
 8080e8a:	4413      	add	r3, r2
 8080e8c:	4a04      	ldr	r2, [pc, #16]	; (8080ea0 <HAL_IncTick+0x24>)
 8080e8e:	6013      	str	r3, [r2, #0]
}
 8080e90:	bf00      	nop
 8080e92:	46bd      	mov	sp, r7
 8080e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080e98:	4770      	bx	lr
 8080e9a:	bf00      	nop
 8080e9c:	20000008 	.word	0x20000008
 8080ea0:	20019120 	.word	0x20019120

08080ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8080ea4:	b480      	push	{r7}
 8080ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8080ea8:	4b03      	ldr	r3, [pc, #12]	; (8080eb8 <HAL_GetTick+0x14>)
 8080eaa:	681b      	ldr	r3, [r3, #0]
}
 8080eac:	4618      	mov	r0, r3
 8080eae:	46bd      	mov	sp, r7
 8080eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080eb4:	4770      	bx	lr
 8080eb6:	bf00      	nop
 8080eb8:	20019120 	.word	0x20019120

08080ebc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8080ebc:	b480      	push	{r7}
 8080ebe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8080ec0:	4b03      	ldr	r3, [pc, #12]	; (8080ed0 <HAL_GetTickPrio+0x14>)
 8080ec2:	681b      	ldr	r3, [r3, #0]
}
 8080ec4:	4618      	mov	r0, r3
 8080ec6:	46bd      	mov	sp, r7
 8080ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080ecc:	4770      	bx	lr
 8080ece:	bf00      	nop
 8080ed0:	20000004 	.word	0x20000004

08080ed4 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8080ed4:	b580      	push	{r7, lr}
 8080ed6:	b084      	sub	sp, #16
 8080ed8:	af00      	add	r7, sp, #0
 8080eda:	4603      	mov	r3, r0
 8080edc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8080ede:	2300      	movs	r3, #0
 8080ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8080ee2:	4b0a      	ldr	r3, [pc, #40]	; (8080f0c <HAL_SetTickFreq+0x38>)
 8080ee4:	781b      	ldrb	r3, [r3, #0]
 8080ee6:	79fa      	ldrb	r2, [r7, #7]
 8080ee8:	429a      	cmp	r2, r3
 8080eea:	d009      	beq.n	8080f00 <HAL_SetTickFreq+0x2c>
  {
    uwTickFreq = Freq;
 8080eec:	4a07      	ldr	r2, [pc, #28]	; (8080f0c <HAL_SetTickFreq+0x38>)
 8080eee:	79fb      	ldrb	r3, [r7, #7]
 8080ef0:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8080ef2:	4b07      	ldr	r3, [pc, #28]	; (8080f10 <HAL_SetTickFreq+0x3c>)
 8080ef4:	681b      	ldr	r3, [r3, #0]
 8080ef6:	4618      	mov	r0, r3
 8080ef8:	f7ff ff90 	bl	8080e1c <HAL_InitTick>
 8080efc:	4603      	mov	r3, r0
 8080efe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8080f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8080f02:	4618      	mov	r0, r3
 8080f04:	3710      	adds	r7, #16
 8080f06:	46bd      	mov	sp, r7
 8080f08:	bd80      	pop	{r7, pc}
 8080f0a:	bf00      	nop
 8080f0c:	20000008 	.word	0x20000008
 8080f10:	20000004 	.word	0x20000004

08080f14 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8080f14:	b480      	push	{r7}
 8080f16:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8080f18:	4b03      	ldr	r3, [pc, #12]	; (8080f28 <HAL_GetTickFreq+0x14>)
 8080f1a:	781b      	ldrb	r3, [r3, #0]
}
 8080f1c:	4618      	mov	r0, r3
 8080f1e:	46bd      	mov	sp, r7
 8080f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080f24:	4770      	bx	lr
 8080f26:	bf00      	nop
 8080f28:	20000008 	.word	0x20000008

08080f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8080f2c:	b580      	push	{r7, lr}
 8080f2e:	b084      	sub	sp, #16
 8080f30:	af00      	add	r7, sp, #0
 8080f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8080f34:	f7ff ffb6 	bl	8080ea4 <HAL_GetTick>
 8080f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8080f3a:	687b      	ldr	r3, [r7, #4]
 8080f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8080f3e:	68fb      	ldr	r3, [r7, #12]
 8080f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8080f44:	d005      	beq.n	8080f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8080f46:	4b09      	ldr	r3, [pc, #36]	; (8080f6c <HAL_Delay+0x40>)
 8080f48:	781b      	ldrb	r3, [r3, #0]
 8080f4a:	461a      	mov	r2, r3
 8080f4c:	68fb      	ldr	r3, [r7, #12]
 8080f4e:	4413      	add	r3, r2
 8080f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8080f52:	bf00      	nop
 8080f54:	f7ff ffa6 	bl	8080ea4 <HAL_GetTick>
 8080f58:	4602      	mov	r2, r0
 8080f5a:	68bb      	ldr	r3, [r7, #8]
 8080f5c:	1ad3      	subs	r3, r2, r3
 8080f5e:	68fa      	ldr	r2, [r7, #12]
 8080f60:	429a      	cmp	r2, r3
 8080f62:	d8f7      	bhi.n	8080f54 <HAL_Delay+0x28>
  {
  }
}
 8080f64:	bf00      	nop
 8080f66:	3710      	adds	r7, #16
 8080f68:	46bd      	mov	sp, r7
 8080f6a:	bd80      	pop	{r7, pc}
 8080f6c:	20000008 	.word	0x20000008

08080f70 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8080f70:	b480      	push	{r7}
 8080f72:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8080f74:	4b05      	ldr	r3, [pc, #20]	; (8080f8c <HAL_SuspendTick+0x1c>)
 8080f76:	681b      	ldr	r3, [r3, #0]
 8080f78:	4a04      	ldr	r2, [pc, #16]	; (8080f8c <HAL_SuspendTick+0x1c>)
 8080f7a:	f023 0302 	bic.w	r3, r3, #2
 8080f7e:	6013      	str	r3, [r2, #0]
}
 8080f80:	bf00      	nop
 8080f82:	46bd      	mov	sp, r7
 8080f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080f88:	4770      	bx	lr
 8080f8a:	bf00      	nop
 8080f8c:	e000e010 	.word	0xe000e010

08080f90 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8080f90:	b480      	push	{r7}
 8080f92:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8080f94:	4b05      	ldr	r3, [pc, #20]	; (8080fac <HAL_ResumeTick+0x1c>)
 8080f96:	681b      	ldr	r3, [r3, #0]
 8080f98:	4a04      	ldr	r2, [pc, #16]	; (8080fac <HAL_ResumeTick+0x1c>)
 8080f9a:	f043 0302 	orr.w	r3, r3, #2
 8080f9e:	6013      	str	r3, [r2, #0]
}
 8080fa0:	bf00      	nop
 8080fa2:	46bd      	mov	sp, r7
 8080fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080fa8:	4770      	bx	lr
 8080faa:	bf00      	nop
 8080fac:	e000e010 	.word	0xe000e010

08080fb0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8080fb0:	b480      	push	{r7}
 8080fb2:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8080fb4:	4b02      	ldr	r3, [pc, #8]	; (8080fc0 <HAL_GetHalVersion+0x10>)
}
 8080fb6:	4618      	mov	r0, r3
 8080fb8:	46bd      	mov	sp, r7
 8080fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080fbe:	4770      	bx	lr
 8080fc0:	01070600 	.word	0x01070600

08080fc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8080fc4:	b480      	push	{r7}
 8080fc6:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8080fc8:	4b03      	ldr	r3, [pc, #12]	; (8080fd8 <HAL_GetREVID+0x14>)
 8080fca:	681b      	ldr	r3, [r3, #0]
 8080fcc:	0c1b      	lsrs	r3, r3, #16
}
 8080fce:	4618      	mov	r0, r3
 8080fd0:	46bd      	mov	sp, r7
 8080fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080fd6:	4770      	bx	lr
 8080fd8:	e0042000 	.word	0xe0042000

08080fdc <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8080fdc:	b480      	push	{r7}
 8080fde:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8080fe0:	4b04      	ldr	r3, [pc, #16]	; (8080ff4 <HAL_GetDEVID+0x18>)
 8080fe2:	681b      	ldr	r3, [r3, #0]
 8080fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8080fe8:	4618      	mov	r0, r3
 8080fea:	46bd      	mov	sp, r7
 8080fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080ff0:	4770      	bx	lr
 8080ff2:	bf00      	nop
 8080ff4:	e0042000 	.word	0xe0042000

08080ff8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8080ff8:	b480      	push	{r7}
 8080ffa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8080ffc:	4b05      	ldr	r3, [pc, #20]	; (8081014 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8080ffe:	685b      	ldr	r3, [r3, #4]
 8081000:	4a04      	ldr	r2, [pc, #16]	; (8081014 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8081002:	f043 0301 	orr.w	r3, r3, #1
 8081006:	6053      	str	r3, [r2, #4]
}
 8081008:	bf00      	nop
 808100a:	46bd      	mov	sp, r7
 808100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081010:	4770      	bx	lr
 8081012:	bf00      	nop
 8081014:	e0042000 	.word	0xe0042000

08081018 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8081018:	b480      	push	{r7}
 808101a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 808101c:	4b05      	ldr	r3, [pc, #20]	; (8081034 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 808101e:	685b      	ldr	r3, [r3, #4]
 8081020:	4a04      	ldr	r2, [pc, #16]	; (8081034 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8081022:	f023 0301 	bic.w	r3, r3, #1
 8081026:	6053      	str	r3, [r2, #4]
}
 8081028:	bf00      	nop
 808102a:	46bd      	mov	sp, r7
 808102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081030:	4770      	bx	lr
 8081032:	bf00      	nop
 8081034:	e0042000 	.word	0xe0042000

08081038 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8081038:	b480      	push	{r7}
 808103a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 808103c:	4b05      	ldr	r3, [pc, #20]	; (8081054 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 808103e:	685b      	ldr	r3, [r3, #4]
 8081040:	4a04      	ldr	r2, [pc, #16]	; (8081054 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8081042:	f043 0302 	orr.w	r3, r3, #2
 8081046:	6053      	str	r3, [r2, #4]
}
 8081048:	bf00      	nop
 808104a:	46bd      	mov	sp, r7
 808104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081050:	4770      	bx	lr
 8081052:	bf00      	nop
 8081054:	e0042000 	.word	0xe0042000

08081058 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8081058:	b480      	push	{r7}
 808105a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 808105c:	4b05      	ldr	r3, [pc, #20]	; (8081074 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 808105e:	685b      	ldr	r3, [r3, #4]
 8081060:	4a04      	ldr	r2, [pc, #16]	; (8081074 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8081062:	f023 0302 	bic.w	r3, r3, #2
 8081066:	6053      	str	r3, [r2, #4]
}
 8081068:	bf00      	nop
 808106a:	46bd      	mov	sp, r7
 808106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081070:	4770      	bx	lr
 8081072:	bf00      	nop
 8081074:	e0042000 	.word	0xe0042000

08081078 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8081078:	b480      	push	{r7}
 808107a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 808107c:	4b05      	ldr	r3, [pc, #20]	; (8081094 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 808107e:	685b      	ldr	r3, [r3, #4]
 8081080:	4a04      	ldr	r2, [pc, #16]	; (8081094 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8081082:	f043 0304 	orr.w	r3, r3, #4
 8081086:	6053      	str	r3, [r2, #4]
}
 8081088:	bf00      	nop
 808108a:	46bd      	mov	sp, r7
 808108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081090:	4770      	bx	lr
 8081092:	bf00      	nop
 8081094:	e0042000 	.word	0xe0042000

08081098 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8081098:	b480      	push	{r7}
 808109a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 808109c:	4b05      	ldr	r3, [pc, #20]	; (80810b4 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 808109e:	685b      	ldr	r3, [r3, #4]
 80810a0:	4a04      	ldr	r2, [pc, #16]	; (80810b4 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80810a2:	f023 0304 	bic.w	r3, r3, #4
 80810a6:	6053      	str	r3, [r2, #4]
}
 80810a8:	bf00      	nop
 80810aa:	46bd      	mov	sp, r7
 80810ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80810b0:	4770      	bx	lr
 80810b2:	bf00      	nop
 80810b4:	e0042000 	.word	0xe0042000

080810b8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80810b8:	b480      	push	{r7}
 80810ba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 80810bc:	4b03      	ldr	r3, [pc, #12]	; (80810cc <HAL_EnableCompensationCell+0x14>)
 80810be:	2201      	movs	r2, #1
 80810c0:	601a      	str	r2, [r3, #0]
}
 80810c2:	bf00      	nop
 80810c4:	46bd      	mov	sp, r7
 80810c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80810ca:	4770      	bx	lr
 80810cc:	42270400 	.word	0x42270400

080810d0 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 80810d0:	b480      	push	{r7}
 80810d2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 80810d4:	4b03      	ldr	r3, [pc, #12]	; (80810e4 <HAL_DisableCompensationCell+0x14>)
 80810d6:	2200      	movs	r2, #0
 80810d8:	601a      	str	r2, [r3, #0]
}
 80810da:	bf00      	nop
 80810dc:	46bd      	mov	sp, r7
 80810de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80810e2:	4770      	bx	lr
 80810e4:	42270400 	.word	0x42270400

080810e8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80810e8:	b480      	push	{r7}
 80810ea:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80810ec:	4b03      	ldr	r3, [pc, #12]	; (80810fc <HAL_GetUIDw0+0x14>)
 80810ee:	681b      	ldr	r3, [r3, #0]
}
 80810f0:	4618      	mov	r0, r3
 80810f2:	46bd      	mov	sp, r7
 80810f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80810f8:	4770      	bx	lr
 80810fa:	bf00      	nop
 80810fc:	1fff7a10 	.word	0x1fff7a10

08081100 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8081100:	b480      	push	{r7}
 8081102:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8081104:	4b03      	ldr	r3, [pc, #12]	; (8081114 <HAL_GetUIDw1+0x14>)
 8081106:	681b      	ldr	r3, [r3, #0]
}
 8081108:	4618      	mov	r0, r3
 808110a:	46bd      	mov	sp, r7
 808110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081110:	4770      	bx	lr
 8081112:	bf00      	nop
 8081114:	1fff7a14 	.word	0x1fff7a14

08081118 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8081118:	b480      	push	{r7}
 808111a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 808111c:	4b03      	ldr	r3, [pc, #12]	; (808112c <HAL_GetUIDw2+0x14>)
 808111e:	681b      	ldr	r3, [r3, #0]
}
 8081120:	4618      	mov	r0, r3
 8081122:	46bd      	mov	sp, r7
 8081124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081128:	4770      	bx	lr
 808112a:	bf00      	nop
 808112c:	1fff7a18 	.word	0x1fff7a18

08081130 <HAL_EnableMemorySwappingBank>:
  *         and Flash Bank1 mapped at 0x08100000 (and aliased at 0x00100000)   
  *
  * @retval None
  */
void HAL_EnableMemorySwappingBank(void)
{
 8081130:	b480      	push	{r7}
 8081132:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)UFB_MODE_BB = (uint32_t)ENABLE;
 8081134:	4b03      	ldr	r3, [pc, #12]	; (8081144 <HAL_EnableMemorySwappingBank+0x14>)
 8081136:	2201      	movs	r2, #1
 8081138:	601a      	str	r2, [r3, #0]
}
 808113a:	bf00      	nop
 808113c:	46bd      	mov	sp, r7
 808113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081142:	4770      	bx	lr
 8081144:	42270020 	.word	0x42270020

08081148 <HAL_DisableMemorySwappingBank>:
  *         and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000) 
  *           
  * @retval None
  */
void HAL_DisableMemorySwappingBank(void)
{
 8081148:	b480      	push	{r7}
 808114a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)UFB_MODE_BB = (uint32_t)DISABLE;
 808114c:	4b03      	ldr	r3, [pc, #12]	; (808115c <HAL_DisableMemorySwappingBank+0x14>)
 808114e:	2200      	movs	r2, #0
 8081150:	601a      	str	r2, [r3, #0]
}
 8081152:	bf00      	nop
 8081154:	46bd      	mov	sp, r7
 8081156:	f85d 7b04 	ldr.w	r7, [sp], #4
 808115a:	4770      	bx	lr
 808115c:	42270020 	.word	0x42270020

08081160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8081160:	b480      	push	{r7}
 8081162:	b085      	sub	sp, #20
 8081164:	af00      	add	r7, sp, #0
 8081166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8081168:	687b      	ldr	r3, [r7, #4]
 808116a:	f003 0307 	and.w	r3, r3, #7
 808116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8081170:	4b0c      	ldr	r3, [pc, #48]	; (80811a4 <__NVIC_SetPriorityGrouping+0x44>)
 8081172:	68db      	ldr	r3, [r3, #12]
 8081174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8081176:	68ba      	ldr	r2, [r7, #8]
 8081178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 808117c:	4013      	ands	r3, r2
 808117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8081180:	68fb      	ldr	r3, [r7, #12]
 8081182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8081184:	68bb      	ldr	r3, [r7, #8]
 8081186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8081188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 808118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8081190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8081192:	4a04      	ldr	r2, [pc, #16]	; (80811a4 <__NVIC_SetPriorityGrouping+0x44>)
 8081194:	68bb      	ldr	r3, [r7, #8]
 8081196:	60d3      	str	r3, [r2, #12]
}
 8081198:	bf00      	nop
 808119a:	3714      	adds	r7, #20
 808119c:	46bd      	mov	sp, r7
 808119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80811a2:	4770      	bx	lr
 80811a4:	e000ed00 	.word	0xe000ed00

080811a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80811a8:	b480      	push	{r7}
 80811aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80811ac:	4b04      	ldr	r3, [pc, #16]	; (80811c0 <__NVIC_GetPriorityGrouping+0x18>)
 80811ae:	68db      	ldr	r3, [r3, #12]
 80811b0:	0a1b      	lsrs	r3, r3, #8
 80811b2:	f003 0307 	and.w	r3, r3, #7
}
 80811b6:	4618      	mov	r0, r3
 80811b8:	46bd      	mov	sp, r7
 80811ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80811be:	4770      	bx	lr
 80811c0:	e000ed00 	.word	0xe000ed00

080811c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80811c4:	b480      	push	{r7}
 80811c6:	b083      	sub	sp, #12
 80811c8:	af00      	add	r7, sp, #0
 80811ca:	4603      	mov	r3, r0
 80811cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80811ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80811d2:	2b00      	cmp	r3, #0
 80811d4:	db0b      	blt.n	80811ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80811d6:	79fb      	ldrb	r3, [r7, #7]
 80811d8:	f003 021f 	and.w	r2, r3, #31
 80811dc:	4907      	ldr	r1, [pc, #28]	; (80811fc <__NVIC_EnableIRQ+0x38>)
 80811de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80811e2:	095b      	lsrs	r3, r3, #5
 80811e4:	2001      	movs	r0, #1
 80811e6:	fa00 f202 	lsl.w	r2, r0, r2
 80811ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80811ee:	bf00      	nop
 80811f0:	370c      	adds	r7, #12
 80811f2:	46bd      	mov	sp, r7
 80811f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80811f8:	4770      	bx	lr
 80811fa:	bf00      	nop
 80811fc:	e000e100 	.word	0xe000e100

08081200 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8081200:	b480      	push	{r7}
 8081202:	b083      	sub	sp, #12
 8081204:	af00      	add	r7, sp, #0
 8081206:	4603      	mov	r3, r0
 8081208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 808120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 808120e:	2b00      	cmp	r3, #0
 8081210:	db10      	blt.n	8081234 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8081212:	79fb      	ldrb	r3, [r7, #7]
 8081214:	f003 021f 	and.w	r2, r3, #31
 8081218:	4909      	ldr	r1, [pc, #36]	; (8081240 <__NVIC_DisableIRQ+0x40>)
 808121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 808121e:	095b      	lsrs	r3, r3, #5
 8081220:	2001      	movs	r0, #1
 8081222:	fa00 f202 	lsl.w	r2, r0, r2
 8081226:	3320      	adds	r3, #32
 8081228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 808122c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8081230:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8081234:	bf00      	nop
 8081236:	370c      	adds	r7, #12
 8081238:	46bd      	mov	sp, r7
 808123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808123e:	4770      	bx	lr
 8081240:	e000e100 	.word	0xe000e100

08081244 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8081244:	b480      	push	{r7}
 8081246:	b083      	sub	sp, #12
 8081248:	af00      	add	r7, sp, #0
 808124a:	4603      	mov	r3, r0
 808124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 808124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8081252:	2b00      	cmp	r3, #0
 8081254:	db0e      	blt.n	8081274 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8081256:	4a0b      	ldr	r2, [pc, #44]	; (8081284 <__NVIC_GetPendingIRQ+0x40>)
 8081258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 808125c:	095b      	lsrs	r3, r3, #5
 808125e:	3340      	adds	r3, #64	; 0x40
 8081260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8081264:	79fb      	ldrb	r3, [r7, #7]
 8081266:	f003 031f 	and.w	r3, r3, #31
 808126a:	fa22 f303 	lsr.w	r3, r2, r3
 808126e:	f003 0301 	and.w	r3, r3, #1
 8081272:	e000      	b.n	8081276 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8081274:	2300      	movs	r3, #0
  }
}
 8081276:	4618      	mov	r0, r3
 8081278:	370c      	adds	r7, #12
 808127a:	46bd      	mov	sp, r7
 808127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081280:	4770      	bx	lr
 8081282:	bf00      	nop
 8081284:	e000e100 	.word	0xe000e100

08081288 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8081288:	b480      	push	{r7}
 808128a:	b083      	sub	sp, #12
 808128c:	af00      	add	r7, sp, #0
 808128e:	4603      	mov	r3, r0
 8081290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8081292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8081296:	2b00      	cmp	r3, #0
 8081298:	db0c      	blt.n	80812b4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 808129a:	79fb      	ldrb	r3, [r7, #7]
 808129c:	f003 021f 	and.w	r2, r3, #31
 80812a0:	4907      	ldr	r1, [pc, #28]	; (80812c0 <__NVIC_SetPendingIRQ+0x38>)
 80812a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80812a6:	095b      	lsrs	r3, r3, #5
 80812a8:	2001      	movs	r0, #1
 80812aa:	fa00 f202 	lsl.w	r2, r0, r2
 80812ae:	3340      	adds	r3, #64	; 0x40
 80812b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80812b4:	bf00      	nop
 80812b6:	370c      	adds	r7, #12
 80812b8:	46bd      	mov	sp, r7
 80812ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80812be:	4770      	bx	lr
 80812c0:	e000e100 	.word	0xe000e100

080812c4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80812c4:	b480      	push	{r7}
 80812c6:	b083      	sub	sp, #12
 80812c8:	af00      	add	r7, sp, #0
 80812ca:	4603      	mov	r3, r0
 80812cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80812ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80812d2:	2b00      	cmp	r3, #0
 80812d4:	db0c      	blt.n	80812f0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80812d6:	79fb      	ldrb	r3, [r7, #7]
 80812d8:	f003 021f 	and.w	r2, r3, #31
 80812dc:	4907      	ldr	r1, [pc, #28]	; (80812fc <__NVIC_ClearPendingIRQ+0x38>)
 80812de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80812e2:	095b      	lsrs	r3, r3, #5
 80812e4:	2001      	movs	r0, #1
 80812e6:	fa00 f202 	lsl.w	r2, r0, r2
 80812ea:	3360      	adds	r3, #96	; 0x60
 80812ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80812f0:	bf00      	nop
 80812f2:	370c      	adds	r7, #12
 80812f4:	46bd      	mov	sp, r7
 80812f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80812fa:	4770      	bx	lr
 80812fc:	e000e100 	.word	0xe000e100

08081300 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8081300:	b480      	push	{r7}
 8081302:	b083      	sub	sp, #12
 8081304:	af00      	add	r7, sp, #0
 8081306:	4603      	mov	r3, r0
 8081308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 808130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 808130e:	2b00      	cmp	r3, #0
 8081310:	db0e      	blt.n	8081330 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8081312:	4a0b      	ldr	r2, [pc, #44]	; (8081340 <__NVIC_GetActive+0x40>)
 8081314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8081318:	095b      	lsrs	r3, r3, #5
 808131a:	3380      	adds	r3, #128	; 0x80
 808131c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8081320:	79fb      	ldrb	r3, [r7, #7]
 8081322:	f003 031f 	and.w	r3, r3, #31
 8081326:	fa22 f303 	lsr.w	r3, r2, r3
 808132a:	f003 0301 	and.w	r3, r3, #1
 808132e:	e000      	b.n	8081332 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8081330:	2300      	movs	r3, #0
  }
}
 8081332:	4618      	mov	r0, r3
 8081334:	370c      	adds	r7, #12
 8081336:	46bd      	mov	sp, r7
 8081338:	f85d 7b04 	ldr.w	r7, [sp], #4
 808133c:	4770      	bx	lr
 808133e:	bf00      	nop
 8081340:	e000e100 	.word	0xe000e100

08081344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8081344:	b480      	push	{r7}
 8081346:	b083      	sub	sp, #12
 8081348:	af00      	add	r7, sp, #0
 808134a:	4603      	mov	r3, r0
 808134c:	6039      	str	r1, [r7, #0]
 808134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8081350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8081354:	2b00      	cmp	r3, #0
 8081356:	db0a      	blt.n	808136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8081358:	683b      	ldr	r3, [r7, #0]
 808135a:	b2da      	uxtb	r2, r3
 808135c:	490c      	ldr	r1, [pc, #48]	; (8081390 <__NVIC_SetPriority+0x4c>)
 808135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8081362:	0112      	lsls	r2, r2, #4
 8081364:	b2d2      	uxtb	r2, r2
 8081366:	440b      	add	r3, r1
 8081368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 808136c:	e00a      	b.n	8081384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 808136e:	683b      	ldr	r3, [r7, #0]
 8081370:	b2da      	uxtb	r2, r3
 8081372:	4908      	ldr	r1, [pc, #32]	; (8081394 <__NVIC_SetPriority+0x50>)
 8081374:	79fb      	ldrb	r3, [r7, #7]
 8081376:	f003 030f 	and.w	r3, r3, #15
 808137a:	3b04      	subs	r3, #4
 808137c:	0112      	lsls	r2, r2, #4
 808137e:	b2d2      	uxtb	r2, r2
 8081380:	440b      	add	r3, r1
 8081382:	761a      	strb	r2, [r3, #24]
}
 8081384:	bf00      	nop
 8081386:	370c      	adds	r7, #12
 8081388:	46bd      	mov	sp, r7
 808138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808138e:	4770      	bx	lr
 8081390:	e000e100 	.word	0xe000e100
 8081394:	e000ed00 	.word	0xe000ed00

08081398 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8081398:	b480      	push	{r7}
 808139a:	b083      	sub	sp, #12
 808139c:	af00      	add	r7, sp, #0
 808139e:	4603      	mov	r3, r0
 80813a0:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 80813a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80813a6:	2b00      	cmp	r3, #0
 80813a8:	db09      	blt.n	80813be <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80813aa:	4a0d      	ldr	r2, [pc, #52]	; (80813e0 <__NVIC_GetPriority+0x48>)
 80813ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80813b0:	4413      	add	r3, r2
 80813b2:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80813b6:	b2db      	uxtb	r3, r3
 80813b8:	091b      	lsrs	r3, r3, #4
 80813ba:	b2db      	uxtb	r3, r3
 80813bc:	e009      	b.n	80813d2 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 80813be:	4a09      	ldr	r2, [pc, #36]	; (80813e4 <__NVIC_GetPriority+0x4c>)
 80813c0:	79fb      	ldrb	r3, [r7, #7]
 80813c2:	f003 030f 	and.w	r3, r3, #15
 80813c6:	3b04      	subs	r3, #4
 80813c8:	4413      	add	r3, r2
 80813ca:	7e1b      	ldrb	r3, [r3, #24]
 80813cc:	b2db      	uxtb	r3, r3
 80813ce:	091b      	lsrs	r3, r3, #4
 80813d0:	b2db      	uxtb	r3, r3
  }
}
 80813d2:	4618      	mov	r0, r3
 80813d4:	370c      	adds	r7, #12
 80813d6:	46bd      	mov	sp, r7
 80813d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80813dc:	4770      	bx	lr
 80813de:	bf00      	nop
 80813e0:	e000e100 	.word	0xe000e100
 80813e4:	e000ed00 	.word	0xe000ed00

080813e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80813e8:	b480      	push	{r7}
 80813ea:	b089      	sub	sp, #36	; 0x24
 80813ec:	af00      	add	r7, sp, #0
 80813ee:	60f8      	str	r0, [r7, #12]
 80813f0:	60b9      	str	r1, [r7, #8]
 80813f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80813f4:	68fb      	ldr	r3, [r7, #12]
 80813f6:	f003 0307 	and.w	r3, r3, #7
 80813fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80813fc:	69fb      	ldr	r3, [r7, #28]
 80813fe:	f1c3 0307 	rsb	r3, r3, #7
 8081402:	2b04      	cmp	r3, #4
 8081404:	bf28      	it	cs
 8081406:	2304      	movcs	r3, #4
 8081408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 808140a:	69fb      	ldr	r3, [r7, #28]
 808140c:	3304      	adds	r3, #4
 808140e:	2b06      	cmp	r3, #6
 8081410:	d902      	bls.n	8081418 <NVIC_EncodePriority+0x30>
 8081412:	69fb      	ldr	r3, [r7, #28]
 8081414:	3b03      	subs	r3, #3
 8081416:	e000      	b.n	808141a <NVIC_EncodePriority+0x32>
 8081418:	2300      	movs	r3, #0
 808141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 808141c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8081420:	69bb      	ldr	r3, [r7, #24]
 8081422:	fa02 f303 	lsl.w	r3, r2, r3
 8081426:	43da      	mvns	r2, r3
 8081428:	68bb      	ldr	r3, [r7, #8]
 808142a:	401a      	ands	r2, r3
 808142c:	697b      	ldr	r3, [r7, #20]
 808142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8081430:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8081434:	697b      	ldr	r3, [r7, #20]
 8081436:	fa01 f303 	lsl.w	r3, r1, r3
 808143a:	43d9      	mvns	r1, r3
 808143c:	687b      	ldr	r3, [r7, #4]
 808143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8081440:	4313      	orrs	r3, r2
         );
}
 8081442:	4618      	mov	r0, r3
 8081444:	3724      	adds	r7, #36	; 0x24
 8081446:	46bd      	mov	sp, r7
 8081448:	f85d 7b04 	ldr.w	r7, [sp], #4
 808144c:	4770      	bx	lr

0808144e <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 808144e:	b480      	push	{r7}
 8081450:	b089      	sub	sp, #36	; 0x24
 8081452:	af00      	add	r7, sp, #0
 8081454:	60f8      	str	r0, [r7, #12]
 8081456:	60b9      	str	r1, [r7, #8]
 8081458:	607a      	str	r2, [r7, #4]
 808145a:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 808145c:	68bb      	ldr	r3, [r7, #8]
 808145e:	f003 0307 	and.w	r3, r3, #7
 8081462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8081464:	69fb      	ldr	r3, [r7, #28]
 8081466:	f1c3 0307 	rsb	r3, r3, #7
 808146a:	2b04      	cmp	r3, #4
 808146c:	bf28      	it	cs
 808146e:	2304      	movcs	r3, #4
 8081470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8081472:	69fb      	ldr	r3, [r7, #28]
 8081474:	3304      	adds	r3, #4
 8081476:	2b06      	cmp	r3, #6
 8081478:	d902      	bls.n	8081480 <NVIC_DecodePriority+0x32>
 808147a:	69fb      	ldr	r3, [r7, #28]
 808147c:	3b03      	subs	r3, #3
 808147e:	e000      	b.n	8081482 <NVIC_DecodePriority+0x34>
 8081480:	2300      	movs	r3, #0
 8081482:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8081484:	68fa      	ldr	r2, [r7, #12]
 8081486:	697b      	ldr	r3, [r7, #20]
 8081488:	40da      	lsrs	r2, r3
 808148a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 808148e:	69bb      	ldr	r3, [r7, #24]
 8081490:	fa01 f303 	lsl.w	r3, r1, r3
 8081494:	43db      	mvns	r3, r3
 8081496:	401a      	ands	r2, r3
 8081498:	687b      	ldr	r3, [r7, #4]
 808149a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 808149c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80814a0:	697b      	ldr	r3, [r7, #20]
 80814a2:	fa02 f303 	lsl.w	r3, r2, r3
 80814a6:	43da      	mvns	r2, r3
 80814a8:	68fb      	ldr	r3, [r7, #12]
 80814aa:	401a      	ands	r2, r3
 80814ac:	683b      	ldr	r3, [r7, #0]
 80814ae:	601a      	str	r2, [r3, #0]
}
 80814b0:	bf00      	nop
 80814b2:	3724      	adds	r7, #36	; 0x24
 80814b4:	46bd      	mov	sp, r7
 80814b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80814ba:	4770      	bx	lr

080814bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80814bc:	b480      	push	{r7}
 80814be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80814c0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80814c4:	4b05      	ldr	r3, [pc, #20]	; (80814dc <__NVIC_SystemReset+0x20>)
 80814c6:	68db      	ldr	r3, [r3, #12]
 80814c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80814cc:	4903      	ldr	r1, [pc, #12]	; (80814dc <__NVIC_SystemReset+0x20>)
 80814ce:	4b04      	ldr	r3, [pc, #16]	; (80814e0 <__NVIC_SystemReset+0x24>)
 80814d0:	4313      	orrs	r3, r2
 80814d2:	60cb      	str	r3, [r1, #12]
 80814d4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80814d8:	bf00      	nop
 80814da:	e7fd      	b.n	80814d8 <__NVIC_SystemReset+0x1c>
 80814dc:	e000ed00 	.word	0xe000ed00
 80814e0:	05fa0004 	.word	0x05fa0004

080814e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80814e4:	b580      	push	{r7, lr}
 80814e6:	b082      	sub	sp, #8
 80814e8:	af00      	add	r7, sp, #0
 80814ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80814ec:	687b      	ldr	r3, [r7, #4]
 80814ee:	3b01      	subs	r3, #1
 80814f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80814f4:	d301      	bcc.n	80814fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80814f6:	2301      	movs	r3, #1
 80814f8:	e00f      	b.n	808151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80814fa:	4a0a      	ldr	r2, [pc, #40]	; (8081524 <SysTick_Config+0x40>)
 80814fc:	687b      	ldr	r3, [r7, #4]
 80814fe:	3b01      	subs	r3, #1
 8081500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8081502:	210f      	movs	r1, #15
 8081504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8081508:	f7ff ff1c 	bl	8081344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 808150c:	4b05      	ldr	r3, [pc, #20]	; (8081524 <SysTick_Config+0x40>)
 808150e:	2200      	movs	r2, #0
 8081510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8081512:	4b04      	ldr	r3, [pc, #16]	; (8081524 <SysTick_Config+0x40>)
 8081514:	2207      	movs	r2, #7
 8081516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8081518:	2300      	movs	r3, #0
}
 808151a:	4618      	mov	r0, r3
 808151c:	3708      	adds	r7, #8
 808151e:	46bd      	mov	sp, r7
 8081520:	bd80      	pop	{r7, pc}
 8081522:	bf00      	nop
 8081524:	e000e010 	.word	0xe000e010

08081528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8081528:	b580      	push	{r7, lr}
 808152a:	b082      	sub	sp, #8
 808152c:	af00      	add	r7, sp, #0
 808152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8081530:	6878      	ldr	r0, [r7, #4]
 8081532:	f7ff fe15 	bl	8081160 <__NVIC_SetPriorityGrouping>
}
 8081536:	bf00      	nop
 8081538:	3708      	adds	r7, #8
 808153a:	46bd      	mov	sp, r7
 808153c:	bd80      	pop	{r7, pc}

0808153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 808153e:	b580      	push	{r7, lr}
 8081540:	b086      	sub	sp, #24
 8081542:	af00      	add	r7, sp, #0
 8081544:	4603      	mov	r3, r0
 8081546:	60b9      	str	r1, [r7, #8]
 8081548:	607a      	str	r2, [r7, #4]
 808154a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 808154c:	2300      	movs	r3, #0
 808154e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8081550:	f7ff fe2a 	bl	80811a8 <__NVIC_GetPriorityGrouping>
 8081554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8081556:	687a      	ldr	r2, [r7, #4]
 8081558:	68b9      	ldr	r1, [r7, #8]
 808155a:	6978      	ldr	r0, [r7, #20]
 808155c:	f7ff ff44 	bl	80813e8 <NVIC_EncodePriority>
 8081560:	4602      	mov	r2, r0
 8081562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8081566:	4611      	mov	r1, r2
 8081568:	4618      	mov	r0, r3
 808156a:	f7ff feeb 	bl	8081344 <__NVIC_SetPriority>
}
 808156e:	bf00      	nop
 8081570:	3718      	adds	r7, #24
 8081572:	46bd      	mov	sp, r7
 8081574:	bd80      	pop	{r7, pc}

08081576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8081576:	b580      	push	{r7, lr}
 8081578:	b082      	sub	sp, #8
 808157a:	af00      	add	r7, sp, #0
 808157c:	4603      	mov	r3, r0
 808157e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8081580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8081584:	4618      	mov	r0, r3
 8081586:	f7ff fe1d 	bl	80811c4 <__NVIC_EnableIRQ>
}
 808158a:	bf00      	nop
 808158c:	3708      	adds	r7, #8
 808158e:	46bd      	mov	sp, r7
 8081590:	bd80      	pop	{r7, pc}

08081592 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8081592:	b580      	push	{r7, lr}
 8081594:	b082      	sub	sp, #8
 8081596:	af00      	add	r7, sp, #0
 8081598:	4603      	mov	r3, r0
 808159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 808159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80815a0:	4618      	mov	r0, r3
 80815a2:	f7ff fe2d 	bl	8081200 <__NVIC_DisableIRQ>
}
 80815a6:	bf00      	nop
 80815a8:	3708      	adds	r7, #8
 80815aa:	46bd      	mov	sp, r7
 80815ac:	bd80      	pop	{r7, pc}

080815ae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80815ae:	b580      	push	{r7, lr}
 80815b0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80815b2:	f7ff ff83 	bl	80814bc <__NVIC_SystemReset>

080815b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80815b6:	b580      	push	{r7, lr}
 80815b8:	b082      	sub	sp, #8
 80815ba:	af00      	add	r7, sp, #0
 80815bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80815be:	6878      	ldr	r0, [r7, #4]
 80815c0:	f7ff ff90 	bl	80814e4 <SysTick_Config>
 80815c4:	4603      	mov	r3, r0
}
 80815c6:	4618      	mov	r0, r3
 80815c8:	3708      	adds	r7, #8
 80815ca:	46bd      	mov	sp, r7
 80815cc:	bd80      	pop	{r7, pc}

080815ce <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80815ce:	b480      	push	{r7}
 80815d0:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80815d2:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80815d6:	4b07      	ldr	r3, [pc, #28]	; (80815f4 <HAL_MPU_Disable+0x26>)
 80815d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80815da:	4a06      	ldr	r2, [pc, #24]	; (80815f4 <HAL_MPU_Disable+0x26>)
 80815dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80815e0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 80815e2:	4b05      	ldr	r3, [pc, #20]	; (80815f8 <HAL_MPU_Disable+0x2a>)
 80815e4:	2200      	movs	r2, #0
 80815e6:	605a      	str	r2, [r3, #4]
}
 80815e8:	bf00      	nop
 80815ea:	46bd      	mov	sp, r7
 80815ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80815f0:	4770      	bx	lr
 80815f2:	bf00      	nop
 80815f4:	e000ed00 	.word	0xe000ed00
 80815f8:	e000ed90 	.word	0xe000ed90

080815fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80815fc:	b480      	push	{r7}
 80815fe:	b083      	sub	sp, #12
 8081600:	af00      	add	r7, sp, #0
 8081602:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8081604:	4a0a      	ldr	r2, [pc, #40]	; (8081630 <HAL_MPU_Enable+0x34>)
 8081606:	687b      	ldr	r3, [r7, #4]
 8081608:	f043 0301 	orr.w	r3, r3, #1
 808160c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 808160e:	4b09      	ldr	r3, [pc, #36]	; (8081634 <HAL_MPU_Enable+0x38>)
 8081610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081612:	4a08      	ldr	r2, [pc, #32]	; (8081634 <HAL_MPU_Enable+0x38>)
 8081614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8081618:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 808161a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 808161e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8081622:	bf00      	nop
 8081624:	370c      	adds	r7, #12
 8081626:	46bd      	mov	sp, r7
 8081628:	f85d 7b04 	ldr.w	r7, [sp], #4
 808162c:	4770      	bx	lr
 808162e:	bf00      	nop
 8081630:	e000ed90 	.word	0xe000ed90
 8081634:	e000ed00 	.word	0xe000ed00

08081638 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8081638:	b480      	push	{r7}
 808163a:	b083      	sub	sp, #12
 808163c:	af00      	add	r7, sp, #0
 808163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8081640:	687b      	ldr	r3, [r7, #4]
 8081642:	785a      	ldrb	r2, [r3, #1]
 8081644:	4b1d      	ldr	r3, [pc, #116]	; (80816bc <HAL_MPU_ConfigRegion+0x84>)
 8081646:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8081648:	687b      	ldr	r3, [r7, #4]
 808164a:	781b      	ldrb	r3, [r3, #0]
 808164c:	2b00      	cmp	r3, #0
 808164e:	d029      	beq.n	80816a4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8081650:	4a1a      	ldr	r2, [pc, #104]	; (80816bc <HAL_MPU_ConfigRegion+0x84>)
 8081652:	687b      	ldr	r3, [r7, #4]
 8081654:	685b      	ldr	r3, [r3, #4]
 8081656:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8081658:	687b      	ldr	r3, [r7, #4]
 808165a:	7b1b      	ldrb	r3, [r3, #12]
 808165c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 808165e:	687b      	ldr	r3, [r7, #4]
 8081660:	7adb      	ldrb	r3, [r3, #11]
 8081662:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8081664:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8081666:	687b      	ldr	r3, [r7, #4]
 8081668:	7a9b      	ldrb	r3, [r3, #10]
 808166a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 808166c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 808166e:	687b      	ldr	r3, [r7, #4]
 8081670:	7b5b      	ldrb	r3, [r3, #13]
 8081672:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8081674:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8081676:	687b      	ldr	r3, [r7, #4]
 8081678:	7b9b      	ldrb	r3, [r3, #14]
 808167a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 808167c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 808167e:	687b      	ldr	r3, [r7, #4]
 8081680:	7bdb      	ldrb	r3, [r3, #15]
 8081682:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8081684:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8081686:	687b      	ldr	r3, [r7, #4]
 8081688:	7a5b      	ldrb	r3, [r3, #9]
 808168a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 808168c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 808168e:	687b      	ldr	r3, [r7, #4]
 8081690:	7a1b      	ldrb	r3, [r3, #8]
 8081692:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8081694:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8081696:	687a      	ldr	r2, [r7, #4]
 8081698:	7812      	ldrb	r2, [r2, #0]
 808169a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 808169c:	4a07      	ldr	r2, [pc, #28]	; (80816bc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 808169e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80816a0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 80816a2:	e005      	b.n	80816b0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 80816a4:	4b05      	ldr	r3, [pc, #20]	; (80816bc <HAL_MPU_ConfigRegion+0x84>)
 80816a6:	2200      	movs	r2, #0
 80816a8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 80816aa:	4b04      	ldr	r3, [pc, #16]	; (80816bc <HAL_MPU_ConfigRegion+0x84>)
 80816ac:	2200      	movs	r2, #0
 80816ae:	611a      	str	r2, [r3, #16]
}
 80816b0:	bf00      	nop
 80816b2:	370c      	adds	r7, #12
 80816b4:	46bd      	mov	sp, r7
 80816b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80816ba:	4770      	bx	lr
 80816bc:	e000ed90 	.word	0xe000ed90

080816c0 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 80816c0:	b580      	push	{r7, lr}
 80816c2:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 80816c4:	f7ff fd70 	bl	80811a8 <__NVIC_GetPriorityGrouping>
 80816c8:	4603      	mov	r3, r0
}
 80816ca:	4618      	mov	r0, r3
 80816cc:	bd80      	pop	{r7, pc}

080816ce <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80816ce:	b580      	push	{r7, lr}
 80816d0:	b084      	sub	sp, #16
 80816d2:	af00      	add	r7, sp, #0
 80816d4:	60b9      	str	r1, [r7, #8]
 80816d6:	607a      	str	r2, [r7, #4]
 80816d8:	603b      	str	r3, [r7, #0]
 80816da:	4603      	mov	r3, r0
 80816dc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 80816de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80816e2:	4618      	mov	r0, r3
 80816e4:	f7ff fe58 	bl	8081398 <__NVIC_GetPriority>
 80816e8:	683b      	ldr	r3, [r7, #0]
 80816ea:	687a      	ldr	r2, [r7, #4]
 80816ec:	68b9      	ldr	r1, [r7, #8]
 80816ee:	f7ff feae 	bl	808144e <NVIC_DecodePriority>
}
 80816f2:	bf00      	nop
 80816f4:	3710      	adds	r7, #16
 80816f6:	46bd      	mov	sp, r7
 80816f8:	bd80      	pop	{r7, pc}

080816fa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80816fa:	b580      	push	{r7, lr}
 80816fc:	b082      	sub	sp, #8
 80816fe:	af00      	add	r7, sp, #0
 8081700:	4603      	mov	r3, r0
 8081702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8081704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8081708:	4618      	mov	r0, r3
 808170a:	f7ff fdbd 	bl	8081288 <__NVIC_SetPendingIRQ>
}
 808170e:	bf00      	nop
 8081710:	3708      	adds	r7, #8
 8081712:	46bd      	mov	sp, r7
 8081714:	bd80      	pop	{r7, pc}

08081716 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8081716:	b580      	push	{r7, lr}
 8081718:	b082      	sub	sp, #8
 808171a:	af00      	add	r7, sp, #0
 808171c:	4603      	mov	r3, r0
 808171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8081720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8081724:	4618      	mov	r0, r3
 8081726:	f7ff fd8d 	bl	8081244 <__NVIC_GetPendingIRQ>
 808172a:	4603      	mov	r3, r0
}
 808172c:	4618      	mov	r0, r3
 808172e:	3708      	adds	r7, #8
 8081730:	46bd      	mov	sp, r7
 8081732:	bd80      	pop	{r7, pc}

08081734 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8081734:	b580      	push	{r7, lr}
 8081736:	b082      	sub	sp, #8
 8081738:	af00      	add	r7, sp, #0
 808173a:	4603      	mov	r3, r0
 808173c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 808173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8081742:	4618      	mov	r0, r3
 8081744:	f7ff fdbe 	bl	80812c4 <__NVIC_ClearPendingIRQ>
}
 8081748:	bf00      	nop
 808174a:	3708      	adds	r7, #8
 808174c:	46bd      	mov	sp, r7
 808174e:	bd80      	pop	{r7, pc}

08081750 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8081750:	b580      	push	{r7, lr}
 8081752:	b082      	sub	sp, #8
 8081754:	af00      	add	r7, sp, #0
 8081756:	4603      	mov	r3, r0
 8081758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 808175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 808175e:	4618      	mov	r0, r3
 8081760:	f7ff fdce 	bl	8081300 <__NVIC_GetActive>
 8081764:	4603      	mov	r3, r0
}
 8081766:	4618      	mov	r0, r3
 8081768:	3708      	adds	r7, #8
 808176a:	46bd      	mov	sp, r7
 808176c:	bd80      	pop	{r7, pc}

0808176e <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 808176e:	b480      	push	{r7}
 8081770:	b083      	sub	sp, #12
 8081772:	af00      	add	r7, sp, #0
 8081774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8081776:	687b      	ldr	r3, [r7, #4]
 8081778:	2b04      	cmp	r3, #4
 808177a:	d106      	bne.n	808178a <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 808177c:	4b09      	ldr	r3, [pc, #36]	; (80817a4 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 808177e:	681b      	ldr	r3, [r3, #0]
 8081780:	4a08      	ldr	r2, [pc, #32]	; (80817a4 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8081782:	f043 0304 	orr.w	r3, r3, #4
 8081786:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8081788:	e005      	b.n	8081796 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 808178a:	4b06      	ldr	r3, [pc, #24]	; (80817a4 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 808178c:	681b      	ldr	r3, [r3, #0]
 808178e:	4a05      	ldr	r2, [pc, #20]	; (80817a4 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8081790:	f023 0304 	bic.w	r3, r3, #4
 8081794:	6013      	str	r3, [r2, #0]
}
 8081796:	bf00      	nop
 8081798:	370c      	adds	r7, #12
 808179a:	46bd      	mov	sp, r7
 808179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80817a0:	4770      	bx	lr
 80817a2:	bf00      	nop
 80817a4:	e000e010 	.word	0xe000e010

080817a8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80817a8:	b580      	push	{r7, lr}
 80817aa:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80817ac:	f000 f802 	bl	80817b4 <HAL_SYSTICK_Callback>
}
 80817b0:	bf00      	nop
 80817b2:	bd80      	pop	{r7, pc}

080817b4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80817b4:	b480      	push	{r7}
 80817b6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80817b8:	bf00      	nop
 80817ba:	46bd      	mov	sp, r7
 80817bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80817c0:	4770      	bx	lr
 80817c2:	bf00      	nop

080817c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80817c4:	b580      	push	{r7, lr}
 80817c6:	b086      	sub	sp, #24
 80817c8:	af00      	add	r7, sp, #0
 80817ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80817cc:	2300      	movs	r3, #0
 80817ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80817d0:	f7ff fb68 	bl	8080ea4 <HAL_GetTick>
 80817d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80817d6:	687b      	ldr	r3, [r7, #4]
 80817d8:	2b00      	cmp	r3, #0
 80817da:	d101      	bne.n	80817e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80817dc:	2301      	movs	r3, #1
 80817de:	e099      	b.n	8081914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80817e0:	687b      	ldr	r3, [r7, #4]
 80817e2:	2200      	movs	r2, #0
 80817e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80817e8:	687b      	ldr	r3, [r7, #4]
 80817ea:	2202      	movs	r2, #2
 80817ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80817f0:	687b      	ldr	r3, [r7, #4]
 80817f2:	681b      	ldr	r3, [r3, #0]
 80817f4:	681a      	ldr	r2, [r3, #0]
 80817f6:	687b      	ldr	r3, [r7, #4]
 80817f8:	681b      	ldr	r3, [r3, #0]
 80817fa:	f022 0201 	bic.w	r2, r2, #1
 80817fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8081800:	e00f      	b.n	8081822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8081802:	f7ff fb4f 	bl	8080ea4 <HAL_GetTick>
 8081806:	4602      	mov	r2, r0
 8081808:	693b      	ldr	r3, [r7, #16]
 808180a:	1ad3      	subs	r3, r2, r3
 808180c:	2b05      	cmp	r3, #5
 808180e:	d908      	bls.n	8081822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8081810:	687b      	ldr	r3, [r7, #4]
 8081812:	2220      	movs	r2, #32
 8081814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8081816:	687b      	ldr	r3, [r7, #4]
 8081818:	2203      	movs	r2, #3
 808181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 808181e:	2303      	movs	r3, #3
 8081820:	e078      	b.n	8081914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8081822:	687b      	ldr	r3, [r7, #4]
 8081824:	681b      	ldr	r3, [r3, #0]
 8081826:	681b      	ldr	r3, [r3, #0]
 8081828:	f003 0301 	and.w	r3, r3, #1
 808182c:	2b00      	cmp	r3, #0
 808182e:	d1e8      	bne.n	8081802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8081830:	687b      	ldr	r3, [r7, #4]
 8081832:	681b      	ldr	r3, [r3, #0]
 8081834:	681b      	ldr	r3, [r3, #0]
 8081836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8081838:	697a      	ldr	r2, [r7, #20]
 808183a:	4b38      	ldr	r3, [pc, #224]	; (808191c <HAL_DMA_Init+0x158>)
 808183c:	4013      	ands	r3, r2
 808183e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8081840:	687b      	ldr	r3, [r7, #4]
 8081842:	685a      	ldr	r2, [r3, #4]
 8081844:	687b      	ldr	r3, [r7, #4]
 8081846:	689b      	ldr	r3, [r3, #8]
 8081848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 808184a:	687b      	ldr	r3, [r7, #4]
 808184c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 808184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8081850:	687b      	ldr	r3, [r7, #4]
 8081852:	691b      	ldr	r3, [r3, #16]
 8081854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8081856:	687b      	ldr	r3, [r7, #4]
 8081858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 808185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 808185c:	687b      	ldr	r3, [r7, #4]
 808185e:	699b      	ldr	r3, [r3, #24]
 8081860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8081862:	687b      	ldr	r3, [r7, #4]
 8081864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8081866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8081868:	687b      	ldr	r3, [r7, #4]
 808186a:	6a1b      	ldr	r3, [r3, #32]
 808186c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 808186e:	697a      	ldr	r2, [r7, #20]
 8081870:	4313      	orrs	r3, r2
 8081872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8081874:	687b      	ldr	r3, [r7, #4]
 8081876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081878:	2b04      	cmp	r3, #4
 808187a:	d107      	bne.n	808188c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 808187c:	687b      	ldr	r3, [r7, #4]
 808187e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8081880:	687b      	ldr	r3, [r7, #4]
 8081882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081884:	4313      	orrs	r3, r2
 8081886:	697a      	ldr	r2, [r7, #20]
 8081888:	4313      	orrs	r3, r2
 808188a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 808188c:	687b      	ldr	r3, [r7, #4]
 808188e:	681b      	ldr	r3, [r3, #0]
 8081890:	697a      	ldr	r2, [r7, #20]
 8081892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8081894:	687b      	ldr	r3, [r7, #4]
 8081896:	681b      	ldr	r3, [r3, #0]
 8081898:	695b      	ldr	r3, [r3, #20]
 808189a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 808189c:	697b      	ldr	r3, [r7, #20]
 808189e:	f023 0307 	bic.w	r3, r3, #7
 80818a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80818a4:	687b      	ldr	r3, [r7, #4]
 80818a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80818a8:	697a      	ldr	r2, [r7, #20]
 80818aa:	4313      	orrs	r3, r2
 80818ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80818ae:	687b      	ldr	r3, [r7, #4]
 80818b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80818b2:	2b04      	cmp	r3, #4
 80818b4:	d117      	bne.n	80818e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80818b6:	687b      	ldr	r3, [r7, #4]
 80818b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80818ba:	697a      	ldr	r2, [r7, #20]
 80818bc:	4313      	orrs	r3, r2
 80818be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80818c0:	687b      	ldr	r3, [r7, #4]
 80818c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80818c4:	2b00      	cmp	r3, #0
 80818c6:	d00e      	beq.n	80818e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80818c8:	6878      	ldr	r0, [r7, #4]
 80818ca:	f000 fd57 	bl	808237c <DMA_CheckFifoParam>
 80818ce:	4603      	mov	r3, r0
 80818d0:	2b00      	cmp	r3, #0
 80818d2:	d008      	beq.n	80818e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80818d4:	687b      	ldr	r3, [r7, #4]
 80818d6:	2240      	movs	r2, #64	; 0x40
 80818d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80818da:	687b      	ldr	r3, [r7, #4]
 80818dc:	2201      	movs	r2, #1
 80818de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80818e2:	2301      	movs	r3, #1
 80818e4:	e016      	b.n	8081914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80818e6:	687b      	ldr	r3, [r7, #4]
 80818e8:	681b      	ldr	r3, [r3, #0]
 80818ea:	697a      	ldr	r2, [r7, #20]
 80818ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80818ee:	6878      	ldr	r0, [r7, #4]
 80818f0:	f000 fd0e 	bl	8082310 <DMA_CalcBaseAndBitshift>
 80818f4:	4603      	mov	r3, r0
 80818f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80818f8:	687b      	ldr	r3, [r7, #4]
 80818fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80818fc:	223f      	movs	r2, #63	; 0x3f
 80818fe:	409a      	lsls	r2, r3
 8081900:	68fb      	ldr	r3, [r7, #12]
 8081902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8081904:	687b      	ldr	r3, [r7, #4]
 8081906:	2200      	movs	r2, #0
 8081908:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 808190a:	687b      	ldr	r3, [r7, #4]
 808190c:	2201      	movs	r2, #1
 808190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8081912:	2300      	movs	r3, #0
}
 8081914:	4618      	mov	r0, r3
 8081916:	3718      	adds	r7, #24
 8081918:	46bd      	mov	sp, r7
 808191a:	bd80      	pop	{r7, pc}
 808191c:	f010803f 	.word	0xf010803f

08081920 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8081920:	b580      	push	{r7, lr}
 8081922:	b084      	sub	sp, #16
 8081924:	af00      	add	r7, sp, #0
 8081926:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8081928:	687b      	ldr	r3, [r7, #4]
 808192a:	2b00      	cmp	r3, #0
 808192c:	d101      	bne.n	8081932 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 808192e:	2301      	movs	r3, #1
 8081930:	e050      	b.n	80819d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8081932:	687b      	ldr	r3, [r7, #4]
 8081934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8081938:	b2db      	uxtb	r3, r3
 808193a:	2b02      	cmp	r3, #2
 808193c:	d101      	bne.n	8081942 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 808193e:	2302      	movs	r3, #2
 8081940:	e048      	b.n	80819d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8081942:	687b      	ldr	r3, [r7, #4]
 8081944:	681b      	ldr	r3, [r3, #0]
 8081946:	681a      	ldr	r2, [r3, #0]
 8081948:	687b      	ldr	r3, [r7, #4]
 808194a:	681b      	ldr	r3, [r3, #0]
 808194c:	f022 0201 	bic.w	r2, r2, #1
 8081950:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8081952:	687b      	ldr	r3, [r7, #4]
 8081954:	681b      	ldr	r3, [r3, #0]
 8081956:	2200      	movs	r2, #0
 8081958:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 808195a:	687b      	ldr	r3, [r7, #4]
 808195c:	681b      	ldr	r3, [r3, #0]
 808195e:	2200      	movs	r2, #0
 8081960:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8081962:	687b      	ldr	r3, [r7, #4]
 8081964:	681b      	ldr	r3, [r3, #0]
 8081966:	2200      	movs	r2, #0
 8081968:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 808196a:	687b      	ldr	r3, [r7, #4]
 808196c:	681b      	ldr	r3, [r3, #0]
 808196e:	2200      	movs	r2, #0
 8081970:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8081972:	687b      	ldr	r3, [r7, #4]
 8081974:	681b      	ldr	r3, [r3, #0]
 8081976:	2200      	movs	r2, #0
 8081978:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 808197a:	687b      	ldr	r3, [r7, #4]
 808197c:	681b      	ldr	r3, [r3, #0]
 808197e:	2221      	movs	r2, #33	; 0x21
 8081980:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8081982:	6878      	ldr	r0, [r7, #4]
 8081984:	f000 fcc4 	bl	8082310 <DMA_CalcBaseAndBitshift>
 8081988:	4603      	mov	r3, r0
 808198a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 808198c:	687b      	ldr	r3, [r7, #4]
 808198e:	2200      	movs	r2, #0
 8081990:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8081992:	687b      	ldr	r3, [r7, #4]
 8081994:	2200      	movs	r2, #0
 8081996:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8081998:	687b      	ldr	r3, [r7, #4]
 808199a:	2200      	movs	r2, #0
 808199c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 808199e:	687b      	ldr	r3, [r7, #4]
 80819a0:	2200      	movs	r2, #0
 80819a2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80819a4:	687b      	ldr	r3, [r7, #4]
 80819a6:	2200      	movs	r2, #0
 80819a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80819aa:	687b      	ldr	r3, [r7, #4]
 80819ac:	2200      	movs	r2, #0
 80819ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80819b0:	687b      	ldr	r3, [r7, #4]
 80819b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80819b4:	223f      	movs	r2, #63	; 0x3f
 80819b6:	409a      	lsls	r2, r3
 80819b8:	68fb      	ldr	r3, [r7, #12]
 80819ba:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80819bc:	687b      	ldr	r3, [r7, #4]
 80819be:	2200      	movs	r2, #0
 80819c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80819c2:	687b      	ldr	r3, [r7, #4]
 80819c4:	2200      	movs	r2, #0
 80819c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80819ca:	687b      	ldr	r3, [r7, #4]
 80819cc:	2200      	movs	r2, #0
 80819ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80819d2:	2300      	movs	r3, #0
}
 80819d4:	4618      	mov	r0, r3
 80819d6:	3710      	adds	r7, #16
 80819d8:	46bd      	mov	sp, r7
 80819da:	bd80      	pop	{r7, pc}

080819dc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80819dc:	b580      	push	{r7, lr}
 80819de:	b086      	sub	sp, #24
 80819e0:	af00      	add	r7, sp, #0
 80819e2:	60f8      	str	r0, [r7, #12]
 80819e4:	60b9      	str	r1, [r7, #8]
 80819e6:	607a      	str	r2, [r7, #4]
 80819e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80819ea:	2300      	movs	r3, #0
 80819ec:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80819ee:	68fb      	ldr	r3, [r7, #12]
 80819f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80819f4:	2b01      	cmp	r3, #1
 80819f6:	d101      	bne.n	80819fc <HAL_DMA_Start+0x20>
 80819f8:	2302      	movs	r3, #2
 80819fa:	e026      	b.n	8081a4a <HAL_DMA_Start+0x6e>
 80819fc:	68fb      	ldr	r3, [r7, #12]
 80819fe:	2201      	movs	r2, #1
 8081a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8081a04:	68fb      	ldr	r3, [r7, #12]
 8081a06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8081a0a:	b2db      	uxtb	r3, r3
 8081a0c:	2b01      	cmp	r3, #1
 8081a0e:	d115      	bne.n	8081a3c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8081a10:	68fb      	ldr	r3, [r7, #12]
 8081a12:	2202      	movs	r2, #2
 8081a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8081a18:	68fb      	ldr	r3, [r7, #12]
 8081a1a:	2200      	movs	r2, #0
 8081a1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8081a1e:	683b      	ldr	r3, [r7, #0]
 8081a20:	687a      	ldr	r2, [r7, #4]
 8081a22:	68b9      	ldr	r1, [r7, #8]
 8081a24:	68f8      	ldr	r0, [r7, #12]
 8081a26:	f000 fc45 	bl	80822b4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8081a2a:	68fb      	ldr	r3, [r7, #12]
 8081a2c:	681b      	ldr	r3, [r3, #0]
 8081a2e:	681a      	ldr	r2, [r3, #0]
 8081a30:	68fb      	ldr	r3, [r7, #12]
 8081a32:	681b      	ldr	r3, [r3, #0]
 8081a34:	f042 0201 	orr.w	r2, r2, #1
 8081a38:	601a      	str	r2, [r3, #0]
 8081a3a:	e005      	b.n	8081a48 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8081a3c:	68fb      	ldr	r3, [r7, #12]
 8081a3e:	2200      	movs	r2, #0
 8081a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8081a44:	2302      	movs	r3, #2
 8081a46:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8081a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8081a4a:	4618      	mov	r0, r3
 8081a4c:	3718      	adds	r7, #24
 8081a4e:	46bd      	mov	sp, r7
 8081a50:	bd80      	pop	{r7, pc}

08081a52 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8081a52:	b580      	push	{r7, lr}
 8081a54:	b086      	sub	sp, #24
 8081a56:	af00      	add	r7, sp, #0
 8081a58:	60f8      	str	r0, [r7, #12]
 8081a5a:	60b9      	str	r1, [r7, #8]
 8081a5c:	607a      	str	r2, [r7, #4]
 8081a5e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8081a60:	2300      	movs	r3, #0
 8081a62:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8081a64:	68fb      	ldr	r3, [r7, #12]
 8081a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081a68:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8081a6a:	68fb      	ldr	r3, [r7, #12]
 8081a6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8081a70:	2b01      	cmp	r3, #1
 8081a72:	d101      	bne.n	8081a78 <HAL_DMA_Start_IT+0x26>
 8081a74:	2302      	movs	r3, #2
 8081a76:	e048      	b.n	8081b0a <HAL_DMA_Start_IT+0xb8>
 8081a78:	68fb      	ldr	r3, [r7, #12]
 8081a7a:	2201      	movs	r2, #1
 8081a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8081a80:	68fb      	ldr	r3, [r7, #12]
 8081a82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8081a86:	b2db      	uxtb	r3, r3
 8081a88:	2b01      	cmp	r3, #1
 8081a8a:	d137      	bne.n	8081afc <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8081a8c:	68fb      	ldr	r3, [r7, #12]
 8081a8e:	2202      	movs	r2, #2
 8081a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8081a94:	68fb      	ldr	r3, [r7, #12]
 8081a96:	2200      	movs	r2, #0
 8081a98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8081a9a:	683b      	ldr	r3, [r7, #0]
 8081a9c:	687a      	ldr	r2, [r7, #4]
 8081a9e:	68b9      	ldr	r1, [r7, #8]
 8081aa0:	68f8      	ldr	r0, [r7, #12]
 8081aa2:	f000 fc07 	bl	80822b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8081aa6:	68fb      	ldr	r3, [r7, #12]
 8081aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081aaa:	223f      	movs	r2, #63	; 0x3f
 8081aac:	409a      	lsls	r2, r3
 8081aae:	693b      	ldr	r3, [r7, #16]
 8081ab0:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8081ab2:	68fb      	ldr	r3, [r7, #12]
 8081ab4:	681b      	ldr	r3, [r3, #0]
 8081ab6:	681a      	ldr	r2, [r3, #0]
 8081ab8:	68fb      	ldr	r3, [r7, #12]
 8081aba:	681b      	ldr	r3, [r3, #0]
 8081abc:	f042 0216 	orr.w	r2, r2, #22
 8081ac0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8081ac2:	68fb      	ldr	r3, [r7, #12]
 8081ac4:	681b      	ldr	r3, [r3, #0]
 8081ac6:	695a      	ldr	r2, [r3, #20]
 8081ac8:	68fb      	ldr	r3, [r7, #12]
 8081aca:	681b      	ldr	r3, [r3, #0]
 8081acc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8081ad0:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8081ad2:	68fb      	ldr	r3, [r7, #12]
 8081ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081ad6:	2b00      	cmp	r3, #0
 8081ad8:	d007      	beq.n	8081aea <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8081ada:	68fb      	ldr	r3, [r7, #12]
 8081adc:	681b      	ldr	r3, [r3, #0]
 8081ade:	681a      	ldr	r2, [r3, #0]
 8081ae0:	68fb      	ldr	r3, [r7, #12]
 8081ae2:	681b      	ldr	r3, [r3, #0]
 8081ae4:	f042 0208 	orr.w	r2, r2, #8
 8081ae8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8081aea:	68fb      	ldr	r3, [r7, #12]
 8081aec:	681b      	ldr	r3, [r3, #0]
 8081aee:	681a      	ldr	r2, [r3, #0]
 8081af0:	68fb      	ldr	r3, [r7, #12]
 8081af2:	681b      	ldr	r3, [r3, #0]
 8081af4:	f042 0201 	orr.w	r2, r2, #1
 8081af8:	601a      	str	r2, [r3, #0]
 8081afa:	e005      	b.n	8081b08 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8081afc:	68fb      	ldr	r3, [r7, #12]
 8081afe:	2200      	movs	r2, #0
 8081b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8081b04:	2302      	movs	r3, #2
 8081b06:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8081b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8081b0a:	4618      	mov	r0, r3
 8081b0c:	3718      	adds	r7, #24
 8081b0e:	46bd      	mov	sp, r7
 8081b10:	bd80      	pop	{r7, pc}

08081b12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8081b12:	b580      	push	{r7, lr}
 8081b14:	b084      	sub	sp, #16
 8081b16:	af00      	add	r7, sp, #0
 8081b18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8081b1a:	687b      	ldr	r3, [r7, #4]
 8081b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081b1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8081b20:	f7ff f9c0 	bl	8080ea4 <HAL_GetTick>
 8081b24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8081b26:	687b      	ldr	r3, [r7, #4]
 8081b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8081b2c:	b2db      	uxtb	r3, r3
 8081b2e:	2b02      	cmp	r3, #2
 8081b30:	d008      	beq.n	8081b44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8081b32:	687b      	ldr	r3, [r7, #4]
 8081b34:	2280      	movs	r2, #128	; 0x80
 8081b36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8081b38:	687b      	ldr	r3, [r7, #4]
 8081b3a:	2200      	movs	r2, #0
 8081b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8081b40:	2301      	movs	r3, #1
 8081b42:	e052      	b.n	8081bea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8081b44:	687b      	ldr	r3, [r7, #4]
 8081b46:	681b      	ldr	r3, [r3, #0]
 8081b48:	681a      	ldr	r2, [r3, #0]
 8081b4a:	687b      	ldr	r3, [r7, #4]
 8081b4c:	681b      	ldr	r3, [r3, #0]
 8081b4e:	f022 0216 	bic.w	r2, r2, #22
 8081b52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8081b54:	687b      	ldr	r3, [r7, #4]
 8081b56:	681b      	ldr	r3, [r3, #0]
 8081b58:	695a      	ldr	r2, [r3, #20]
 8081b5a:	687b      	ldr	r3, [r7, #4]
 8081b5c:	681b      	ldr	r3, [r3, #0]
 8081b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8081b62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8081b64:	687b      	ldr	r3, [r7, #4]
 8081b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081b68:	2b00      	cmp	r3, #0
 8081b6a:	d103      	bne.n	8081b74 <HAL_DMA_Abort+0x62>
 8081b6c:	687b      	ldr	r3, [r7, #4]
 8081b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081b70:	2b00      	cmp	r3, #0
 8081b72:	d007      	beq.n	8081b84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8081b74:	687b      	ldr	r3, [r7, #4]
 8081b76:	681b      	ldr	r3, [r3, #0]
 8081b78:	681a      	ldr	r2, [r3, #0]
 8081b7a:	687b      	ldr	r3, [r7, #4]
 8081b7c:	681b      	ldr	r3, [r3, #0]
 8081b7e:	f022 0208 	bic.w	r2, r2, #8
 8081b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8081b84:	687b      	ldr	r3, [r7, #4]
 8081b86:	681b      	ldr	r3, [r3, #0]
 8081b88:	681a      	ldr	r2, [r3, #0]
 8081b8a:	687b      	ldr	r3, [r7, #4]
 8081b8c:	681b      	ldr	r3, [r3, #0]
 8081b8e:	f022 0201 	bic.w	r2, r2, #1
 8081b92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8081b94:	e013      	b.n	8081bbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8081b96:	f7ff f985 	bl	8080ea4 <HAL_GetTick>
 8081b9a:	4602      	mov	r2, r0
 8081b9c:	68bb      	ldr	r3, [r7, #8]
 8081b9e:	1ad3      	subs	r3, r2, r3
 8081ba0:	2b05      	cmp	r3, #5
 8081ba2:	d90c      	bls.n	8081bbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8081ba4:	687b      	ldr	r3, [r7, #4]
 8081ba6:	2220      	movs	r2, #32
 8081ba8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8081baa:	687b      	ldr	r3, [r7, #4]
 8081bac:	2200      	movs	r2, #0
 8081bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8081bb2:	687b      	ldr	r3, [r7, #4]
 8081bb4:	2203      	movs	r2, #3
 8081bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8081bba:	2303      	movs	r3, #3
 8081bbc:	e015      	b.n	8081bea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8081bbe:	687b      	ldr	r3, [r7, #4]
 8081bc0:	681b      	ldr	r3, [r3, #0]
 8081bc2:	681b      	ldr	r3, [r3, #0]
 8081bc4:	f003 0301 	and.w	r3, r3, #1
 8081bc8:	2b00      	cmp	r3, #0
 8081bca:	d1e4      	bne.n	8081b96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8081bcc:	687b      	ldr	r3, [r7, #4]
 8081bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081bd0:	223f      	movs	r2, #63	; 0x3f
 8081bd2:	409a      	lsls	r2, r3
 8081bd4:	68fb      	ldr	r3, [r7, #12]
 8081bd6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8081bd8:	687b      	ldr	r3, [r7, #4]
 8081bda:	2200      	movs	r2, #0
 8081bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8081be0:	687b      	ldr	r3, [r7, #4]
 8081be2:	2201      	movs	r2, #1
 8081be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8081be8:	2300      	movs	r3, #0
}
 8081bea:	4618      	mov	r0, r3
 8081bec:	3710      	adds	r7, #16
 8081bee:	46bd      	mov	sp, r7
 8081bf0:	bd80      	pop	{r7, pc}

08081bf2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8081bf2:	b480      	push	{r7}
 8081bf4:	b083      	sub	sp, #12
 8081bf6:	af00      	add	r7, sp, #0
 8081bf8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8081bfa:	687b      	ldr	r3, [r7, #4]
 8081bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8081c00:	b2db      	uxtb	r3, r3
 8081c02:	2b02      	cmp	r3, #2
 8081c04:	d004      	beq.n	8081c10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8081c06:	687b      	ldr	r3, [r7, #4]
 8081c08:	2280      	movs	r2, #128	; 0x80
 8081c0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8081c0c:	2301      	movs	r3, #1
 8081c0e:	e00c      	b.n	8081c2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8081c10:	687b      	ldr	r3, [r7, #4]
 8081c12:	2205      	movs	r2, #5
 8081c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8081c18:	687b      	ldr	r3, [r7, #4]
 8081c1a:	681b      	ldr	r3, [r3, #0]
 8081c1c:	681a      	ldr	r2, [r3, #0]
 8081c1e:	687b      	ldr	r3, [r7, #4]
 8081c20:	681b      	ldr	r3, [r3, #0]
 8081c22:	f022 0201 	bic.w	r2, r2, #1
 8081c26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8081c28:	2300      	movs	r3, #0
}
 8081c2a:	4618      	mov	r0, r3
 8081c2c:	370c      	adds	r7, #12
 8081c2e:	46bd      	mov	sp, r7
 8081c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081c34:	4770      	bx	lr

08081c36 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8081c36:	b580      	push	{r7, lr}
 8081c38:	b08a      	sub	sp, #40	; 0x28
 8081c3a:	af00      	add	r7, sp, #0
 8081c3c:	60f8      	str	r0, [r7, #12]
 8081c3e:	460b      	mov	r3, r1
 8081c40:	607a      	str	r2, [r7, #4]
 8081c42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8081c44:	2300      	movs	r3, #0
 8081c46:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8081c48:	f7ff f92c 	bl	8080ea4 <HAL_GetTick>
 8081c4c:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8081c4e:	68fb      	ldr	r3, [r7, #12]
 8081c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8081c54:	b2db      	uxtb	r3, r3
 8081c56:	2b02      	cmp	r3, #2
 8081c58:	d008      	beq.n	8081c6c <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8081c5a:	68fb      	ldr	r3, [r7, #12]
 8081c5c:	2280      	movs	r2, #128	; 0x80
 8081c5e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8081c60:	68fb      	ldr	r3, [r7, #12]
 8081c62:	2200      	movs	r2, #0
 8081c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8081c68:	2301      	movs	r3, #1
 8081c6a:	e0bf      	b.n	8081dec <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8081c6c:	68fb      	ldr	r3, [r7, #12]
 8081c6e:	681b      	ldr	r3, [r3, #0]
 8081c70:	681b      	ldr	r3, [r3, #0]
 8081c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8081c76:	2b00      	cmp	r3, #0
 8081c78:	d005      	beq.n	8081c86 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8081c7a:	68fb      	ldr	r3, [r7, #12]
 8081c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8081c80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8081c82:	2301      	movs	r3, #1
 8081c84:	e0b2      	b.n	8081dec <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8081c86:	7afb      	ldrb	r3, [r7, #11]
 8081c88:	2b00      	cmp	r3, #0
 8081c8a:	d106      	bne.n	8081c9a <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8081c8c:	68fb      	ldr	r3, [r7, #12]
 8081c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081c90:	2220      	movs	r2, #32
 8081c92:	fa02 f303 	lsl.w	r3, r2, r3
 8081c96:	627b      	str	r3, [r7, #36]	; 0x24
 8081c98:	e005      	b.n	8081ca6 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8081c9a:	68fb      	ldr	r3, [r7, #12]
 8081c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081c9e:	2210      	movs	r2, #16
 8081ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8081ca4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8081ca6:	68fb      	ldr	r3, [r7, #12]
 8081ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081caa:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8081cac:	697b      	ldr	r3, [r7, #20]
 8081cae:	681b      	ldr	r3, [r3, #0]
 8081cb0:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8081cb2:	e05a      	b.n	8081d6a <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8081cb4:	687b      	ldr	r3, [r7, #4]
 8081cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8081cba:	d017      	beq.n	8081cec <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8081cbc:	687b      	ldr	r3, [r7, #4]
 8081cbe:	2b00      	cmp	r3, #0
 8081cc0:	d007      	beq.n	8081cd2 <HAL_DMA_PollForTransfer+0x9c>
 8081cc2:	f7ff f8ef 	bl	8080ea4 <HAL_GetTick>
 8081cc6:	4602      	mov	r2, r0
 8081cc8:	69bb      	ldr	r3, [r7, #24]
 8081cca:	1ad3      	subs	r3, r2, r3
 8081ccc:	687a      	ldr	r2, [r7, #4]
 8081cce:	429a      	cmp	r2, r3
 8081cd0:	d20c      	bcs.n	8081cec <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8081cd2:	68fb      	ldr	r3, [r7, #12]
 8081cd4:	2220      	movs	r2, #32
 8081cd6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8081cd8:	68fb      	ldr	r3, [r7, #12]
 8081cda:	2200      	movs	r2, #0
 8081cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8081ce0:	68fb      	ldr	r3, [r7, #12]
 8081ce2:	2201      	movs	r2, #1
 8081ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8081ce8:	2303      	movs	r3, #3
 8081cea:	e07f      	b.n	8081dec <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8081cec:	697b      	ldr	r3, [r7, #20]
 8081cee:	681b      	ldr	r3, [r3, #0]
 8081cf0:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8081cf2:	68fb      	ldr	r3, [r7, #12]
 8081cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081cf6:	2208      	movs	r2, #8
 8081cf8:	409a      	lsls	r2, r3
 8081cfa:	6a3b      	ldr	r3, [r7, #32]
 8081cfc:	4013      	ands	r3, r2
 8081cfe:	2b00      	cmp	r3, #0
 8081d00:	d00b      	beq.n	8081d1a <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8081d02:	68fb      	ldr	r3, [r7, #12]
 8081d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d06:	f043 0201 	orr.w	r2, r3, #1
 8081d0a:	68fb      	ldr	r3, [r7, #12]
 8081d0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8081d0e:	68fb      	ldr	r3, [r7, #12]
 8081d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081d12:	2208      	movs	r2, #8
 8081d14:	409a      	lsls	r2, r3
 8081d16:	697b      	ldr	r3, [r7, #20]
 8081d18:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8081d1a:	68fb      	ldr	r3, [r7, #12]
 8081d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081d1e:	2201      	movs	r2, #1
 8081d20:	409a      	lsls	r2, r3
 8081d22:	6a3b      	ldr	r3, [r7, #32]
 8081d24:	4013      	ands	r3, r2
 8081d26:	2b00      	cmp	r3, #0
 8081d28:	d00b      	beq.n	8081d42 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8081d2a:	68fb      	ldr	r3, [r7, #12]
 8081d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d2e:	f043 0202 	orr.w	r2, r3, #2
 8081d32:	68fb      	ldr	r3, [r7, #12]
 8081d34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8081d36:	68fb      	ldr	r3, [r7, #12]
 8081d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081d3a:	2201      	movs	r2, #1
 8081d3c:	409a      	lsls	r2, r3
 8081d3e:	697b      	ldr	r3, [r7, #20]
 8081d40:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8081d42:	68fb      	ldr	r3, [r7, #12]
 8081d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081d46:	2204      	movs	r2, #4
 8081d48:	409a      	lsls	r2, r3
 8081d4a:	6a3b      	ldr	r3, [r7, #32]
 8081d4c:	4013      	ands	r3, r2
 8081d4e:	2b00      	cmp	r3, #0
 8081d50:	d00b      	beq.n	8081d6a <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8081d52:	68fb      	ldr	r3, [r7, #12]
 8081d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d56:	f043 0204 	orr.w	r2, r3, #4
 8081d5a:	68fb      	ldr	r3, [r7, #12]
 8081d5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8081d5e:	68fb      	ldr	r3, [r7, #12]
 8081d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081d62:	2204      	movs	r2, #4
 8081d64:	409a      	lsls	r2, r3
 8081d66:	697b      	ldr	r3, [r7, #20]
 8081d68:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8081d6a:	6a3a      	ldr	r2, [r7, #32]
 8081d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8081d6e:	4013      	ands	r3, r2
 8081d70:	2b00      	cmp	r3, #0
 8081d72:	d105      	bne.n	8081d80 <HAL_DMA_PollForTransfer+0x14a>
 8081d74:	68fb      	ldr	r3, [r7, #12]
 8081d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d78:	f003 0301 	and.w	r3, r3, #1
 8081d7c:	2b00      	cmp	r3, #0
 8081d7e:	d099      	beq.n	8081cb4 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8081d80:	68fb      	ldr	r3, [r7, #12]
 8081d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d84:	2b00      	cmp	r3, #0
 8081d86:	d018      	beq.n	8081dba <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8081d88:	68fb      	ldr	r3, [r7, #12]
 8081d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d8c:	f003 0301 	and.w	r3, r3, #1
 8081d90:	2b00      	cmp	r3, #0
 8081d92:	d012      	beq.n	8081dba <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8081d94:	68f8      	ldr	r0, [r7, #12]
 8081d96:	f7ff febc 	bl	8081b12 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8081d9a:	68fb      	ldr	r3, [r7, #12]
 8081d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081d9e:	2230      	movs	r2, #48	; 0x30
 8081da0:	409a      	lsls	r2, r3
 8081da2:	697b      	ldr	r3, [r7, #20]
 8081da4:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8081da6:	68fb      	ldr	r3, [r7, #12]
 8081da8:	2200      	movs	r2, #0
 8081daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8081dae:	68fb      	ldr	r3, [r7, #12]
 8081db0:	2201      	movs	r2, #1
 8081db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
 8081db6:	2301      	movs	r3, #1
 8081db8:	e018      	b.n	8081dec <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8081dba:	7afb      	ldrb	r3, [r7, #11]
 8081dbc:	2b00      	cmp	r3, #0
 8081dbe:	d10e      	bne.n	8081dde <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8081dc0:	68fb      	ldr	r3, [r7, #12]
 8081dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081dc4:	2230      	movs	r2, #48	; 0x30
 8081dc6:	409a      	lsls	r2, r3
 8081dc8:	697b      	ldr	r3, [r7, #20]
 8081dca:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8081dcc:	68fb      	ldr	r3, [r7, #12]
 8081dce:	2200      	movs	r2, #0
 8081dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
 8081dd4:	68fb      	ldr	r3, [r7, #12]
 8081dd6:	2201      	movs	r2, #1
 8081dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8081ddc:	e005      	b.n	8081dea <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8081dde:	68fb      	ldr	r3, [r7, #12]
 8081de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081de2:	2210      	movs	r2, #16
 8081de4:	409a      	lsls	r2, r3
 8081de6:	697b      	ldr	r3, [r7, #20]
 8081de8:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8081dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8081dec:	4618      	mov	r0, r3
 8081dee:	3728      	adds	r7, #40	; 0x28
 8081df0:	46bd      	mov	sp, r7
 8081df2:	bd80      	pop	{r7, pc}

08081df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8081df4:	b580      	push	{r7, lr}
 8081df6:	b086      	sub	sp, #24
 8081df8:	af00      	add	r7, sp, #0
 8081dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8081dfc:	2300      	movs	r3, #0
 8081dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8081e00:	4b92      	ldr	r3, [pc, #584]	; (808204c <HAL_DMA_IRQHandler+0x258>)
 8081e02:	681b      	ldr	r3, [r3, #0]
 8081e04:	4a92      	ldr	r2, [pc, #584]	; (8082050 <HAL_DMA_IRQHandler+0x25c>)
 8081e06:	fba2 2303 	umull	r2, r3, r2, r3
 8081e0a:	0a9b      	lsrs	r3, r3, #10
 8081e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8081e0e:	687b      	ldr	r3, [r7, #4]
 8081e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8081e14:	693b      	ldr	r3, [r7, #16]
 8081e16:	681b      	ldr	r3, [r3, #0]
 8081e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8081e1a:	687b      	ldr	r3, [r7, #4]
 8081e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081e1e:	2208      	movs	r2, #8
 8081e20:	409a      	lsls	r2, r3
 8081e22:	68fb      	ldr	r3, [r7, #12]
 8081e24:	4013      	ands	r3, r2
 8081e26:	2b00      	cmp	r3, #0
 8081e28:	d01a      	beq.n	8081e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8081e2a:	687b      	ldr	r3, [r7, #4]
 8081e2c:	681b      	ldr	r3, [r3, #0]
 8081e2e:	681b      	ldr	r3, [r3, #0]
 8081e30:	f003 0304 	and.w	r3, r3, #4
 8081e34:	2b00      	cmp	r3, #0
 8081e36:	d013      	beq.n	8081e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8081e38:	687b      	ldr	r3, [r7, #4]
 8081e3a:	681b      	ldr	r3, [r3, #0]
 8081e3c:	681a      	ldr	r2, [r3, #0]
 8081e3e:	687b      	ldr	r3, [r7, #4]
 8081e40:	681b      	ldr	r3, [r3, #0]
 8081e42:	f022 0204 	bic.w	r2, r2, #4
 8081e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8081e48:	687b      	ldr	r3, [r7, #4]
 8081e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081e4c:	2208      	movs	r2, #8
 8081e4e:	409a      	lsls	r2, r3
 8081e50:	693b      	ldr	r3, [r7, #16]
 8081e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8081e54:	687b      	ldr	r3, [r7, #4]
 8081e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081e58:	f043 0201 	orr.w	r2, r3, #1
 8081e5c:	687b      	ldr	r3, [r7, #4]
 8081e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8081e60:	687b      	ldr	r3, [r7, #4]
 8081e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081e64:	2201      	movs	r2, #1
 8081e66:	409a      	lsls	r2, r3
 8081e68:	68fb      	ldr	r3, [r7, #12]
 8081e6a:	4013      	ands	r3, r2
 8081e6c:	2b00      	cmp	r3, #0
 8081e6e:	d012      	beq.n	8081e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8081e70:	687b      	ldr	r3, [r7, #4]
 8081e72:	681b      	ldr	r3, [r3, #0]
 8081e74:	695b      	ldr	r3, [r3, #20]
 8081e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8081e7a:	2b00      	cmp	r3, #0
 8081e7c:	d00b      	beq.n	8081e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8081e7e:	687b      	ldr	r3, [r7, #4]
 8081e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081e82:	2201      	movs	r2, #1
 8081e84:	409a      	lsls	r2, r3
 8081e86:	693b      	ldr	r3, [r7, #16]
 8081e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8081e8a:	687b      	ldr	r3, [r7, #4]
 8081e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081e8e:	f043 0202 	orr.w	r2, r3, #2
 8081e92:	687b      	ldr	r3, [r7, #4]
 8081e94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8081e96:	687b      	ldr	r3, [r7, #4]
 8081e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081e9a:	2204      	movs	r2, #4
 8081e9c:	409a      	lsls	r2, r3
 8081e9e:	68fb      	ldr	r3, [r7, #12]
 8081ea0:	4013      	ands	r3, r2
 8081ea2:	2b00      	cmp	r3, #0
 8081ea4:	d012      	beq.n	8081ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8081ea6:	687b      	ldr	r3, [r7, #4]
 8081ea8:	681b      	ldr	r3, [r3, #0]
 8081eaa:	681b      	ldr	r3, [r3, #0]
 8081eac:	f003 0302 	and.w	r3, r3, #2
 8081eb0:	2b00      	cmp	r3, #0
 8081eb2:	d00b      	beq.n	8081ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8081eb4:	687b      	ldr	r3, [r7, #4]
 8081eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081eb8:	2204      	movs	r2, #4
 8081eba:	409a      	lsls	r2, r3
 8081ebc:	693b      	ldr	r3, [r7, #16]
 8081ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8081ec0:	687b      	ldr	r3, [r7, #4]
 8081ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081ec4:	f043 0204 	orr.w	r2, r3, #4
 8081ec8:	687b      	ldr	r3, [r7, #4]
 8081eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8081ecc:	687b      	ldr	r3, [r7, #4]
 8081ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081ed0:	2210      	movs	r2, #16
 8081ed2:	409a      	lsls	r2, r3
 8081ed4:	68fb      	ldr	r3, [r7, #12]
 8081ed6:	4013      	ands	r3, r2
 8081ed8:	2b00      	cmp	r3, #0
 8081eda:	d043      	beq.n	8081f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8081edc:	687b      	ldr	r3, [r7, #4]
 8081ede:	681b      	ldr	r3, [r3, #0]
 8081ee0:	681b      	ldr	r3, [r3, #0]
 8081ee2:	f003 0308 	and.w	r3, r3, #8
 8081ee6:	2b00      	cmp	r3, #0
 8081ee8:	d03c      	beq.n	8081f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8081eea:	687b      	ldr	r3, [r7, #4]
 8081eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081eee:	2210      	movs	r2, #16
 8081ef0:	409a      	lsls	r2, r3
 8081ef2:	693b      	ldr	r3, [r7, #16]
 8081ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8081ef6:	687b      	ldr	r3, [r7, #4]
 8081ef8:	681b      	ldr	r3, [r3, #0]
 8081efa:	681b      	ldr	r3, [r3, #0]
 8081efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8081f00:	2b00      	cmp	r3, #0
 8081f02:	d018      	beq.n	8081f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8081f04:	687b      	ldr	r3, [r7, #4]
 8081f06:	681b      	ldr	r3, [r3, #0]
 8081f08:	681b      	ldr	r3, [r3, #0]
 8081f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8081f0e:	2b00      	cmp	r3, #0
 8081f10:	d108      	bne.n	8081f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8081f12:	687b      	ldr	r3, [r7, #4]
 8081f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081f16:	2b00      	cmp	r3, #0
 8081f18:	d024      	beq.n	8081f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8081f1a:	687b      	ldr	r3, [r7, #4]
 8081f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081f1e:	6878      	ldr	r0, [r7, #4]
 8081f20:	4798      	blx	r3
 8081f22:	e01f      	b.n	8081f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8081f24:	687b      	ldr	r3, [r7, #4]
 8081f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081f28:	2b00      	cmp	r3, #0
 8081f2a:	d01b      	beq.n	8081f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8081f2c:	687b      	ldr	r3, [r7, #4]
 8081f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081f30:	6878      	ldr	r0, [r7, #4]
 8081f32:	4798      	blx	r3
 8081f34:	e016      	b.n	8081f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8081f36:	687b      	ldr	r3, [r7, #4]
 8081f38:	681b      	ldr	r3, [r3, #0]
 8081f3a:	681b      	ldr	r3, [r3, #0]
 8081f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8081f40:	2b00      	cmp	r3, #0
 8081f42:	d107      	bne.n	8081f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8081f44:	687b      	ldr	r3, [r7, #4]
 8081f46:	681b      	ldr	r3, [r3, #0]
 8081f48:	681a      	ldr	r2, [r3, #0]
 8081f4a:	687b      	ldr	r3, [r7, #4]
 8081f4c:	681b      	ldr	r3, [r3, #0]
 8081f4e:	f022 0208 	bic.w	r2, r2, #8
 8081f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8081f54:	687b      	ldr	r3, [r7, #4]
 8081f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081f58:	2b00      	cmp	r3, #0
 8081f5a:	d003      	beq.n	8081f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8081f5c:	687b      	ldr	r3, [r7, #4]
 8081f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081f60:	6878      	ldr	r0, [r7, #4]
 8081f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8081f64:	687b      	ldr	r3, [r7, #4]
 8081f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081f68:	2220      	movs	r2, #32
 8081f6a:	409a      	lsls	r2, r3
 8081f6c:	68fb      	ldr	r3, [r7, #12]
 8081f6e:	4013      	ands	r3, r2
 8081f70:	2b00      	cmp	r3, #0
 8081f72:	f000 808e 	beq.w	8082092 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8081f76:	687b      	ldr	r3, [r7, #4]
 8081f78:	681b      	ldr	r3, [r3, #0]
 8081f7a:	681b      	ldr	r3, [r3, #0]
 8081f7c:	f003 0310 	and.w	r3, r3, #16
 8081f80:	2b00      	cmp	r3, #0
 8081f82:	f000 8086 	beq.w	8082092 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8081f86:	687b      	ldr	r3, [r7, #4]
 8081f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081f8a:	2220      	movs	r2, #32
 8081f8c:	409a      	lsls	r2, r3
 8081f8e:	693b      	ldr	r3, [r7, #16]
 8081f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8081f92:	687b      	ldr	r3, [r7, #4]
 8081f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8081f98:	b2db      	uxtb	r3, r3
 8081f9a:	2b05      	cmp	r3, #5
 8081f9c:	d136      	bne.n	808200c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8081f9e:	687b      	ldr	r3, [r7, #4]
 8081fa0:	681b      	ldr	r3, [r3, #0]
 8081fa2:	681a      	ldr	r2, [r3, #0]
 8081fa4:	687b      	ldr	r3, [r7, #4]
 8081fa6:	681b      	ldr	r3, [r3, #0]
 8081fa8:	f022 0216 	bic.w	r2, r2, #22
 8081fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8081fae:	687b      	ldr	r3, [r7, #4]
 8081fb0:	681b      	ldr	r3, [r3, #0]
 8081fb2:	695a      	ldr	r2, [r3, #20]
 8081fb4:	687b      	ldr	r3, [r7, #4]
 8081fb6:	681b      	ldr	r3, [r3, #0]
 8081fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8081fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8081fbe:	687b      	ldr	r3, [r7, #4]
 8081fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081fc2:	2b00      	cmp	r3, #0
 8081fc4:	d103      	bne.n	8081fce <HAL_DMA_IRQHandler+0x1da>
 8081fc6:	687b      	ldr	r3, [r7, #4]
 8081fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081fca:	2b00      	cmp	r3, #0
 8081fcc:	d007      	beq.n	8081fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8081fce:	687b      	ldr	r3, [r7, #4]
 8081fd0:	681b      	ldr	r3, [r3, #0]
 8081fd2:	681a      	ldr	r2, [r3, #0]
 8081fd4:	687b      	ldr	r3, [r7, #4]
 8081fd6:	681b      	ldr	r3, [r3, #0]
 8081fd8:	f022 0208 	bic.w	r2, r2, #8
 8081fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8081fde:	687b      	ldr	r3, [r7, #4]
 8081fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081fe2:	223f      	movs	r2, #63	; 0x3f
 8081fe4:	409a      	lsls	r2, r3
 8081fe6:	693b      	ldr	r3, [r7, #16]
 8081fe8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8081fea:	687b      	ldr	r3, [r7, #4]
 8081fec:	2200      	movs	r2, #0
 8081fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8081ff2:	687b      	ldr	r3, [r7, #4]
 8081ff4:	2201      	movs	r2, #1
 8081ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8081ffa:	687b      	ldr	r3, [r7, #4]
 8081ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081ffe:	2b00      	cmp	r3, #0
 8082000:	d07d      	beq.n	80820fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8082002:	687b      	ldr	r3, [r7, #4]
 8082004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8082006:	6878      	ldr	r0, [r7, #4]
 8082008:	4798      	blx	r3
        }
        return;
 808200a:	e078      	b.n	80820fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 808200c:	687b      	ldr	r3, [r7, #4]
 808200e:	681b      	ldr	r3, [r3, #0]
 8082010:	681b      	ldr	r3, [r3, #0]
 8082012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8082016:	2b00      	cmp	r3, #0
 8082018:	d01c      	beq.n	8082054 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 808201a:	687b      	ldr	r3, [r7, #4]
 808201c:	681b      	ldr	r3, [r3, #0]
 808201e:	681b      	ldr	r3, [r3, #0]
 8082020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8082024:	2b00      	cmp	r3, #0
 8082026:	d108      	bne.n	808203a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8082028:	687b      	ldr	r3, [r7, #4]
 808202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808202c:	2b00      	cmp	r3, #0
 808202e:	d030      	beq.n	8082092 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8082030:	687b      	ldr	r3, [r7, #4]
 8082032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082034:	6878      	ldr	r0, [r7, #4]
 8082036:	4798      	blx	r3
 8082038:	e02b      	b.n	8082092 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 808203a:	687b      	ldr	r3, [r7, #4]
 808203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808203e:	2b00      	cmp	r3, #0
 8082040:	d027      	beq.n	8082092 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8082042:	687b      	ldr	r3, [r7, #4]
 8082044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082046:	6878      	ldr	r0, [r7, #4]
 8082048:	4798      	blx	r3
 808204a:	e022      	b.n	8082092 <HAL_DMA_IRQHandler+0x29e>
 808204c:	20000000 	.word	0x20000000
 8082050:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8082054:	687b      	ldr	r3, [r7, #4]
 8082056:	681b      	ldr	r3, [r3, #0]
 8082058:	681b      	ldr	r3, [r3, #0]
 808205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808205e:	2b00      	cmp	r3, #0
 8082060:	d10f      	bne.n	8082082 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8082062:	687b      	ldr	r3, [r7, #4]
 8082064:	681b      	ldr	r3, [r3, #0]
 8082066:	681a      	ldr	r2, [r3, #0]
 8082068:	687b      	ldr	r3, [r7, #4]
 808206a:	681b      	ldr	r3, [r3, #0]
 808206c:	f022 0210 	bic.w	r2, r2, #16
 8082070:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8082072:	687b      	ldr	r3, [r7, #4]
 8082074:	2200      	movs	r2, #0
 8082076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 808207a:	687b      	ldr	r3, [r7, #4]
 808207c:	2201      	movs	r2, #1
 808207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8082082:	687b      	ldr	r3, [r7, #4]
 8082084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082086:	2b00      	cmp	r3, #0
 8082088:	d003      	beq.n	8082092 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 808208a:	687b      	ldr	r3, [r7, #4]
 808208c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808208e:	6878      	ldr	r0, [r7, #4]
 8082090:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8082092:	687b      	ldr	r3, [r7, #4]
 8082094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082096:	2b00      	cmp	r3, #0
 8082098:	d032      	beq.n	8082100 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 808209a:	687b      	ldr	r3, [r7, #4]
 808209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808209e:	f003 0301 	and.w	r3, r3, #1
 80820a2:	2b00      	cmp	r3, #0
 80820a4:	d022      	beq.n	80820ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80820a6:	687b      	ldr	r3, [r7, #4]
 80820a8:	2205      	movs	r2, #5
 80820aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80820ae:	687b      	ldr	r3, [r7, #4]
 80820b0:	681b      	ldr	r3, [r3, #0]
 80820b2:	681a      	ldr	r2, [r3, #0]
 80820b4:	687b      	ldr	r3, [r7, #4]
 80820b6:	681b      	ldr	r3, [r3, #0]
 80820b8:	f022 0201 	bic.w	r2, r2, #1
 80820bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80820be:	68bb      	ldr	r3, [r7, #8]
 80820c0:	3301      	adds	r3, #1
 80820c2:	60bb      	str	r3, [r7, #8]
 80820c4:	697a      	ldr	r2, [r7, #20]
 80820c6:	429a      	cmp	r2, r3
 80820c8:	d307      	bcc.n	80820da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80820ca:	687b      	ldr	r3, [r7, #4]
 80820cc:	681b      	ldr	r3, [r3, #0]
 80820ce:	681b      	ldr	r3, [r3, #0]
 80820d0:	f003 0301 	and.w	r3, r3, #1
 80820d4:	2b00      	cmp	r3, #0
 80820d6:	d1f2      	bne.n	80820be <HAL_DMA_IRQHandler+0x2ca>
 80820d8:	e000      	b.n	80820dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80820da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80820dc:	687b      	ldr	r3, [r7, #4]
 80820de:	2200      	movs	r2, #0
 80820e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80820e4:	687b      	ldr	r3, [r7, #4]
 80820e6:	2201      	movs	r2, #1
 80820e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80820ec:	687b      	ldr	r3, [r7, #4]
 80820ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80820f0:	2b00      	cmp	r3, #0
 80820f2:	d005      	beq.n	8082100 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80820f4:	687b      	ldr	r3, [r7, #4]
 80820f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80820f8:	6878      	ldr	r0, [r7, #4]
 80820fa:	4798      	blx	r3
 80820fc:	e000      	b.n	8082100 <HAL_DMA_IRQHandler+0x30c>
        return;
 80820fe:	bf00      	nop
    }
  }
}
 8082100:	3718      	adds	r7, #24
 8082102:	46bd      	mov	sp, r7
 8082104:	bd80      	pop	{r7, pc}

08082106 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8082106:	b480      	push	{r7}
 8082108:	b087      	sub	sp, #28
 808210a:	af00      	add	r7, sp, #0
 808210c:	60f8      	str	r0, [r7, #12]
 808210e:	460b      	mov	r3, r1
 8082110:	607a      	str	r2, [r7, #4]
 8082112:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8082114:	2300      	movs	r3, #0
 8082116:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8082118:	68fb      	ldr	r3, [r7, #12]
 808211a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 808211e:	2b01      	cmp	r3, #1
 8082120:	d101      	bne.n	8082126 <HAL_DMA_RegisterCallback+0x20>
 8082122:	2302      	movs	r3, #2
 8082124:	e03d      	b.n	80821a2 <HAL_DMA_RegisterCallback+0x9c>
 8082126:	68fb      	ldr	r3, [r7, #12]
 8082128:	2201      	movs	r2, #1
 808212a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 808212e:	68fb      	ldr	r3, [r7, #12]
 8082130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8082134:	b2db      	uxtb	r3, r3
 8082136:	2b01      	cmp	r3, #1
 8082138:	d12a      	bne.n	8082190 <HAL_DMA_RegisterCallback+0x8a>
  {
    switch (CallbackID)
 808213a:	7afb      	ldrb	r3, [r7, #11]
 808213c:	2b05      	cmp	r3, #5
 808213e:	d82a      	bhi.n	8082196 <HAL_DMA_RegisterCallback+0x90>
 8082140:	a201      	add	r2, pc, #4	; (adr r2, 8082148 <HAL_DMA_RegisterCallback+0x42>)
 8082142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8082146:	bf00      	nop
 8082148:	08082161 	.word	0x08082161
 808214c:	08082169 	.word	0x08082169
 8082150:	08082171 	.word	0x08082171
 8082154:	08082179 	.word	0x08082179
 8082158:	08082181 	.word	0x08082181
 808215c:	08082189 	.word	0x08082189
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8082160:	68fb      	ldr	r3, [r7, #12]
 8082162:	687a      	ldr	r2, [r7, #4]
 8082164:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8082166:	e017      	b.n	8082198 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8082168:	68fb      	ldr	r3, [r7, #12]
 808216a:	687a      	ldr	r2, [r7, #4]
 808216c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 808216e:	e013      	b.n	8082198 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8082170:	68fb      	ldr	r3, [r7, #12]
 8082172:	687a      	ldr	r2, [r7, #4]
 8082174:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8082176:	e00f      	b.n	8082198 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8082178:	68fb      	ldr	r3, [r7, #12]
 808217a:	687a      	ldr	r2, [r7, #4]
 808217c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 808217e:	e00b      	b.n	8082198 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8082180:	68fb      	ldr	r3, [r7, #12]
 8082182:	687a      	ldr	r2, [r7, #4]
 8082184:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8082186:	e007      	b.n	8082198 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8082188:	68fb      	ldr	r3, [r7, #12]
 808218a:	687a      	ldr	r2, [r7, #4]
 808218c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 808218e:	e003      	b.n	8082198 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8082190:	2301      	movs	r3, #1
 8082192:	75fb      	strb	r3, [r7, #23]
 8082194:	e000      	b.n	8082198 <HAL_DMA_RegisterCallback+0x92>
      break;
 8082196:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8082198:	68fb      	ldr	r3, [r7, #12]
 808219a:	2200      	movs	r2, #0
 808219c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80821a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80821a2:	4618      	mov	r0, r3
 80821a4:	371c      	adds	r7, #28
 80821a6:	46bd      	mov	sp, r7
 80821a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80821ac:	4770      	bx	lr

080821ae <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80821ae:	b480      	push	{r7}
 80821b0:	b085      	sub	sp, #20
 80821b2:	af00      	add	r7, sp, #0
 80821b4:	6078      	str	r0, [r7, #4]
 80821b6:	460b      	mov	r3, r1
 80821b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80821ba:	2300      	movs	r3, #0
 80821bc:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80821be:	687b      	ldr	r3, [r7, #4]
 80821c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80821c4:	2b01      	cmp	r3, #1
 80821c6:	d101      	bne.n	80821cc <HAL_DMA_UnRegisterCallback+0x1e>
 80821c8:	2302      	movs	r3, #2
 80821ca:	e053      	b.n	8082274 <HAL_DMA_UnRegisterCallback+0xc6>
 80821cc:	687b      	ldr	r3, [r7, #4]
 80821ce:	2201      	movs	r2, #1
 80821d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80821d4:	687b      	ldr	r3, [r7, #4]
 80821d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80821da:	b2db      	uxtb	r3, r3
 80821dc:	2b01      	cmp	r3, #1
 80821de:	d142      	bne.n	8082266 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 80821e0:	78fb      	ldrb	r3, [r7, #3]
 80821e2:	2b06      	cmp	r3, #6
 80821e4:	d83b      	bhi.n	808225e <HAL_DMA_UnRegisterCallback+0xb0>
 80821e6:	a201      	add	r2, pc, #4	; (adr r2, 80821ec <HAL_DMA_UnRegisterCallback+0x3e>)
 80821e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80821ec:	08082209 	.word	0x08082209
 80821f0:	08082211 	.word	0x08082211
 80821f4:	08082219 	.word	0x08082219
 80821f8:	08082221 	.word	0x08082221
 80821fc:	08082229 	.word	0x08082229
 8082200:	08082231 	.word	0x08082231
 8082204:	08082239 	.word	0x08082239
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8082208:	687b      	ldr	r3, [r7, #4]
 808220a:	2200      	movs	r2, #0
 808220c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 808220e:	e02c      	b.n	808226a <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8082210:	687b      	ldr	r3, [r7, #4]
 8082212:	2200      	movs	r2, #0
 8082214:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8082216:	e028      	b.n	808226a <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8082218:	687b      	ldr	r3, [r7, #4]
 808221a:	2200      	movs	r2, #0
 808221c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 808221e:	e024      	b.n	808226a <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8082220:	687b      	ldr	r3, [r7, #4]
 8082222:	2200      	movs	r2, #0
 8082224:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8082226:	e020      	b.n	808226a <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8082228:	687b      	ldr	r3, [r7, #4]
 808222a:	2200      	movs	r2, #0
 808222c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 808222e:	e01c      	b.n	808226a <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8082230:	687b      	ldr	r3, [r7, #4]
 8082232:	2200      	movs	r2, #0
 8082234:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8082236:	e018      	b.n	808226a <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8082238:	687b      	ldr	r3, [r7, #4]
 808223a:	2200      	movs	r2, #0
 808223c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 808223e:	687b      	ldr	r3, [r7, #4]
 8082240:	2200      	movs	r2, #0
 8082242:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8082244:	687b      	ldr	r3, [r7, #4]
 8082246:	2200      	movs	r2, #0
 8082248:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 808224a:	687b      	ldr	r3, [r7, #4]
 808224c:	2200      	movs	r2, #0
 808224e:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8082250:	687b      	ldr	r3, [r7, #4]
 8082252:	2200      	movs	r2, #0
 8082254:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8082256:	687b      	ldr	r3, [r7, #4]
 8082258:	2200      	movs	r2, #0
 808225a:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 808225c:	e005      	b.n	808226a <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 808225e:	2301      	movs	r3, #1
 8082260:	73fb      	strb	r3, [r7, #15]
      break;
 8082262:	bf00      	nop
 8082264:	e001      	b.n	808226a <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 8082266:	2301      	movs	r3, #1
 8082268:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 808226a:	687b      	ldr	r3, [r7, #4]
 808226c:	2200      	movs	r2, #0
 808226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8082272:	7bfb      	ldrb	r3, [r7, #15]
}
 8082274:	4618      	mov	r0, r3
 8082276:	3714      	adds	r7, #20
 8082278:	46bd      	mov	sp, r7
 808227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808227e:	4770      	bx	lr

08082280 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8082280:	b480      	push	{r7}
 8082282:	b083      	sub	sp, #12
 8082284:	af00      	add	r7, sp, #0
 8082286:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8082288:	687b      	ldr	r3, [r7, #4]
 808228a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 808228e:	b2db      	uxtb	r3, r3
}
 8082290:	4618      	mov	r0, r3
 8082292:	370c      	adds	r7, #12
 8082294:	46bd      	mov	sp, r7
 8082296:	f85d 7b04 	ldr.w	r7, [sp], #4
 808229a:	4770      	bx	lr

0808229c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 808229c:	b480      	push	{r7}
 808229e:	b083      	sub	sp, #12
 80822a0:	af00      	add	r7, sp, #0
 80822a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80822a4:	687b      	ldr	r3, [r7, #4]
 80822a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80822a8:	4618      	mov	r0, r3
 80822aa:	370c      	adds	r7, #12
 80822ac:	46bd      	mov	sp, r7
 80822ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80822b2:	4770      	bx	lr

080822b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80822b4:	b480      	push	{r7}
 80822b6:	b085      	sub	sp, #20
 80822b8:	af00      	add	r7, sp, #0
 80822ba:	60f8      	str	r0, [r7, #12]
 80822bc:	60b9      	str	r1, [r7, #8]
 80822be:	607a      	str	r2, [r7, #4]
 80822c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80822c2:	68fb      	ldr	r3, [r7, #12]
 80822c4:	681b      	ldr	r3, [r3, #0]
 80822c6:	681a      	ldr	r2, [r3, #0]
 80822c8:	68fb      	ldr	r3, [r7, #12]
 80822ca:	681b      	ldr	r3, [r3, #0]
 80822cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80822d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80822d2:	68fb      	ldr	r3, [r7, #12]
 80822d4:	681b      	ldr	r3, [r3, #0]
 80822d6:	683a      	ldr	r2, [r7, #0]
 80822d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80822da:	68fb      	ldr	r3, [r7, #12]
 80822dc:	689b      	ldr	r3, [r3, #8]
 80822de:	2b40      	cmp	r3, #64	; 0x40
 80822e0:	d108      	bne.n	80822f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80822e2:	68fb      	ldr	r3, [r7, #12]
 80822e4:	681b      	ldr	r3, [r3, #0]
 80822e6:	687a      	ldr	r2, [r7, #4]
 80822e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80822ea:	68fb      	ldr	r3, [r7, #12]
 80822ec:	681b      	ldr	r3, [r3, #0]
 80822ee:	68ba      	ldr	r2, [r7, #8]
 80822f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80822f2:	e007      	b.n	8082304 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80822f4:	68fb      	ldr	r3, [r7, #12]
 80822f6:	681b      	ldr	r3, [r3, #0]
 80822f8:	68ba      	ldr	r2, [r7, #8]
 80822fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80822fc:	68fb      	ldr	r3, [r7, #12]
 80822fe:	681b      	ldr	r3, [r3, #0]
 8082300:	687a      	ldr	r2, [r7, #4]
 8082302:	60da      	str	r2, [r3, #12]
}
 8082304:	bf00      	nop
 8082306:	3714      	adds	r7, #20
 8082308:	46bd      	mov	sp, r7
 808230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808230e:	4770      	bx	lr

08082310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8082310:	b480      	push	{r7}
 8082312:	b085      	sub	sp, #20
 8082314:	af00      	add	r7, sp, #0
 8082316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8082318:	687b      	ldr	r3, [r7, #4]
 808231a:	681b      	ldr	r3, [r3, #0]
 808231c:	b2db      	uxtb	r3, r3
 808231e:	3b10      	subs	r3, #16
 8082320:	4a14      	ldr	r2, [pc, #80]	; (8082374 <DMA_CalcBaseAndBitshift+0x64>)
 8082322:	fba2 2303 	umull	r2, r3, r2, r3
 8082326:	091b      	lsrs	r3, r3, #4
 8082328:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 808232a:	4a13      	ldr	r2, [pc, #76]	; (8082378 <DMA_CalcBaseAndBitshift+0x68>)
 808232c:	68fb      	ldr	r3, [r7, #12]
 808232e:	4413      	add	r3, r2
 8082330:	781b      	ldrb	r3, [r3, #0]
 8082332:	461a      	mov	r2, r3
 8082334:	687b      	ldr	r3, [r7, #4]
 8082336:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8082338:	68fb      	ldr	r3, [r7, #12]
 808233a:	2b03      	cmp	r3, #3
 808233c:	d909      	bls.n	8082352 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 808233e:	687b      	ldr	r3, [r7, #4]
 8082340:	681b      	ldr	r3, [r3, #0]
 8082342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8082346:	f023 0303 	bic.w	r3, r3, #3
 808234a:	1d1a      	adds	r2, r3, #4
 808234c:	687b      	ldr	r3, [r7, #4]
 808234e:	659a      	str	r2, [r3, #88]	; 0x58
 8082350:	e007      	b.n	8082362 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8082352:	687b      	ldr	r3, [r7, #4]
 8082354:	681b      	ldr	r3, [r3, #0]
 8082356:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 808235a:	f023 0303 	bic.w	r3, r3, #3
 808235e:	687a      	ldr	r2, [r7, #4]
 8082360:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8082362:	687b      	ldr	r3, [r7, #4]
 8082364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8082366:	4618      	mov	r0, r3
 8082368:	3714      	adds	r7, #20
 808236a:	46bd      	mov	sp, r7
 808236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082370:	4770      	bx	lr
 8082372:	bf00      	nop
 8082374:	aaaaaaab 	.word	0xaaaaaaab
 8082378:	0808bb00 	.word	0x0808bb00

0808237c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 808237c:	b480      	push	{r7}
 808237e:	b085      	sub	sp, #20
 8082380:	af00      	add	r7, sp, #0
 8082382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8082384:	2300      	movs	r3, #0
 8082386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8082388:	687b      	ldr	r3, [r7, #4]
 808238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808238c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 808238e:	687b      	ldr	r3, [r7, #4]
 8082390:	699b      	ldr	r3, [r3, #24]
 8082392:	2b00      	cmp	r3, #0
 8082394:	d11f      	bne.n	80823d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8082396:	68bb      	ldr	r3, [r7, #8]
 8082398:	2b03      	cmp	r3, #3
 808239a:	d855      	bhi.n	8082448 <DMA_CheckFifoParam+0xcc>
 808239c:	a201      	add	r2, pc, #4	; (adr r2, 80823a4 <DMA_CheckFifoParam+0x28>)
 808239e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80823a2:	bf00      	nop
 80823a4:	080823b5 	.word	0x080823b5
 80823a8:	080823c7 	.word	0x080823c7
 80823ac:	080823b5 	.word	0x080823b5
 80823b0:	08082449 	.word	0x08082449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80823b4:	687b      	ldr	r3, [r7, #4]
 80823b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80823b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80823bc:	2b00      	cmp	r3, #0
 80823be:	d045      	beq.n	808244c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80823c0:	2301      	movs	r3, #1
 80823c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80823c4:	e042      	b.n	808244c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80823c6:	687b      	ldr	r3, [r7, #4]
 80823c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80823ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80823ce:	d13f      	bne.n	8082450 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80823d0:	2301      	movs	r3, #1
 80823d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80823d4:	e03c      	b.n	8082450 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80823d6:	687b      	ldr	r3, [r7, #4]
 80823d8:	699b      	ldr	r3, [r3, #24]
 80823da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80823de:	d121      	bne.n	8082424 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80823e0:	68bb      	ldr	r3, [r7, #8]
 80823e2:	2b03      	cmp	r3, #3
 80823e4:	d836      	bhi.n	8082454 <DMA_CheckFifoParam+0xd8>
 80823e6:	a201      	add	r2, pc, #4	; (adr r2, 80823ec <DMA_CheckFifoParam+0x70>)
 80823e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80823ec:	080823fd 	.word	0x080823fd
 80823f0:	08082403 	.word	0x08082403
 80823f4:	080823fd 	.word	0x080823fd
 80823f8:	08082415 	.word	0x08082415
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80823fc:	2301      	movs	r3, #1
 80823fe:	73fb      	strb	r3, [r7, #15]
      break;
 8082400:	e02f      	b.n	8082462 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8082402:	687b      	ldr	r3, [r7, #4]
 8082404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 808240a:	2b00      	cmp	r3, #0
 808240c:	d024      	beq.n	8082458 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 808240e:	2301      	movs	r3, #1
 8082410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8082412:	e021      	b.n	8082458 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8082414:	687b      	ldr	r3, [r7, #4]
 8082416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082418:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 808241c:	d11e      	bne.n	808245c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 808241e:	2301      	movs	r3, #1
 8082420:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8082422:	e01b      	b.n	808245c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8082424:	68bb      	ldr	r3, [r7, #8]
 8082426:	2b02      	cmp	r3, #2
 8082428:	d902      	bls.n	8082430 <DMA_CheckFifoParam+0xb4>
 808242a:	2b03      	cmp	r3, #3
 808242c:	d003      	beq.n	8082436 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 808242e:	e018      	b.n	8082462 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8082430:	2301      	movs	r3, #1
 8082432:	73fb      	strb	r3, [r7, #15]
      break;
 8082434:	e015      	b.n	8082462 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8082436:	687b      	ldr	r3, [r7, #4]
 8082438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808243a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 808243e:	2b00      	cmp	r3, #0
 8082440:	d00e      	beq.n	8082460 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8082442:	2301      	movs	r3, #1
 8082444:	73fb      	strb	r3, [r7, #15]
      break;
 8082446:	e00b      	b.n	8082460 <DMA_CheckFifoParam+0xe4>
      break;
 8082448:	bf00      	nop
 808244a:	e00a      	b.n	8082462 <DMA_CheckFifoParam+0xe6>
      break;
 808244c:	bf00      	nop
 808244e:	e008      	b.n	8082462 <DMA_CheckFifoParam+0xe6>
      break;
 8082450:	bf00      	nop
 8082452:	e006      	b.n	8082462 <DMA_CheckFifoParam+0xe6>
      break;
 8082454:	bf00      	nop
 8082456:	e004      	b.n	8082462 <DMA_CheckFifoParam+0xe6>
      break;
 8082458:	bf00      	nop
 808245a:	e002      	b.n	8082462 <DMA_CheckFifoParam+0xe6>
      break;   
 808245c:	bf00      	nop
 808245e:	e000      	b.n	8082462 <DMA_CheckFifoParam+0xe6>
      break;
 8082460:	bf00      	nop
    }
  } 
  
  return status; 
 8082462:	7bfb      	ldrb	r3, [r7, #15]
}
 8082464:	4618      	mov	r0, r3
 8082466:	3714      	adds	r7, #20
 8082468:	46bd      	mov	sp, r7
 808246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808246e:	4770      	bx	lr

08082470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8082470:	b480      	push	{r7}
 8082472:	b089      	sub	sp, #36	; 0x24
 8082474:	af00      	add	r7, sp, #0
 8082476:	6078      	str	r0, [r7, #4]
 8082478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 808247a:	2300      	movs	r3, #0
 808247c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 808247e:	2300      	movs	r3, #0
 8082480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8082482:	2300      	movs	r3, #0
 8082484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8082486:	2300      	movs	r3, #0
 8082488:	61fb      	str	r3, [r7, #28]
 808248a:	e177      	b.n	808277c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 808248c:	2201      	movs	r2, #1
 808248e:	69fb      	ldr	r3, [r7, #28]
 8082490:	fa02 f303 	lsl.w	r3, r2, r3
 8082494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8082496:	683b      	ldr	r3, [r7, #0]
 8082498:	681b      	ldr	r3, [r3, #0]
 808249a:	697a      	ldr	r2, [r7, #20]
 808249c:	4013      	ands	r3, r2
 808249e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80824a0:	693a      	ldr	r2, [r7, #16]
 80824a2:	697b      	ldr	r3, [r7, #20]
 80824a4:	429a      	cmp	r2, r3
 80824a6:	f040 8166 	bne.w	8082776 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80824aa:	683b      	ldr	r3, [r7, #0]
 80824ac:	685b      	ldr	r3, [r3, #4]
 80824ae:	2b02      	cmp	r3, #2
 80824b0:	d003      	beq.n	80824ba <HAL_GPIO_Init+0x4a>
 80824b2:	683b      	ldr	r3, [r7, #0]
 80824b4:	685b      	ldr	r3, [r3, #4]
 80824b6:	2b12      	cmp	r3, #18
 80824b8:	d123      	bne.n	8082502 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80824ba:	69fb      	ldr	r3, [r7, #28]
 80824bc:	08da      	lsrs	r2, r3, #3
 80824be:	687b      	ldr	r3, [r7, #4]
 80824c0:	3208      	adds	r2, #8
 80824c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80824c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80824c8:	69fb      	ldr	r3, [r7, #28]
 80824ca:	f003 0307 	and.w	r3, r3, #7
 80824ce:	009b      	lsls	r3, r3, #2
 80824d0:	220f      	movs	r2, #15
 80824d2:	fa02 f303 	lsl.w	r3, r2, r3
 80824d6:	43db      	mvns	r3, r3
 80824d8:	69ba      	ldr	r2, [r7, #24]
 80824da:	4013      	ands	r3, r2
 80824dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80824de:	683b      	ldr	r3, [r7, #0]
 80824e0:	691a      	ldr	r2, [r3, #16]
 80824e2:	69fb      	ldr	r3, [r7, #28]
 80824e4:	f003 0307 	and.w	r3, r3, #7
 80824e8:	009b      	lsls	r3, r3, #2
 80824ea:	fa02 f303 	lsl.w	r3, r2, r3
 80824ee:	69ba      	ldr	r2, [r7, #24]
 80824f0:	4313      	orrs	r3, r2
 80824f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80824f4:	69fb      	ldr	r3, [r7, #28]
 80824f6:	08da      	lsrs	r2, r3, #3
 80824f8:	687b      	ldr	r3, [r7, #4]
 80824fa:	3208      	adds	r2, #8
 80824fc:	69b9      	ldr	r1, [r7, #24]
 80824fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8082502:	687b      	ldr	r3, [r7, #4]
 8082504:	681b      	ldr	r3, [r3, #0]
 8082506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8082508:	69fb      	ldr	r3, [r7, #28]
 808250a:	005b      	lsls	r3, r3, #1
 808250c:	2203      	movs	r2, #3
 808250e:	fa02 f303 	lsl.w	r3, r2, r3
 8082512:	43db      	mvns	r3, r3
 8082514:	69ba      	ldr	r2, [r7, #24]
 8082516:	4013      	ands	r3, r2
 8082518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 808251a:	683b      	ldr	r3, [r7, #0]
 808251c:	685b      	ldr	r3, [r3, #4]
 808251e:	f003 0203 	and.w	r2, r3, #3
 8082522:	69fb      	ldr	r3, [r7, #28]
 8082524:	005b      	lsls	r3, r3, #1
 8082526:	fa02 f303 	lsl.w	r3, r2, r3
 808252a:	69ba      	ldr	r2, [r7, #24]
 808252c:	4313      	orrs	r3, r2
 808252e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8082530:	687b      	ldr	r3, [r7, #4]
 8082532:	69ba      	ldr	r2, [r7, #24]
 8082534:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8082536:	683b      	ldr	r3, [r7, #0]
 8082538:	685b      	ldr	r3, [r3, #4]
 808253a:	2b01      	cmp	r3, #1
 808253c:	d00b      	beq.n	8082556 <HAL_GPIO_Init+0xe6>
 808253e:	683b      	ldr	r3, [r7, #0]
 8082540:	685b      	ldr	r3, [r3, #4]
 8082542:	2b02      	cmp	r3, #2
 8082544:	d007      	beq.n	8082556 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8082546:	683b      	ldr	r3, [r7, #0]
 8082548:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 808254a:	2b11      	cmp	r3, #17
 808254c:	d003      	beq.n	8082556 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 808254e:	683b      	ldr	r3, [r7, #0]
 8082550:	685b      	ldr	r3, [r3, #4]
 8082552:	2b12      	cmp	r3, #18
 8082554:	d130      	bne.n	80825b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8082556:	687b      	ldr	r3, [r7, #4]
 8082558:	689b      	ldr	r3, [r3, #8]
 808255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 808255c:	69fb      	ldr	r3, [r7, #28]
 808255e:	005b      	lsls	r3, r3, #1
 8082560:	2203      	movs	r2, #3
 8082562:	fa02 f303 	lsl.w	r3, r2, r3
 8082566:	43db      	mvns	r3, r3
 8082568:	69ba      	ldr	r2, [r7, #24]
 808256a:	4013      	ands	r3, r2
 808256c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 808256e:	683b      	ldr	r3, [r7, #0]
 8082570:	68da      	ldr	r2, [r3, #12]
 8082572:	69fb      	ldr	r3, [r7, #28]
 8082574:	005b      	lsls	r3, r3, #1
 8082576:	fa02 f303 	lsl.w	r3, r2, r3
 808257a:	69ba      	ldr	r2, [r7, #24]
 808257c:	4313      	orrs	r3, r2
 808257e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8082580:	687b      	ldr	r3, [r7, #4]
 8082582:	69ba      	ldr	r2, [r7, #24]
 8082584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8082586:	687b      	ldr	r3, [r7, #4]
 8082588:	685b      	ldr	r3, [r3, #4]
 808258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 808258c:	2201      	movs	r2, #1
 808258e:	69fb      	ldr	r3, [r7, #28]
 8082590:	fa02 f303 	lsl.w	r3, r2, r3
 8082594:	43db      	mvns	r3, r3
 8082596:	69ba      	ldr	r2, [r7, #24]
 8082598:	4013      	ands	r3, r2
 808259a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 808259c:	683b      	ldr	r3, [r7, #0]
 808259e:	685b      	ldr	r3, [r3, #4]
 80825a0:	091b      	lsrs	r3, r3, #4
 80825a2:	f003 0201 	and.w	r2, r3, #1
 80825a6:	69fb      	ldr	r3, [r7, #28]
 80825a8:	fa02 f303 	lsl.w	r3, r2, r3
 80825ac:	69ba      	ldr	r2, [r7, #24]
 80825ae:	4313      	orrs	r3, r2
 80825b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80825b2:	687b      	ldr	r3, [r7, #4]
 80825b4:	69ba      	ldr	r2, [r7, #24]
 80825b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80825b8:	687b      	ldr	r3, [r7, #4]
 80825ba:	68db      	ldr	r3, [r3, #12]
 80825bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80825be:	69fb      	ldr	r3, [r7, #28]
 80825c0:	005b      	lsls	r3, r3, #1
 80825c2:	2203      	movs	r2, #3
 80825c4:	fa02 f303 	lsl.w	r3, r2, r3
 80825c8:	43db      	mvns	r3, r3
 80825ca:	69ba      	ldr	r2, [r7, #24]
 80825cc:	4013      	ands	r3, r2
 80825ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80825d0:	683b      	ldr	r3, [r7, #0]
 80825d2:	689a      	ldr	r2, [r3, #8]
 80825d4:	69fb      	ldr	r3, [r7, #28]
 80825d6:	005b      	lsls	r3, r3, #1
 80825d8:	fa02 f303 	lsl.w	r3, r2, r3
 80825dc:	69ba      	ldr	r2, [r7, #24]
 80825de:	4313      	orrs	r3, r2
 80825e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80825e2:	687b      	ldr	r3, [r7, #4]
 80825e4:	69ba      	ldr	r2, [r7, #24]
 80825e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80825e8:	683b      	ldr	r3, [r7, #0]
 80825ea:	685b      	ldr	r3, [r3, #4]
 80825ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80825f0:	2b00      	cmp	r3, #0
 80825f2:	f000 80c0 	beq.w	8082776 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80825f6:	2300      	movs	r3, #0
 80825f8:	60fb      	str	r3, [r7, #12]
 80825fa:	4b65      	ldr	r3, [pc, #404]	; (8082790 <HAL_GPIO_Init+0x320>)
 80825fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80825fe:	4a64      	ldr	r2, [pc, #400]	; (8082790 <HAL_GPIO_Init+0x320>)
 8082600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8082604:	6453      	str	r3, [r2, #68]	; 0x44
 8082606:	4b62      	ldr	r3, [pc, #392]	; (8082790 <HAL_GPIO_Init+0x320>)
 8082608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808260e:	60fb      	str	r3, [r7, #12]
 8082610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8082612:	4a60      	ldr	r2, [pc, #384]	; (8082794 <HAL_GPIO_Init+0x324>)
 8082614:	69fb      	ldr	r3, [r7, #28]
 8082616:	089b      	lsrs	r3, r3, #2
 8082618:	3302      	adds	r3, #2
 808261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 808261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8082620:	69fb      	ldr	r3, [r7, #28]
 8082622:	f003 0303 	and.w	r3, r3, #3
 8082626:	009b      	lsls	r3, r3, #2
 8082628:	220f      	movs	r2, #15
 808262a:	fa02 f303 	lsl.w	r3, r2, r3
 808262e:	43db      	mvns	r3, r3
 8082630:	69ba      	ldr	r2, [r7, #24]
 8082632:	4013      	ands	r3, r2
 8082634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8082636:	687b      	ldr	r3, [r7, #4]
 8082638:	4a57      	ldr	r2, [pc, #348]	; (8082798 <HAL_GPIO_Init+0x328>)
 808263a:	4293      	cmp	r3, r2
 808263c:	d037      	beq.n	80826ae <HAL_GPIO_Init+0x23e>
 808263e:	687b      	ldr	r3, [r7, #4]
 8082640:	4a56      	ldr	r2, [pc, #344]	; (808279c <HAL_GPIO_Init+0x32c>)
 8082642:	4293      	cmp	r3, r2
 8082644:	d031      	beq.n	80826aa <HAL_GPIO_Init+0x23a>
 8082646:	687b      	ldr	r3, [r7, #4]
 8082648:	4a55      	ldr	r2, [pc, #340]	; (80827a0 <HAL_GPIO_Init+0x330>)
 808264a:	4293      	cmp	r3, r2
 808264c:	d02b      	beq.n	80826a6 <HAL_GPIO_Init+0x236>
 808264e:	687b      	ldr	r3, [r7, #4]
 8082650:	4a54      	ldr	r2, [pc, #336]	; (80827a4 <HAL_GPIO_Init+0x334>)
 8082652:	4293      	cmp	r3, r2
 8082654:	d025      	beq.n	80826a2 <HAL_GPIO_Init+0x232>
 8082656:	687b      	ldr	r3, [r7, #4]
 8082658:	4a53      	ldr	r2, [pc, #332]	; (80827a8 <HAL_GPIO_Init+0x338>)
 808265a:	4293      	cmp	r3, r2
 808265c:	d01f      	beq.n	808269e <HAL_GPIO_Init+0x22e>
 808265e:	687b      	ldr	r3, [r7, #4]
 8082660:	4a52      	ldr	r2, [pc, #328]	; (80827ac <HAL_GPIO_Init+0x33c>)
 8082662:	4293      	cmp	r3, r2
 8082664:	d019      	beq.n	808269a <HAL_GPIO_Init+0x22a>
 8082666:	687b      	ldr	r3, [r7, #4]
 8082668:	4a51      	ldr	r2, [pc, #324]	; (80827b0 <HAL_GPIO_Init+0x340>)
 808266a:	4293      	cmp	r3, r2
 808266c:	d013      	beq.n	8082696 <HAL_GPIO_Init+0x226>
 808266e:	687b      	ldr	r3, [r7, #4]
 8082670:	4a50      	ldr	r2, [pc, #320]	; (80827b4 <HAL_GPIO_Init+0x344>)
 8082672:	4293      	cmp	r3, r2
 8082674:	d00d      	beq.n	8082692 <HAL_GPIO_Init+0x222>
 8082676:	687b      	ldr	r3, [r7, #4]
 8082678:	4a4f      	ldr	r2, [pc, #316]	; (80827b8 <HAL_GPIO_Init+0x348>)
 808267a:	4293      	cmp	r3, r2
 808267c:	d007      	beq.n	808268e <HAL_GPIO_Init+0x21e>
 808267e:	687b      	ldr	r3, [r7, #4]
 8082680:	4a4e      	ldr	r2, [pc, #312]	; (80827bc <HAL_GPIO_Init+0x34c>)
 8082682:	4293      	cmp	r3, r2
 8082684:	d101      	bne.n	808268a <HAL_GPIO_Init+0x21a>
 8082686:	2309      	movs	r3, #9
 8082688:	e012      	b.n	80826b0 <HAL_GPIO_Init+0x240>
 808268a:	230a      	movs	r3, #10
 808268c:	e010      	b.n	80826b0 <HAL_GPIO_Init+0x240>
 808268e:	2308      	movs	r3, #8
 8082690:	e00e      	b.n	80826b0 <HAL_GPIO_Init+0x240>
 8082692:	2307      	movs	r3, #7
 8082694:	e00c      	b.n	80826b0 <HAL_GPIO_Init+0x240>
 8082696:	2306      	movs	r3, #6
 8082698:	e00a      	b.n	80826b0 <HAL_GPIO_Init+0x240>
 808269a:	2305      	movs	r3, #5
 808269c:	e008      	b.n	80826b0 <HAL_GPIO_Init+0x240>
 808269e:	2304      	movs	r3, #4
 80826a0:	e006      	b.n	80826b0 <HAL_GPIO_Init+0x240>
 80826a2:	2303      	movs	r3, #3
 80826a4:	e004      	b.n	80826b0 <HAL_GPIO_Init+0x240>
 80826a6:	2302      	movs	r3, #2
 80826a8:	e002      	b.n	80826b0 <HAL_GPIO_Init+0x240>
 80826aa:	2301      	movs	r3, #1
 80826ac:	e000      	b.n	80826b0 <HAL_GPIO_Init+0x240>
 80826ae:	2300      	movs	r3, #0
 80826b0:	69fa      	ldr	r2, [r7, #28]
 80826b2:	f002 0203 	and.w	r2, r2, #3
 80826b6:	0092      	lsls	r2, r2, #2
 80826b8:	4093      	lsls	r3, r2
 80826ba:	69ba      	ldr	r2, [r7, #24]
 80826bc:	4313      	orrs	r3, r2
 80826be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80826c0:	4934      	ldr	r1, [pc, #208]	; (8082794 <HAL_GPIO_Init+0x324>)
 80826c2:	69fb      	ldr	r3, [r7, #28]
 80826c4:	089b      	lsrs	r3, r3, #2
 80826c6:	3302      	adds	r3, #2
 80826c8:	69ba      	ldr	r2, [r7, #24]
 80826ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80826ce:	4b3c      	ldr	r3, [pc, #240]	; (80827c0 <HAL_GPIO_Init+0x350>)
 80826d0:	681b      	ldr	r3, [r3, #0]
 80826d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80826d4:	693b      	ldr	r3, [r7, #16]
 80826d6:	43db      	mvns	r3, r3
 80826d8:	69ba      	ldr	r2, [r7, #24]
 80826da:	4013      	ands	r3, r2
 80826dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80826de:	683b      	ldr	r3, [r7, #0]
 80826e0:	685b      	ldr	r3, [r3, #4]
 80826e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80826e6:	2b00      	cmp	r3, #0
 80826e8:	d003      	beq.n	80826f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80826ea:	69ba      	ldr	r2, [r7, #24]
 80826ec:	693b      	ldr	r3, [r7, #16]
 80826ee:	4313      	orrs	r3, r2
 80826f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80826f2:	4a33      	ldr	r2, [pc, #204]	; (80827c0 <HAL_GPIO_Init+0x350>)
 80826f4:	69bb      	ldr	r3, [r7, #24]
 80826f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80826f8:	4b31      	ldr	r3, [pc, #196]	; (80827c0 <HAL_GPIO_Init+0x350>)
 80826fa:	685b      	ldr	r3, [r3, #4]
 80826fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80826fe:	693b      	ldr	r3, [r7, #16]
 8082700:	43db      	mvns	r3, r3
 8082702:	69ba      	ldr	r2, [r7, #24]
 8082704:	4013      	ands	r3, r2
 8082706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8082708:	683b      	ldr	r3, [r7, #0]
 808270a:	685b      	ldr	r3, [r3, #4]
 808270c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8082710:	2b00      	cmp	r3, #0
 8082712:	d003      	beq.n	808271c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8082714:	69ba      	ldr	r2, [r7, #24]
 8082716:	693b      	ldr	r3, [r7, #16]
 8082718:	4313      	orrs	r3, r2
 808271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 808271c:	4a28      	ldr	r2, [pc, #160]	; (80827c0 <HAL_GPIO_Init+0x350>)
 808271e:	69bb      	ldr	r3, [r7, #24]
 8082720:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8082722:	4b27      	ldr	r3, [pc, #156]	; (80827c0 <HAL_GPIO_Init+0x350>)
 8082724:	689b      	ldr	r3, [r3, #8]
 8082726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8082728:	693b      	ldr	r3, [r7, #16]
 808272a:	43db      	mvns	r3, r3
 808272c:	69ba      	ldr	r2, [r7, #24]
 808272e:	4013      	ands	r3, r2
 8082730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8082732:	683b      	ldr	r3, [r7, #0]
 8082734:	685b      	ldr	r3, [r3, #4]
 8082736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 808273a:	2b00      	cmp	r3, #0
 808273c:	d003      	beq.n	8082746 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 808273e:	69ba      	ldr	r2, [r7, #24]
 8082740:	693b      	ldr	r3, [r7, #16]
 8082742:	4313      	orrs	r3, r2
 8082744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8082746:	4a1e      	ldr	r2, [pc, #120]	; (80827c0 <HAL_GPIO_Init+0x350>)
 8082748:	69bb      	ldr	r3, [r7, #24]
 808274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 808274c:	4b1c      	ldr	r3, [pc, #112]	; (80827c0 <HAL_GPIO_Init+0x350>)
 808274e:	68db      	ldr	r3, [r3, #12]
 8082750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8082752:	693b      	ldr	r3, [r7, #16]
 8082754:	43db      	mvns	r3, r3
 8082756:	69ba      	ldr	r2, [r7, #24]
 8082758:	4013      	ands	r3, r2
 808275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 808275c:	683b      	ldr	r3, [r7, #0]
 808275e:	685b      	ldr	r3, [r3, #4]
 8082760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8082764:	2b00      	cmp	r3, #0
 8082766:	d003      	beq.n	8082770 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8082768:	69ba      	ldr	r2, [r7, #24]
 808276a:	693b      	ldr	r3, [r7, #16]
 808276c:	4313      	orrs	r3, r2
 808276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8082770:	4a13      	ldr	r2, [pc, #76]	; (80827c0 <HAL_GPIO_Init+0x350>)
 8082772:	69bb      	ldr	r3, [r7, #24]
 8082774:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8082776:	69fb      	ldr	r3, [r7, #28]
 8082778:	3301      	adds	r3, #1
 808277a:	61fb      	str	r3, [r7, #28]
 808277c:	69fb      	ldr	r3, [r7, #28]
 808277e:	2b0f      	cmp	r3, #15
 8082780:	f67f ae84 	bls.w	808248c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8082784:	bf00      	nop
 8082786:	3724      	adds	r7, #36	; 0x24
 8082788:	46bd      	mov	sp, r7
 808278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808278e:	4770      	bx	lr
 8082790:	40023800 	.word	0x40023800
 8082794:	40013800 	.word	0x40013800
 8082798:	40020000 	.word	0x40020000
 808279c:	40020400 	.word	0x40020400
 80827a0:	40020800 	.word	0x40020800
 80827a4:	40020c00 	.word	0x40020c00
 80827a8:	40021000 	.word	0x40021000
 80827ac:	40021400 	.word	0x40021400
 80827b0:	40021800 	.word	0x40021800
 80827b4:	40021c00 	.word	0x40021c00
 80827b8:	40022000 	.word	0x40022000
 80827bc:	40022400 	.word	0x40022400
 80827c0:	40013c00 	.word	0x40013c00

080827c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80827c4:	b480      	push	{r7}
 80827c6:	b087      	sub	sp, #28
 80827c8:	af00      	add	r7, sp, #0
 80827ca:	6078      	str	r0, [r7, #4]
 80827cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80827ce:	2300      	movs	r3, #0
 80827d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80827d2:	2300      	movs	r3, #0
 80827d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80827d6:	2300      	movs	r3, #0
 80827d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80827da:	2300      	movs	r3, #0
 80827dc:	617b      	str	r3, [r7, #20]
 80827de:	e0d9      	b.n	8082994 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80827e0:	2201      	movs	r2, #1
 80827e2:	697b      	ldr	r3, [r7, #20]
 80827e4:	fa02 f303 	lsl.w	r3, r2, r3
 80827e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80827ea:	683a      	ldr	r2, [r7, #0]
 80827ec:	693b      	ldr	r3, [r7, #16]
 80827ee:	4013      	ands	r3, r2
 80827f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80827f2:	68fa      	ldr	r2, [r7, #12]
 80827f4:	693b      	ldr	r3, [r7, #16]
 80827f6:	429a      	cmp	r2, r3
 80827f8:	f040 80c9 	bne.w	808298e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80827fc:	4a6a      	ldr	r2, [pc, #424]	; (80829a8 <HAL_GPIO_DeInit+0x1e4>)
 80827fe:	697b      	ldr	r3, [r7, #20]
 8082800:	089b      	lsrs	r3, r3, #2
 8082802:	3302      	adds	r3, #2
 8082804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8082808:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 808280a:	697b      	ldr	r3, [r7, #20]
 808280c:	f003 0303 	and.w	r3, r3, #3
 8082810:	009b      	lsls	r3, r3, #2
 8082812:	220f      	movs	r2, #15
 8082814:	fa02 f303 	lsl.w	r3, r2, r3
 8082818:	68ba      	ldr	r2, [r7, #8]
 808281a:	4013      	ands	r3, r2
 808281c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 808281e:	687b      	ldr	r3, [r7, #4]
 8082820:	4a62      	ldr	r2, [pc, #392]	; (80829ac <HAL_GPIO_DeInit+0x1e8>)
 8082822:	4293      	cmp	r3, r2
 8082824:	d037      	beq.n	8082896 <HAL_GPIO_DeInit+0xd2>
 8082826:	687b      	ldr	r3, [r7, #4]
 8082828:	4a61      	ldr	r2, [pc, #388]	; (80829b0 <HAL_GPIO_DeInit+0x1ec>)
 808282a:	4293      	cmp	r3, r2
 808282c:	d031      	beq.n	8082892 <HAL_GPIO_DeInit+0xce>
 808282e:	687b      	ldr	r3, [r7, #4]
 8082830:	4a60      	ldr	r2, [pc, #384]	; (80829b4 <HAL_GPIO_DeInit+0x1f0>)
 8082832:	4293      	cmp	r3, r2
 8082834:	d02b      	beq.n	808288e <HAL_GPIO_DeInit+0xca>
 8082836:	687b      	ldr	r3, [r7, #4]
 8082838:	4a5f      	ldr	r2, [pc, #380]	; (80829b8 <HAL_GPIO_DeInit+0x1f4>)
 808283a:	4293      	cmp	r3, r2
 808283c:	d025      	beq.n	808288a <HAL_GPIO_DeInit+0xc6>
 808283e:	687b      	ldr	r3, [r7, #4]
 8082840:	4a5e      	ldr	r2, [pc, #376]	; (80829bc <HAL_GPIO_DeInit+0x1f8>)
 8082842:	4293      	cmp	r3, r2
 8082844:	d01f      	beq.n	8082886 <HAL_GPIO_DeInit+0xc2>
 8082846:	687b      	ldr	r3, [r7, #4]
 8082848:	4a5d      	ldr	r2, [pc, #372]	; (80829c0 <HAL_GPIO_DeInit+0x1fc>)
 808284a:	4293      	cmp	r3, r2
 808284c:	d019      	beq.n	8082882 <HAL_GPIO_DeInit+0xbe>
 808284e:	687b      	ldr	r3, [r7, #4]
 8082850:	4a5c      	ldr	r2, [pc, #368]	; (80829c4 <HAL_GPIO_DeInit+0x200>)
 8082852:	4293      	cmp	r3, r2
 8082854:	d013      	beq.n	808287e <HAL_GPIO_DeInit+0xba>
 8082856:	687b      	ldr	r3, [r7, #4]
 8082858:	4a5b      	ldr	r2, [pc, #364]	; (80829c8 <HAL_GPIO_DeInit+0x204>)
 808285a:	4293      	cmp	r3, r2
 808285c:	d00d      	beq.n	808287a <HAL_GPIO_DeInit+0xb6>
 808285e:	687b      	ldr	r3, [r7, #4]
 8082860:	4a5a      	ldr	r2, [pc, #360]	; (80829cc <HAL_GPIO_DeInit+0x208>)
 8082862:	4293      	cmp	r3, r2
 8082864:	d007      	beq.n	8082876 <HAL_GPIO_DeInit+0xb2>
 8082866:	687b      	ldr	r3, [r7, #4]
 8082868:	4a59      	ldr	r2, [pc, #356]	; (80829d0 <HAL_GPIO_DeInit+0x20c>)
 808286a:	4293      	cmp	r3, r2
 808286c:	d101      	bne.n	8082872 <HAL_GPIO_DeInit+0xae>
 808286e:	2309      	movs	r3, #9
 8082870:	e012      	b.n	8082898 <HAL_GPIO_DeInit+0xd4>
 8082872:	230a      	movs	r3, #10
 8082874:	e010      	b.n	8082898 <HAL_GPIO_DeInit+0xd4>
 8082876:	2308      	movs	r3, #8
 8082878:	e00e      	b.n	8082898 <HAL_GPIO_DeInit+0xd4>
 808287a:	2307      	movs	r3, #7
 808287c:	e00c      	b.n	8082898 <HAL_GPIO_DeInit+0xd4>
 808287e:	2306      	movs	r3, #6
 8082880:	e00a      	b.n	8082898 <HAL_GPIO_DeInit+0xd4>
 8082882:	2305      	movs	r3, #5
 8082884:	e008      	b.n	8082898 <HAL_GPIO_DeInit+0xd4>
 8082886:	2304      	movs	r3, #4
 8082888:	e006      	b.n	8082898 <HAL_GPIO_DeInit+0xd4>
 808288a:	2303      	movs	r3, #3
 808288c:	e004      	b.n	8082898 <HAL_GPIO_DeInit+0xd4>
 808288e:	2302      	movs	r3, #2
 8082890:	e002      	b.n	8082898 <HAL_GPIO_DeInit+0xd4>
 8082892:	2301      	movs	r3, #1
 8082894:	e000      	b.n	8082898 <HAL_GPIO_DeInit+0xd4>
 8082896:	2300      	movs	r3, #0
 8082898:	697a      	ldr	r2, [r7, #20]
 808289a:	f002 0203 	and.w	r2, r2, #3
 808289e:	0092      	lsls	r2, r2, #2
 80828a0:	4093      	lsls	r3, r2
 80828a2:	68ba      	ldr	r2, [r7, #8]
 80828a4:	429a      	cmp	r2, r3
 80828a6:	d132      	bne.n	808290e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80828a8:	697b      	ldr	r3, [r7, #20]
 80828aa:	f003 0303 	and.w	r3, r3, #3
 80828ae:	009b      	lsls	r3, r3, #2
 80828b0:	220f      	movs	r2, #15
 80828b2:	fa02 f303 	lsl.w	r3, r2, r3
 80828b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80828b8:	4a3b      	ldr	r2, [pc, #236]	; (80829a8 <HAL_GPIO_DeInit+0x1e4>)
 80828ba:	697b      	ldr	r3, [r7, #20]
 80828bc:	089b      	lsrs	r3, r3, #2
 80828be:	3302      	adds	r3, #2
 80828c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80828c4:	68bb      	ldr	r3, [r7, #8]
 80828c6:	43da      	mvns	r2, r3
 80828c8:	4837      	ldr	r0, [pc, #220]	; (80829a8 <HAL_GPIO_DeInit+0x1e4>)
 80828ca:	697b      	ldr	r3, [r7, #20]
 80828cc:	089b      	lsrs	r3, r3, #2
 80828ce:	400a      	ands	r2, r1
 80828d0:	3302      	adds	r3, #2
 80828d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80828d6:	4b3f      	ldr	r3, [pc, #252]	; (80829d4 <HAL_GPIO_DeInit+0x210>)
 80828d8:	681a      	ldr	r2, [r3, #0]
 80828da:	68fb      	ldr	r3, [r7, #12]
 80828dc:	43db      	mvns	r3, r3
 80828de:	493d      	ldr	r1, [pc, #244]	; (80829d4 <HAL_GPIO_DeInit+0x210>)
 80828e0:	4013      	ands	r3, r2
 80828e2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80828e4:	4b3b      	ldr	r3, [pc, #236]	; (80829d4 <HAL_GPIO_DeInit+0x210>)
 80828e6:	685a      	ldr	r2, [r3, #4]
 80828e8:	68fb      	ldr	r3, [r7, #12]
 80828ea:	43db      	mvns	r3, r3
 80828ec:	4939      	ldr	r1, [pc, #228]	; (80829d4 <HAL_GPIO_DeInit+0x210>)
 80828ee:	4013      	ands	r3, r2
 80828f0:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80828f2:	4b38      	ldr	r3, [pc, #224]	; (80829d4 <HAL_GPIO_DeInit+0x210>)
 80828f4:	689a      	ldr	r2, [r3, #8]
 80828f6:	68fb      	ldr	r3, [r7, #12]
 80828f8:	43db      	mvns	r3, r3
 80828fa:	4936      	ldr	r1, [pc, #216]	; (80829d4 <HAL_GPIO_DeInit+0x210>)
 80828fc:	4013      	ands	r3, r2
 80828fe:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8082900:	4b34      	ldr	r3, [pc, #208]	; (80829d4 <HAL_GPIO_DeInit+0x210>)
 8082902:	68da      	ldr	r2, [r3, #12]
 8082904:	68fb      	ldr	r3, [r7, #12]
 8082906:	43db      	mvns	r3, r3
 8082908:	4932      	ldr	r1, [pc, #200]	; (80829d4 <HAL_GPIO_DeInit+0x210>)
 808290a:	4013      	ands	r3, r2
 808290c:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 808290e:	687b      	ldr	r3, [r7, #4]
 8082910:	681a      	ldr	r2, [r3, #0]
 8082912:	697b      	ldr	r3, [r7, #20]
 8082914:	005b      	lsls	r3, r3, #1
 8082916:	2103      	movs	r1, #3
 8082918:	fa01 f303 	lsl.w	r3, r1, r3
 808291c:	43db      	mvns	r3, r3
 808291e:	401a      	ands	r2, r3
 8082920:	687b      	ldr	r3, [r7, #4]
 8082922:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8082924:	697b      	ldr	r3, [r7, #20]
 8082926:	08da      	lsrs	r2, r3, #3
 8082928:	687b      	ldr	r3, [r7, #4]
 808292a:	3208      	adds	r2, #8
 808292c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8082930:	697b      	ldr	r3, [r7, #20]
 8082932:	f003 0307 	and.w	r3, r3, #7
 8082936:	009b      	lsls	r3, r3, #2
 8082938:	220f      	movs	r2, #15
 808293a:	fa02 f303 	lsl.w	r3, r2, r3
 808293e:	43db      	mvns	r3, r3
 8082940:	697a      	ldr	r2, [r7, #20]
 8082942:	08d2      	lsrs	r2, r2, #3
 8082944:	4019      	ands	r1, r3
 8082946:	687b      	ldr	r3, [r7, #4]
 8082948:	3208      	adds	r2, #8
 808294a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 808294e:	687b      	ldr	r3, [r7, #4]
 8082950:	689a      	ldr	r2, [r3, #8]
 8082952:	697b      	ldr	r3, [r7, #20]
 8082954:	005b      	lsls	r3, r3, #1
 8082956:	2103      	movs	r1, #3
 8082958:	fa01 f303 	lsl.w	r3, r1, r3
 808295c:	43db      	mvns	r3, r3
 808295e:	401a      	ands	r2, r3
 8082960:	687b      	ldr	r3, [r7, #4]
 8082962:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8082964:	687b      	ldr	r3, [r7, #4]
 8082966:	685a      	ldr	r2, [r3, #4]
 8082968:	2101      	movs	r1, #1
 808296a:	697b      	ldr	r3, [r7, #20]
 808296c:	fa01 f303 	lsl.w	r3, r1, r3
 8082970:	43db      	mvns	r3, r3
 8082972:	401a      	ands	r2, r3
 8082974:	687b      	ldr	r3, [r7, #4]
 8082976:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8082978:	687b      	ldr	r3, [r7, #4]
 808297a:	68da      	ldr	r2, [r3, #12]
 808297c:	697b      	ldr	r3, [r7, #20]
 808297e:	005b      	lsls	r3, r3, #1
 8082980:	2103      	movs	r1, #3
 8082982:	fa01 f303 	lsl.w	r3, r1, r3
 8082986:	43db      	mvns	r3, r3
 8082988:	401a      	ands	r2, r3
 808298a:	687b      	ldr	r3, [r7, #4]
 808298c:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 808298e:	697b      	ldr	r3, [r7, #20]
 8082990:	3301      	adds	r3, #1
 8082992:	617b      	str	r3, [r7, #20]
 8082994:	697b      	ldr	r3, [r7, #20]
 8082996:	2b0f      	cmp	r3, #15
 8082998:	f67f af22 	bls.w	80827e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 808299c:	bf00      	nop
 808299e:	371c      	adds	r7, #28
 80829a0:	46bd      	mov	sp, r7
 80829a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80829a6:	4770      	bx	lr
 80829a8:	40013800 	.word	0x40013800
 80829ac:	40020000 	.word	0x40020000
 80829b0:	40020400 	.word	0x40020400
 80829b4:	40020800 	.word	0x40020800
 80829b8:	40020c00 	.word	0x40020c00
 80829bc:	40021000 	.word	0x40021000
 80829c0:	40021400 	.word	0x40021400
 80829c4:	40021800 	.word	0x40021800
 80829c8:	40021c00 	.word	0x40021c00
 80829cc:	40022000 	.word	0x40022000
 80829d0:	40022400 	.word	0x40022400
 80829d4:	40013c00 	.word	0x40013c00

080829d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80829d8:	b480      	push	{r7}
 80829da:	b085      	sub	sp, #20
 80829dc:	af00      	add	r7, sp, #0
 80829de:	6078      	str	r0, [r7, #4]
 80829e0:	460b      	mov	r3, r1
 80829e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80829e4:	687b      	ldr	r3, [r7, #4]
 80829e6:	691a      	ldr	r2, [r3, #16]
 80829e8:	887b      	ldrh	r3, [r7, #2]
 80829ea:	4013      	ands	r3, r2
 80829ec:	2b00      	cmp	r3, #0
 80829ee:	d002      	beq.n	80829f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80829f0:	2301      	movs	r3, #1
 80829f2:	73fb      	strb	r3, [r7, #15]
 80829f4:	e001      	b.n	80829fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80829f6:	2300      	movs	r3, #0
 80829f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80829fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80829fc:	4618      	mov	r0, r3
 80829fe:	3714      	adds	r7, #20
 8082a00:	46bd      	mov	sp, r7
 8082a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082a06:	4770      	bx	lr

08082a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8082a08:	b480      	push	{r7}
 8082a0a:	b083      	sub	sp, #12
 8082a0c:	af00      	add	r7, sp, #0
 8082a0e:	6078      	str	r0, [r7, #4]
 8082a10:	460b      	mov	r3, r1
 8082a12:	807b      	strh	r3, [r7, #2]
 8082a14:	4613      	mov	r3, r2
 8082a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8082a18:	787b      	ldrb	r3, [r7, #1]
 8082a1a:	2b00      	cmp	r3, #0
 8082a1c:	d003      	beq.n	8082a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8082a1e:	887a      	ldrh	r2, [r7, #2]
 8082a20:	687b      	ldr	r3, [r7, #4]
 8082a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8082a24:	e003      	b.n	8082a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8082a26:	887b      	ldrh	r3, [r7, #2]
 8082a28:	041a      	lsls	r2, r3, #16
 8082a2a:	687b      	ldr	r3, [r7, #4]
 8082a2c:	619a      	str	r2, [r3, #24]
}
 8082a2e:	bf00      	nop
 8082a30:	370c      	adds	r7, #12
 8082a32:	46bd      	mov	sp, r7
 8082a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082a38:	4770      	bx	lr

08082a3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8082a3a:	b480      	push	{r7}
 8082a3c:	b083      	sub	sp, #12
 8082a3e:	af00      	add	r7, sp, #0
 8082a40:	6078      	str	r0, [r7, #4]
 8082a42:	460b      	mov	r3, r1
 8082a44:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8082a46:	687b      	ldr	r3, [r7, #4]
 8082a48:	695a      	ldr	r2, [r3, #20]
 8082a4a:	887b      	ldrh	r3, [r7, #2]
 8082a4c:	401a      	ands	r2, r3
 8082a4e:	887b      	ldrh	r3, [r7, #2]
 8082a50:	429a      	cmp	r2, r3
 8082a52:	d104      	bne.n	8082a5e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8082a54:	887b      	ldrh	r3, [r7, #2]
 8082a56:	041a      	lsls	r2, r3, #16
 8082a58:	687b      	ldr	r3, [r7, #4]
 8082a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8082a5c:	e002      	b.n	8082a64 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8082a5e:	887a      	ldrh	r2, [r7, #2]
 8082a60:	687b      	ldr	r3, [r7, #4]
 8082a62:	619a      	str	r2, [r3, #24]
}
 8082a64:	bf00      	nop
 8082a66:	370c      	adds	r7, #12
 8082a68:	46bd      	mov	sp, r7
 8082a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082a6e:	4770      	bx	lr

08082a70 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8082a70:	b480      	push	{r7}
 8082a72:	b085      	sub	sp, #20
 8082a74:	af00      	add	r7, sp, #0
 8082a76:	6078      	str	r0, [r7, #4]
 8082a78:	460b      	mov	r3, r1
 8082a7a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8082a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8082a80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8082a82:	887a      	ldrh	r2, [r7, #2]
 8082a84:	68fb      	ldr	r3, [r7, #12]
 8082a86:	4313      	orrs	r3, r2
 8082a88:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8082a8a:	68fa      	ldr	r2, [r7, #12]
 8082a8c:	687b      	ldr	r3, [r7, #4]
 8082a8e:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8082a90:	887a      	ldrh	r2, [r7, #2]
 8082a92:	687b      	ldr	r3, [r7, #4]
 8082a94:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8082a96:	68fa      	ldr	r2, [r7, #12]
 8082a98:	687b      	ldr	r3, [r7, #4]
 8082a9a:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8082a9c:	687b      	ldr	r3, [r7, #4]
 8082a9e:	69db      	ldr	r3, [r3, #28]
 8082aa0:	60fb      	str	r3, [r7, #12]

 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8082aa2:	687b      	ldr	r3, [r7, #4]
 8082aa4:	69db      	ldr	r3, [r3, #28]
 8082aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8082aaa:	2b00      	cmp	r3, #0
 8082aac:	d001      	beq.n	8082ab2 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 8082aae:	2300      	movs	r3, #0
 8082ab0:	e000      	b.n	8082ab4 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 8082ab2:	2301      	movs	r3, #1
  }
}
 8082ab4:	4618      	mov	r0, r3
 8082ab6:	3714      	adds	r7, #20
 8082ab8:	46bd      	mov	sp, r7
 8082aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082abe:	4770      	bx	lr

08082ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8082ac0:	b580      	push	{r7, lr}
 8082ac2:	b082      	sub	sp, #8
 8082ac4:	af00      	add	r7, sp, #0
 8082ac6:	4603      	mov	r3, r0
 8082ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8082aca:	4b08      	ldr	r3, [pc, #32]	; (8082aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8082acc:	695a      	ldr	r2, [r3, #20]
 8082ace:	88fb      	ldrh	r3, [r7, #6]
 8082ad0:	4013      	ands	r3, r2
 8082ad2:	2b00      	cmp	r3, #0
 8082ad4:	d006      	beq.n	8082ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8082ad6:	4a05      	ldr	r2, [pc, #20]	; (8082aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8082ad8:	88fb      	ldrh	r3, [r7, #6]
 8082ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8082adc:	88fb      	ldrh	r3, [r7, #6]
 8082ade:	4618      	mov	r0, r3
 8082ae0:	f000 f806 	bl	8082af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8082ae4:	bf00      	nop
 8082ae6:	3708      	adds	r7, #8
 8082ae8:	46bd      	mov	sp, r7
 8082aea:	bd80      	pop	{r7, pc}
 8082aec:	40013c00 	.word	0x40013c00

08082af0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8082af0:	b480      	push	{r7}
 8082af2:	b083      	sub	sp, #12
 8082af4:	af00      	add	r7, sp, #0
 8082af6:	4603      	mov	r3, r0
 8082af8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8082afa:	bf00      	nop
 8082afc:	370c      	adds	r7, #12
 8082afe:	46bd      	mov	sp, r7
 8082b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082b04:	4770      	bx	lr
 8082b06:	bf00      	nop
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8082b08:	b480      	push	{r7}
 8082b0a:	af00      	add	r7, sp, #0
  return HAL_OK;
 8082b0c:	2300      	movs	r3, #0
}
 8082b0e:	4618      	mov	r0, r3
 8082b10:	46bd      	mov	sp, r7
 8082b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082b16:	4770      	bx	lr

08082b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8082b18:	b580      	push	{r7, lr}
 8082b1a:	b086      	sub	sp, #24
 8082b1c:	af00      	add	r7, sp, #0
 8082b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8082b20:	687b      	ldr	r3, [r7, #4]
 8082b22:	2b00      	cmp	r3, #0
 8082b24:	d101      	bne.n	8082b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8082b26:	2301      	movs	r3, #1
 8082b28:	e22d      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8082b2a:	687b      	ldr	r3, [r7, #4]
 8082b2c:	681b      	ldr	r3, [r3, #0]
 8082b2e:	f003 0301 	and.w	r3, r3, #1
 8082b32:	2b00      	cmp	r3, #0
 8082b34:	d075      	beq.n	8082c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8082b36:	4ba3      	ldr	r3, [pc, #652]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082b38:	689b      	ldr	r3, [r3, #8]
 8082b3a:	f003 030c 	and.w	r3, r3, #12
 8082b3e:	2b04      	cmp	r3, #4
 8082b40:	d00c      	beq.n	8082b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8082b42:	4ba0      	ldr	r3, [pc, #640]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082b44:	689b      	ldr	r3, [r3, #8]
 8082b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8082b4a:	2b08      	cmp	r3, #8
 8082b4c:	d112      	bne.n	8082b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8082b4e:	4b9d      	ldr	r3, [pc, #628]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082b50:	685b      	ldr	r3, [r3, #4]
 8082b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8082b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8082b5a:	d10b      	bne.n	8082b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8082b5c:	4b99      	ldr	r3, [pc, #612]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082b5e:	681b      	ldr	r3, [r3, #0]
 8082b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8082b64:	2b00      	cmp	r3, #0
 8082b66:	d05b      	beq.n	8082c20 <HAL_RCC_OscConfig+0x108>
 8082b68:	687b      	ldr	r3, [r7, #4]
 8082b6a:	685b      	ldr	r3, [r3, #4]
 8082b6c:	2b00      	cmp	r3, #0
 8082b6e:	d157      	bne.n	8082c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8082b70:	2301      	movs	r3, #1
 8082b72:	e208      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8082b74:	687b      	ldr	r3, [r7, #4]
 8082b76:	685b      	ldr	r3, [r3, #4]
 8082b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8082b7c:	d106      	bne.n	8082b8c <HAL_RCC_OscConfig+0x74>
 8082b7e:	4b91      	ldr	r3, [pc, #580]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082b80:	681b      	ldr	r3, [r3, #0]
 8082b82:	4a90      	ldr	r2, [pc, #576]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8082b88:	6013      	str	r3, [r2, #0]
 8082b8a:	e01d      	b.n	8082bc8 <HAL_RCC_OscConfig+0xb0>
 8082b8c:	687b      	ldr	r3, [r7, #4]
 8082b8e:	685b      	ldr	r3, [r3, #4]
 8082b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8082b94:	d10c      	bne.n	8082bb0 <HAL_RCC_OscConfig+0x98>
 8082b96:	4b8b      	ldr	r3, [pc, #556]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082b98:	681b      	ldr	r3, [r3, #0]
 8082b9a:	4a8a      	ldr	r2, [pc, #552]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8082ba0:	6013      	str	r3, [r2, #0]
 8082ba2:	4b88      	ldr	r3, [pc, #544]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082ba4:	681b      	ldr	r3, [r3, #0]
 8082ba6:	4a87      	ldr	r2, [pc, #540]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8082bac:	6013      	str	r3, [r2, #0]
 8082bae:	e00b      	b.n	8082bc8 <HAL_RCC_OscConfig+0xb0>
 8082bb0:	4b84      	ldr	r3, [pc, #528]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082bb2:	681b      	ldr	r3, [r3, #0]
 8082bb4:	4a83      	ldr	r2, [pc, #524]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8082bba:	6013      	str	r3, [r2, #0]
 8082bbc:	4b81      	ldr	r3, [pc, #516]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082bbe:	681b      	ldr	r3, [r3, #0]
 8082bc0:	4a80      	ldr	r2, [pc, #512]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8082bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8082bc8:	687b      	ldr	r3, [r7, #4]
 8082bca:	685b      	ldr	r3, [r3, #4]
 8082bcc:	2b00      	cmp	r3, #0
 8082bce:	d013      	beq.n	8082bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8082bd0:	f7fe f968 	bl	8080ea4 <HAL_GetTick>
 8082bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8082bd6:	e008      	b.n	8082bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8082bd8:	f7fe f964 	bl	8080ea4 <HAL_GetTick>
 8082bdc:	4602      	mov	r2, r0
 8082bde:	693b      	ldr	r3, [r7, #16]
 8082be0:	1ad3      	subs	r3, r2, r3
 8082be2:	2b64      	cmp	r3, #100	; 0x64
 8082be4:	d901      	bls.n	8082bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8082be6:	2303      	movs	r3, #3
 8082be8:	e1cd      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8082bea:	4b76      	ldr	r3, [pc, #472]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082bec:	681b      	ldr	r3, [r3, #0]
 8082bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8082bf2:	2b00      	cmp	r3, #0
 8082bf4:	d0f0      	beq.n	8082bd8 <HAL_RCC_OscConfig+0xc0>
 8082bf6:	e014      	b.n	8082c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8082bf8:	f7fe f954 	bl	8080ea4 <HAL_GetTick>
 8082bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8082bfe:	e008      	b.n	8082c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8082c00:	f7fe f950 	bl	8080ea4 <HAL_GetTick>
 8082c04:	4602      	mov	r2, r0
 8082c06:	693b      	ldr	r3, [r7, #16]
 8082c08:	1ad3      	subs	r3, r2, r3
 8082c0a:	2b64      	cmp	r3, #100	; 0x64
 8082c0c:	d901      	bls.n	8082c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8082c0e:	2303      	movs	r3, #3
 8082c10:	e1b9      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8082c12:	4b6c      	ldr	r3, [pc, #432]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082c14:	681b      	ldr	r3, [r3, #0]
 8082c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8082c1a:	2b00      	cmp	r3, #0
 8082c1c:	d1f0      	bne.n	8082c00 <HAL_RCC_OscConfig+0xe8>
 8082c1e:	e000      	b.n	8082c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8082c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8082c22:	687b      	ldr	r3, [r7, #4]
 8082c24:	681b      	ldr	r3, [r3, #0]
 8082c26:	f003 0302 	and.w	r3, r3, #2
 8082c2a:	2b00      	cmp	r3, #0
 8082c2c:	d063      	beq.n	8082cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8082c2e:	4b65      	ldr	r3, [pc, #404]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082c30:	689b      	ldr	r3, [r3, #8]
 8082c32:	f003 030c 	and.w	r3, r3, #12
 8082c36:	2b00      	cmp	r3, #0
 8082c38:	d00b      	beq.n	8082c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8082c3a:	4b62      	ldr	r3, [pc, #392]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082c3c:	689b      	ldr	r3, [r3, #8]
 8082c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8082c42:	2b08      	cmp	r3, #8
 8082c44:	d11c      	bne.n	8082c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8082c46:	4b5f      	ldr	r3, [pc, #380]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082c48:	685b      	ldr	r3, [r3, #4]
 8082c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8082c4e:	2b00      	cmp	r3, #0
 8082c50:	d116      	bne.n	8082c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8082c52:	4b5c      	ldr	r3, [pc, #368]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082c54:	681b      	ldr	r3, [r3, #0]
 8082c56:	f003 0302 	and.w	r3, r3, #2
 8082c5a:	2b00      	cmp	r3, #0
 8082c5c:	d005      	beq.n	8082c6a <HAL_RCC_OscConfig+0x152>
 8082c5e:	687b      	ldr	r3, [r7, #4]
 8082c60:	68db      	ldr	r3, [r3, #12]
 8082c62:	2b01      	cmp	r3, #1
 8082c64:	d001      	beq.n	8082c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8082c66:	2301      	movs	r3, #1
 8082c68:	e18d      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8082c6a:	4b56      	ldr	r3, [pc, #344]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082c6c:	681b      	ldr	r3, [r3, #0]
 8082c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8082c72:	687b      	ldr	r3, [r7, #4]
 8082c74:	691b      	ldr	r3, [r3, #16]
 8082c76:	00db      	lsls	r3, r3, #3
 8082c78:	4952      	ldr	r1, [pc, #328]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082c7a:	4313      	orrs	r3, r2
 8082c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8082c7e:	e03a      	b.n	8082cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8082c80:	687b      	ldr	r3, [r7, #4]
 8082c82:	68db      	ldr	r3, [r3, #12]
 8082c84:	2b00      	cmp	r3, #0
 8082c86:	d020      	beq.n	8082cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8082c88:	4b4f      	ldr	r3, [pc, #316]	; (8082dc8 <HAL_RCC_OscConfig+0x2b0>)
 8082c8a:	2201      	movs	r2, #1
 8082c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8082c8e:	f7fe f909 	bl	8080ea4 <HAL_GetTick>
 8082c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8082c94:	e008      	b.n	8082ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8082c96:	f7fe f905 	bl	8080ea4 <HAL_GetTick>
 8082c9a:	4602      	mov	r2, r0
 8082c9c:	693b      	ldr	r3, [r7, #16]
 8082c9e:	1ad3      	subs	r3, r2, r3
 8082ca0:	2b02      	cmp	r3, #2
 8082ca2:	d901      	bls.n	8082ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8082ca4:	2303      	movs	r3, #3
 8082ca6:	e16e      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8082ca8:	4b46      	ldr	r3, [pc, #280]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082caa:	681b      	ldr	r3, [r3, #0]
 8082cac:	f003 0302 	and.w	r3, r3, #2
 8082cb0:	2b00      	cmp	r3, #0
 8082cb2:	d0f0      	beq.n	8082c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8082cb4:	4b43      	ldr	r3, [pc, #268]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082cb6:	681b      	ldr	r3, [r3, #0]
 8082cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8082cbc:	687b      	ldr	r3, [r7, #4]
 8082cbe:	691b      	ldr	r3, [r3, #16]
 8082cc0:	00db      	lsls	r3, r3, #3
 8082cc2:	4940      	ldr	r1, [pc, #256]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082cc4:	4313      	orrs	r3, r2
 8082cc6:	600b      	str	r3, [r1, #0]
 8082cc8:	e015      	b.n	8082cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8082cca:	4b3f      	ldr	r3, [pc, #252]	; (8082dc8 <HAL_RCC_OscConfig+0x2b0>)
 8082ccc:	2200      	movs	r2, #0
 8082cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8082cd0:	f7fe f8e8 	bl	8080ea4 <HAL_GetTick>
 8082cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8082cd6:	e008      	b.n	8082cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8082cd8:	f7fe f8e4 	bl	8080ea4 <HAL_GetTick>
 8082cdc:	4602      	mov	r2, r0
 8082cde:	693b      	ldr	r3, [r7, #16]
 8082ce0:	1ad3      	subs	r3, r2, r3
 8082ce2:	2b02      	cmp	r3, #2
 8082ce4:	d901      	bls.n	8082cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8082ce6:	2303      	movs	r3, #3
 8082ce8:	e14d      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8082cea:	4b36      	ldr	r3, [pc, #216]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082cec:	681b      	ldr	r3, [r3, #0]
 8082cee:	f003 0302 	and.w	r3, r3, #2
 8082cf2:	2b00      	cmp	r3, #0
 8082cf4:	d1f0      	bne.n	8082cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8082cf6:	687b      	ldr	r3, [r7, #4]
 8082cf8:	681b      	ldr	r3, [r3, #0]
 8082cfa:	f003 0308 	and.w	r3, r3, #8
 8082cfe:	2b00      	cmp	r3, #0
 8082d00:	d030      	beq.n	8082d64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8082d02:	687b      	ldr	r3, [r7, #4]
 8082d04:	695b      	ldr	r3, [r3, #20]
 8082d06:	2b00      	cmp	r3, #0
 8082d08:	d016      	beq.n	8082d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8082d0a:	4b30      	ldr	r3, [pc, #192]	; (8082dcc <HAL_RCC_OscConfig+0x2b4>)
 8082d0c:	2201      	movs	r2, #1
 8082d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8082d10:	f7fe f8c8 	bl	8080ea4 <HAL_GetTick>
 8082d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8082d16:	e008      	b.n	8082d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8082d18:	f7fe f8c4 	bl	8080ea4 <HAL_GetTick>
 8082d1c:	4602      	mov	r2, r0
 8082d1e:	693b      	ldr	r3, [r7, #16]
 8082d20:	1ad3      	subs	r3, r2, r3
 8082d22:	2b02      	cmp	r3, #2
 8082d24:	d901      	bls.n	8082d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8082d26:	2303      	movs	r3, #3
 8082d28:	e12d      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8082d2a:	4b26      	ldr	r3, [pc, #152]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8082d2e:	f003 0302 	and.w	r3, r3, #2
 8082d32:	2b00      	cmp	r3, #0
 8082d34:	d0f0      	beq.n	8082d18 <HAL_RCC_OscConfig+0x200>
 8082d36:	e015      	b.n	8082d64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8082d38:	4b24      	ldr	r3, [pc, #144]	; (8082dcc <HAL_RCC_OscConfig+0x2b4>)
 8082d3a:	2200      	movs	r2, #0
 8082d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8082d3e:	f7fe f8b1 	bl	8080ea4 <HAL_GetTick>
 8082d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8082d44:	e008      	b.n	8082d58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8082d46:	f7fe f8ad 	bl	8080ea4 <HAL_GetTick>
 8082d4a:	4602      	mov	r2, r0
 8082d4c:	693b      	ldr	r3, [r7, #16]
 8082d4e:	1ad3      	subs	r3, r2, r3
 8082d50:	2b02      	cmp	r3, #2
 8082d52:	d901      	bls.n	8082d58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8082d54:	2303      	movs	r3, #3
 8082d56:	e116      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8082d58:	4b1a      	ldr	r3, [pc, #104]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8082d5c:	f003 0302 	and.w	r3, r3, #2
 8082d60:	2b00      	cmp	r3, #0
 8082d62:	d1f0      	bne.n	8082d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8082d64:	687b      	ldr	r3, [r7, #4]
 8082d66:	681b      	ldr	r3, [r3, #0]
 8082d68:	f003 0304 	and.w	r3, r3, #4
 8082d6c:	2b00      	cmp	r3, #0
 8082d6e:	f000 80a0 	beq.w	8082eb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8082d72:	2300      	movs	r3, #0
 8082d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8082d76:	4b13      	ldr	r3, [pc, #76]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8082d7e:	2b00      	cmp	r3, #0
 8082d80:	d10f      	bne.n	8082da2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8082d82:	2300      	movs	r3, #0
 8082d84:	60fb      	str	r3, [r7, #12]
 8082d86:	4b0f      	ldr	r3, [pc, #60]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082d8a:	4a0e      	ldr	r2, [pc, #56]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8082d90:	6413      	str	r3, [r2, #64]	; 0x40
 8082d92:	4b0c      	ldr	r3, [pc, #48]	; (8082dc4 <HAL_RCC_OscConfig+0x2ac>)
 8082d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8082d9a:	60fb      	str	r3, [r7, #12]
 8082d9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8082d9e:	2301      	movs	r3, #1
 8082da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8082da2:	4b0b      	ldr	r3, [pc, #44]	; (8082dd0 <HAL_RCC_OscConfig+0x2b8>)
 8082da4:	681b      	ldr	r3, [r3, #0]
 8082da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8082daa:	2b00      	cmp	r3, #0
 8082dac:	d121      	bne.n	8082df2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8082dae:	4b08      	ldr	r3, [pc, #32]	; (8082dd0 <HAL_RCC_OscConfig+0x2b8>)
 8082db0:	681b      	ldr	r3, [r3, #0]
 8082db2:	4a07      	ldr	r2, [pc, #28]	; (8082dd0 <HAL_RCC_OscConfig+0x2b8>)
 8082db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8082db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8082dba:	f7fe f873 	bl	8080ea4 <HAL_GetTick>
 8082dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8082dc0:	e011      	b.n	8082de6 <HAL_RCC_OscConfig+0x2ce>
 8082dc2:	bf00      	nop
 8082dc4:	40023800 	.word	0x40023800
 8082dc8:	42470000 	.word	0x42470000
 8082dcc:	42470e80 	.word	0x42470e80
 8082dd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8082dd4:	f7fe f866 	bl	8080ea4 <HAL_GetTick>
 8082dd8:	4602      	mov	r2, r0
 8082dda:	693b      	ldr	r3, [r7, #16]
 8082ddc:	1ad3      	subs	r3, r2, r3
 8082dde:	2b02      	cmp	r3, #2
 8082de0:	d901      	bls.n	8082de6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8082de2:	2303      	movs	r3, #3
 8082de4:	e0cf      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8082de6:	4b6a      	ldr	r3, [pc, #424]	; (8082f90 <HAL_RCC_OscConfig+0x478>)
 8082de8:	681b      	ldr	r3, [r3, #0]
 8082dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8082dee:	2b00      	cmp	r3, #0
 8082df0:	d0f0      	beq.n	8082dd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8082df2:	687b      	ldr	r3, [r7, #4]
 8082df4:	689b      	ldr	r3, [r3, #8]
 8082df6:	2b01      	cmp	r3, #1
 8082df8:	d106      	bne.n	8082e08 <HAL_RCC_OscConfig+0x2f0>
 8082dfa:	4b66      	ldr	r3, [pc, #408]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8082dfe:	4a65      	ldr	r2, [pc, #404]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e00:	f043 0301 	orr.w	r3, r3, #1
 8082e04:	6713      	str	r3, [r2, #112]	; 0x70
 8082e06:	e01c      	b.n	8082e42 <HAL_RCC_OscConfig+0x32a>
 8082e08:	687b      	ldr	r3, [r7, #4]
 8082e0a:	689b      	ldr	r3, [r3, #8]
 8082e0c:	2b05      	cmp	r3, #5
 8082e0e:	d10c      	bne.n	8082e2a <HAL_RCC_OscConfig+0x312>
 8082e10:	4b60      	ldr	r3, [pc, #384]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8082e14:	4a5f      	ldr	r2, [pc, #380]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e16:	f043 0304 	orr.w	r3, r3, #4
 8082e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8082e1c:	4b5d      	ldr	r3, [pc, #372]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8082e20:	4a5c      	ldr	r2, [pc, #368]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e22:	f043 0301 	orr.w	r3, r3, #1
 8082e26:	6713      	str	r3, [r2, #112]	; 0x70
 8082e28:	e00b      	b.n	8082e42 <HAL_RCC_OscConfig+0x32a>
 8082e2a:	4b5a      	ldr	r3, [pc, #360]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8082e2e:	4a59      	ldr	r2, [pc, #356]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e30:	f023 0301 	bic.w	r3, r3, #1
 8082e34:	6713      	str	r3, [r2, #112]	; 0x70
 8082e36:	4b57      	ldr	r3, [pc, #348]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8082e3a:	4a56      	ldr	r2, [pc, #344]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e3c:	f023 0304 	bic.w	r3, r3, #4
 8082e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8082e42:	687b      	ldr	r3, [r7, #4]
 8082e44:	689b      	ldr	r3, [r3, #8]
 8082e46:	2b00      	cmp	r3, #0
 8082e48:	d015      	beq.n	8082e76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8082e4a:	f7fe f82b 	bl	8080ea4 <HAL_GetTick>
 8082e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8082e50:	e00a      	b.n	8082e68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8082e52:	f7fe f827 	bl	8080ea4 <HAL_GetTick>
 8082e56:	4602      	mov	r2, r0
 8082e58:	693b      	ldr	r3, [r7, #16]
 8082e5a:	1ad3      	subs	r3, r2, r3
 8082e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8082e60:	4293      	cmp	r3, r2
 8082e62:	d901      	bls.n	8082e68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8082e64:	2303      	movs	r3, #3
 8082e66:	e08e      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8082e68:	4b4a      	ldr	r3, [pc, #296]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8082e6c:	f003 0302 	and.w	r3, r3, #2
 8082e70:	2b00      	cmp	r3, #0
 8082e72:	d0ee      	beq.n	8082e52 <HAL_RCC_OscConfig+0x33a>
 8082e74:	e014      	b.n	8082ea0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8082e76:	f7fe f815 	bl	8080ea4 <HAL_GetTick>
 8082e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8082e7c:	e00a      	b.n	8082e94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8082e7e:	f7fe f811 	bl	8080ea4 <HAL_GetTick>
 8082e82:	4602      	mov	r2, r0
 8082e84:	693b      	ldr	r3, [r7, #16]
 8082e86:	1ad3      	subs	r3, r2, r3
 8082e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8082e8c:	4293      	cmp	r3, r2
 8082e8e:	d901      	bls.n	8082e94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8082e90:	2303      	movs	r3, #3
 8082e92:	e078      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8082e94:	4b3f      	ldr	r3, [pc, #252]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8082e98:	f003 0302 	and.w	r3, r3, #2
 8082e9c:	2b00      	cmp	r3, #0
 8082e9e:	d1ee      	bne.n	8082e7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8082ea0:	7dfb      	ldrb	r3, [r7, #23]
 8082ea2:	2b01      	cmp	r3, #1
 8082ea4:	d105      	bne.n	8082eb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8082ea6:	4b3b      	ldr	r3, [pc, #236]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082eaa:	4a3a      	ldr	r2, [pc, #232]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8082eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8082eb2:	687b      	ldr	r3, [r7, #4]
 8082eb4:	699b      	ldr	r3, [r3, #24]
 8082eb6:	2b00      	cmp	r3, #0
 8082eb8:	d064      	beq.n	8082f84 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8082eba:	4b36      	ldr	r3, [pc, #216]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082ebc:	689b      	ldr	r3, [r3, #8]
 8082ebe:	f003 030c 	and.w	r3, r3, #12
 8082ec2:	2b08      	cmp	r3, #8
 8082ec4:	d05c      	beq.n	8082f80 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8082ec6:	687b      	ldr	r3, [r7, #4]
 8082ec8:	699b      	ldr	r3, [r3, #24]
 8082eca:	2b02      	cmp	r3, #2
 8082ecc:	d141      	bne.n	8082f52 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8082ece:	4b32      	ldr	r3, [pc, #200]	; (8082f98 <HAL_RCC_OscConfig+0x480>)
 8082ed0:	2200      	movs	r2, #0
 8082ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8082ed4:	f7fd ffe6 	bl	8080ea4 <HAL_GetTick>
 8082ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8082eda:	e008      	b.n	8082eee <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8082edc:	f7fd ffe2 	bl	8080ea4 <HAL_GetTick>
 8082ee0:	4602      	mov	r2, r0
 8082ee2:	693b      	ldr	r3, [r7, #16]
 8082ee4:	1ad3      	subs	r3, r2, r3
 8082ee6:	2b02      	cmp	r3, #2
 8082ee8:	d901      	bls.n	8082eee <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8082eea:	2303      	movs	r3, #3
 8082eec:	e04b      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8082eee:	4b29      	ldr	r3, [pc, #164]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082ef0:	681b      	ldr	r3, [r3, #0]
 8082ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8082ef6:	2b00      	cmp	r3, #0
 8082ef8:	d1f0      	bne.n	8082edc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8082efa:	687b      	ldr	r3, [r7, #4]
 8082efc:	69da      	ldr	r2, [r3, #28]
 8082efe:	687b      	ldr	r3, [r7, #4]
 8082f00:	6a1b      	ldr	r3, [r3, #32]
 8082f02:	431a      	orrs	r2, r3
 8082f04:	687b      	ldr	r3, [r7, #4]
 8082f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082f08:	019b      	lsls	r3, r3, #6
 8082f0a:	431a      	orrs	r2, r3
 8082f0c:	687b      	ldr	r3, [r7, #4]
 8082f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082f10:	085b      	lsrs	r3, r3, #1
 8082f12:	3b01      	subs	r3, #1
 8082f14:	041b      	lsls	r3, r3, #16
 8082f16:	431a      	orrs	r2, r3
 8082f18:	687b      	ldr	r3, [r7, #4]
 8082f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082f1c:	061b      	lsls	r3, r3, #24
 8082f1e:	491d      	ldr	r1, [pc, #116]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082f20:	4313      	orrs	r3, r2
 8082f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8082f24:	4b1c      	ldr	r3, [pc, #112]	; (8082f98 <HAL_RCC_OscConfig+0x480>)
 8082f26:	2201      	movs	r2, #1
 8082f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8082f2a:	f7fd ffbb 	bl	8080ea4 <HAL_GetTick>
 8082f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8082f30:	e008      	b.n	8082f44 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8082f32:	f7fd ffb7 	bl	8080ea4 <HAL_GetTick>
 8082f36:	4602      	mov	r2, r0
 8082f38:	693b      	ldr	r3, [r7, #16]
 8082f3a:	1ad3      	subs	r3, r2, r3
 8082f3c:	2b02      	cmp	r3, #2
 8082f3e:	d901      	bls.n	8082f44 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8082f40:	2303      	movs	r3, #3
 8082f42:	e020      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8082f44:	4b13      	ldr	r3, [pc, #76]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082f46:	681b      	ldr	r3, [r3, #0]
 8082f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8082f4c:	2b00      	cmp	r3, #0
 8082f4e:	d0f0      	beq.n	8082f32 <HAL_RCC_OscConfig+0x41a>
 8082f50:	e018      	b.n	8082f84 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8082f52:	4b11      	ldr	r3, [pc, #68]	; (8082f98 <HAL_RCC_OscConfig+0x480>)
 8082f54:	2200      	movs	r2, #0
 8082f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8082f58:	f7fd ffa4 	bl	8080ea4 <HAL_GetTick>
 8082f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8082f5e:	e008      	b.n	8082f72 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8082f60:	f7fd ffa0 	bl	8080ea4 <HAL_GetTick>
 8082f64:	4602      	mov	r2, r0
 8082f66:	693b      	ldr	r3, [r7, #16]
 8082f68:	1ad3      	subs	r3, r2, r3
 8082f6a:	2b02      	cmp	r3, #2
 8082f6c:	d901      	bls.n	8082f72 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8082f6e:	2303      	movs	r3, #3
 8082f70:	e009      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8082f72:	4b08      	ldr	r3, [pc, #32]	; (8082f94 <HAL_RCC_OscConfig+0x47c>)
 8082f74:	681b      	ldr	r3, [r3, #0]
 8082f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8082f7a:	2b00      	cmp	r3, #0
 8082f7c:	d1f0      	bne.n	8082f60 <HAL_RCC_OscConfig+0x448>
 8082f7e:	e001      	b.n	8082f84 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8082f80:	2301      	movs	r3, #1
 8082f82:	e000      	b.n	8082f86 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8082f84:	2300      	movs	r3, #0
}
 8082f86:	4618      	mov	r0, r3
 8082f88:	3718      	adds	r7, #24
 8082f8a:	46bd      	mov	sp, r7
 8082f8c:	bd80      	pop	{r7, pc}
 8082f8e:	bf00      	nop
 8082f90:	40007000 	.word	0x40007000
 8082f94:	40023800 	.word	0x40023800
 8082f98:	42470060 	.word	0x42470060

08082f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8082f9c:	b580      	push	{r7, lr}
 8082f9e:	b084      	sub	sp, #16
 8082fa0:	af00      	add	r7, sp, #0
 8082fa2:	6078      	str	r0, [r7, #4]
 8082fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8082fa6:	687b      	ldr	r3, [r7, #4]
 8082fa8:	2b00      	cmp	r3, #0
 8082faa:	d101      	bne.n	8082fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8082fac:	2301      	movs	r3, #1
 8082fae:	e0ca      	b.n	8083146 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8082fb0:	4b67      	ldr	r3, [pc, #412]	; (8083150 <HAL_RCC_ClockConfig+0x1b4>)
 8082fb2:	681b      	ldr	r3, [r3, #0]
 8082fb4:	f003 030f 	and.w	r3, r3, #15
 8082fb8:	683a      	ldr	r2, [r7, #0]
 8082fba:	429a      	cmp	r2, r3
 8082fbc:	d90c      	bls.n	8082fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8082fbe:	4b64      	ldr	r3, [pc, #400]	; (8083150 <HAL_RCC_ClockConfig+0x1b4>)
 8082fc0:	683a      	ldr	r2, [r7, #0]
 8082fc2:	b2d2      	uxtb	r2, r2
 8082fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8082fc6:	4b62      	ldr	r3, [pc, #392]	; (8083150 <HAL_RCC_ClockConfig+0x1b4>)
 8082fc8:	681b      	ldr	r3, [r3, #0]
 8082fca:	f003 030f 	and.w	r3, r3, #15
 8082fce:	683a      	ldr	r2, [r7, #0]
 8082fd0:	429a      	cmp	r2, r3
 8082fd2:	d001      	beq.n	8082fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8082fd4:	2301      	movs	r3, #1
 8082fd6:	e0b6      	b.n	8083146 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8082fd8:	687b      	ldr	r3, [r7, #4]
 8082fda:	681b      	ldr	r3, [r3, #0]
 8082fdc:	f003 0302 	and.w	r3, r3, #2
 8082fe0:	2b00      	cmp	r3, #0
 8082fe2:	d020      	beq.n	8083026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8082fe4:	687b      	ldr	r3, [r7, #4]
 8082fe6:	681b      	ldr	r3, [r3, #0]
 8082fe8:	f003 0304 	and.w	r3, r3, #4
 8082fec:	2b00      	cmp	r3, #0
 8082fee:	d005      	beq.n	8082ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8082ff0:	4b58      	ldr	r3, [pc, #352]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 8082ff2:	689b      	ldr	r3, [r3, #8]
 8082ff4:	4a57      	ldr	r2, [pc, #348]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 8082ff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8082ffa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8082ffc:	687b      	ldr	r3, [r7, #4]
 8082ffe:	681b      	ldr	r3, [r3, #0]
 8083000:	f003 0308 	and.w	r3, r3, #8
 8083004:	2b00      	cmp	r3, #0
 8083006:	d005      	beq.n	8083014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8083008:	4b52      	ldr	r3, [pc, #328]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 808300a:	689b      	ldr	r3, [r3, #8]
 808300c:	4a51      	ldr	r2, [pc, #324]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 808300e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8083012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8083014:	4b4f      	ldr	r3, [pc, #316]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 8083016:	689b      	ldr	r3, [r3, #8]
 8083018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 808301c:	687b      	ldr	r3, [r7, #4]
 808301e:	689b      	ldr	r3, [r3, #8]
 8083020:	494c      	ldr	r1, [pc, #304]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 8083022:	4313      	orrs	r3, r2
 8083024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8083026:	687b      	ldr	r3, [r7, #4]
 8083028:	681b      	ldr	r3, [r3, #0]
 808302a:	f003 0301 	and.w	r3, r3, #1
 808302e:	2b00      	cmp	r3, #0
 8083030:	d044      	beq.n	80830bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8083032:	687b      	ldr	r3, [r7, #4]
 8083034:	685b      	ldr	r3, [r3, #4]
 8083036:	2b01      	cmp	r3, #1
 8083038:	d107      	bne.n	808304a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 808303a:	4b46      	ldr	r3, [pc, #280]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 808303c:	681b      	ldr	r3, [r3, #0]
 808303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8083042:	2b00      	cmp	r3, #0
 8083044:	d119      	bne.n	808307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8083046:	2301      	movs	r3, #1
 8083048:	e07d      	b.n	8083146 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 808304a:	687b      	ldr	r3, [r7, #4]
 808304c:	685b      	ldr	r3, [r3, #4]
 808304e:	2b02      	cmp	r3, #2
 8083050:	d003      	beq.n	808305a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8083052:	687b      	ldr	r3, [r7, #4]
 8083054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8083056:	2b03      	cmp	r3, #3
 8083058:	d107      	bne.n	808306a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 808305a:	4b3e      	ldr	r3, [pc, #248]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 808305c:	681b      	ldr	r3, [r3, #0]
 808305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8083062:	2b00      	cmp	r3, #0
 8083064:	d109      	bne.n	808307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8083066:	2301      	movs	r3, #1
 8083068:	e06d      	b.n	8083146 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 808306a:	4b3a      	ldr	r3, [pc, #232]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 808306c:	681b      	ldr	r3, [r3, #0]
 808306e:	f003 0302 	and.w	r3, r3, #2
 8083072:	2b00      	cmp	r3, #0
 8083074:	d101      	bne.n	808307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8083076:	2301      	movs	r3, #1
 8083078:	e065      	b.n	8083146 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 808307a:	4b36      	ldr	r3, [pc, #216]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 808307c:	689b      	ldr	r3, [r3, #8]
 808307e:	f023 0203 	bic.w	r2, r3, #3
 8083082:	687b      	ldr	r3, [r7, #4]
 8083084:	685b      	ldr	r3, [r3, #4]
 8083086:	4933      	ldr	r1, [pc, #204]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 8083088:	4313      	orrs	r3, r2
 808308a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 808308c:	f7fd ff0a 	bl	8080ea4 <HAL_GetTick>
 8083090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8083092:	e00a      	b.n	80830aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8083094:	f7fd ff06 	bl	8080ea4 <HAL_GetTick>
 8083098:	4602      	mov	r2, r0
 808309a:	68fb      	ldr	r3, [r7, #12]
 808309c:	1ad3      	subs	r3, r2, r3
 808309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80830a2:	4293      	cmp	r3, r2
 80830a4:	d901      	bls.n	80830aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80830a6:	2303      	movs	r3, #3
 80830a8:	e04d      	b.n	8083146 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80830aa:	4b2a      	ldr	r3, [pc, #168]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 80830ac:	689b      	ldr	r3, [r3, #8]
 80830ae:	f003 020c 	and.w	r2, r3, #12
 80830b2:	687b      	ldr	r3, [r7, #4]
 80830b4:	685b      	ldr	r3, [r3, #4]
 80830b6:	009b      	lsls	r3, r3, #2
 80830b8:	429a      	cmp	r2, r3
 80830ba:	d1eb      	bne.n	8083094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80830bc:	4b24      	ldr	r3, [pc, #144]	; (8083150 <HAL_RCC_ClockConfig+0x1b4>)
 80830be:	681b      	ldr	r3, [r3, #0]
 80830c0:	f003 030f 	and.w	r3, r3, #15
 80830c4:	683a      	ldr	r2, [r7, #0]
 80830c6:	429a      	cmp	r2, r3
 80830c8:	d20c      	bcs.n	80830e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80830ca:	4b21      	ldr	r3, [pc, #132]	; (8083150 <HAL_RCC_ClockConfig+0x1b4>)
 80830cc:	683a      	ldr	r2, [r7, #0]
 80830ce:	b2d2      	uxtb	r2, r2
 80830d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80830d2:	4b1f      	ldr	r3, [pc, #124]	; (8083150 <HAL_RCC_ClockConfig+0x1b4>)
 80830d4:	681b      	ldr	r3, [r3, #0]
 80830d6:	f003 030f 	and.w	r3, r3, #15
 80830da:	683a      	ldr	r2, [r7, #0]
 80830dc:	429a      	cmp	r2, r3
 80830de:	d001      	beq.n	80830e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80830e0:	2301      	movs	r3, #1
 80830e2:	e030      	b.n	8083146 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80830e4:	687b      	ldr	r3, [r7, #4]
 80830e6:	681b      	ldr	r3, [r3, #0]
 80830e8:	f003 0304 	and.w	r3, r3, #4
 80830ec:	2b00      	cmp	r3, #0
 80830ee:	d008      	beq.n	8083102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80830f0:	4b18      	ldr	r3, [pc, #96]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 80830f2:	689b      	ldr	r3, [r3, #8]
 80830f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80830f8:	687b      	ldr	r3, [r7, #4]
 80830fa:	68db      	ldr	r3, [r3, #12]
 80830fc:	4915      	ldr	r1, [pc, #84]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 80830fe:	4313      	orrs	r3, r2
 8083100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8083102:	687b      	ldr	r3, [r7, #4]
 8083104:	681b      	ldr	r3, [r3, #0]
 8083106:	f003 0308 	and.w	r3, r3, #8
 808310a:	2b00      	cmp	r3, #0
 808310c:	d009      	beq.n	8083122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 808310e:	4b11      	ldr	r3, [pc, #68]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 8083110:	689b      	ldr	r3, [r3, #8]
 8083112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8083116:	687b      	ldr	r3, [r7, #4]
 8083118:	691b      	ldr	r3, [r3, #16]
 808311a:	00db      	lsls	r3, r3, #3
 808311c:	490d      	ldr	r1, [pc, #52]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 808311e:	4313      	orrs	r3, r2
 8083120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8083122:	f000 f89d 	bl	8083260 <HAL_RCC_GetSysClockFreq>
 8083126:	4601      	mov	r1, r0
 8083128:	4b0a      	ldr	r3, [pc, #40]	; (8083154 <HAL_RCC_ClockConfig+0x1b8>)
 808312a:	689b      	ldr	r3, [r3, #8]
 808312c:	091b      	lsrs	r3, r3, #4
 808312e:	f003 030f 	and.w	r3, r3, #15
 8083132:	4a09      	ldr	r2, [pc, #36]	; (8083158 <HAL_RCC_ClockConfig+0x1bc>)
 8083134:	5cd3      	ldrb	r3, [r2, r3]
 8083136:	fa21 f303 	lsr.w	r3, r1, r3
 808313a:	4a08      	ldr	r2, [pc, #32]	; (808315c <HAL_RCC_ClockConfig+0x1c0>)
 808313c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 808313e:	2000      	movs	r0, #0
 8083140:	f7fd fe6c 	bl	8080e1c <HAL_InitTick>

  return HAL_OK;
 8083144:	2300      	movs	r3, #0
}
 8083146:	4618      	mov	r0, r3
 8083148:	3710      	adds	r7, #16
 808314a:	46bd      	mov	sp, r7
 808314c:	bd80      	pop	{r7, pc}
 808314e:	bf00      	nop
 8083150:	40023c00 	.word	0x40023c00
 8083154:	40023800 	.word	0x40023800
 8083158:	0808bae8 	.word	0x0808bae8
 808315c:	20000000 	.word	0x20000000

08083160 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8083160:	b580      	push	{r7, lr}
 8083162:	b08c      	sub	sp, #48	; 0x30
 8083164:	af00      	add	r7, sp, #0
 8083166:	60f8      	str	r0, [r7, #12]
 8083168:	60b9      	str	r1, [r7, #8]
 808316a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 808316c:	68fb      	ldr	r3, [r7, #12]
 808316e:	2b00      	cmp	r3, #0
 8083170:	d129      	bne.n	80831c6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8083172:	2300      	movs	r3, #0
 8083174:	61bb      	str	r3, [r7, #24]
 8083176:	4b2b      	ldr	r3, [pc, #172]	; (8083224 <HAL_RCC_MCOConfig+0xc4>)
 8083178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808317a:	4a2a      	ldr	r2, [pc, #168]	; (8083224 <HAL_RCC_MCOConfig+0xc4>)
 808317c:	f043 0301 	orr.w	r3, r3, #1
 8083180:	6313      	str	r3, [r2, #48]	; 0x30
 8083182:	4b28      	ldr	r3, [pc, #160]	; (8083224 <HAL_RCC_MCOConfig+0xc4>)
 8083184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083186:	f003 0301 	and.w	r3, r3, #1
 808318a:	61bb      	str	r3, [r7, #24]
 808318c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 808318e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8083192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8083194:	2302      	movs	r3, #2
 8083196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8083198:	2303      	movs	r3, #3
 808319a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 808319c:	2300      	movs	r3, #0
 808319e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80831a0:	2300      	movs	r3, #0
 80831a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80831a4:	f107 031c 	add.w	r3, r7, #28
 80831a8:	4619      	mov	r1, r3
 80831aa:	481f      	ldr	r0, [pc, #124]	; (8083228 <HAL_RCC_MCOConfig+0xc8>)
 80831ac:	f7ff f960 	bl	8082470 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80831b0:	4b1c      	ldr	r3, [pc, #112]	; (8083224 <HAL_RCC_MCOConfig+0xc4>)
 80831b2:	689b      	ldr	r3, [r3, #8]
 80831b4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80831b8:	68b9      	ldr	r1, [r7, #8]
 80831ba:	687b      	ldr	r3, [r7, #4]
 80831bc:	430b      	orrs	r3, r1
 80831be:	4919      	ldr	r1, [pc, #100]	; (8083224 <HAL_RCC_MCOConfig+0xc4>)
 80831c0:	4313      	orrs	r3, r2
 80831c2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80831c4:	e029      	b.n	808321a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80831c6:	2300      	movs	r3, #0
 80831c8:	617b      	str	r3, [r7, #20]
 80831ca:	4b16      	ldr	r3, [pc, #88]	; (8083224 <HAL_RCC_MCOConfig+0xc4>)
 80831cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80831ce:	4a15      	ldr	r2, [pc, #84]	; (8083224 <HAL_RCC_MCOConfig+0xc4>)
 80831d0:	f043 0304 	orr.w	r3, r3, #4
 80831d4:	6313      	str	r3, [r2, #48]	; 0x30
 80831d6:	4b13      	ldr	r3, [pc, #76]	; (8083224 <HAL_RCC_MCOConfig+0xc4>)
 80831d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80831da:	f003 0304 	and.w	r3, r3, #4
 80831de:	617b      	str	r3, [r7, #20]
 80831e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80831e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80831e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80831e8:	2302      	movs	r3, #2
 80831ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80831ec:	2303      	movs	r3, #3
 80831ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80831f0:	2300      	movs	r3, #0
 80831f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80831f4:	2300      	movs	r3, #0
 80831f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80831f8:	f107 031c 	add.w	r3, r7, #28
 80831fc:	4619      	mov	r1, r3
 80831fe:	480b      	ldr	r0, [pc, #44]	; (808322c <HAL_RCC_MCOConfig+0xcc>)
 8083200:	f7ff f936 	bl	8082470 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8083204:	4b07      	ldr	r3, [pc, #28]	; (8083224 <HAL_RCC_MCOConfig+0xc4>)
 8083206:	689b      	ldr	r3, [r3, #8]
 8083208:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 808320c:	687b      	ldr	r3, [r7, #4]
 808320e:	00d9      	lsls	r1, r3, #3
 8083210:	68bb      	ldr	r3, [r7, #8]
 8083212:	430b      	orrs	r3, r1
 8083214:	4903      	ldr	r1, [pc, #12]	; (8083224 <HAL_RCC_MCOConfig+0xc4>)
 8083216:	4313      	orrs	r3, r2
 8083218:	608b      	str	r3, [r1, #8]
}
 808321a:	bf00      	nop
 808321c:	3730      	adds	r7, #48	; 0x30
 808321e:	46bd      	mov	sp, r7
 8083220:	bd80      	pop	{r7, pc}
 8083222:	bf00      	nop
 8083224:	40023800 	.word	0x40023800
 8083228:	40020000 	.word	0x40020000
 808322c:	40020800 	.word	0x40020800

08083230 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8083230:	b480      	push	{r7}
 8083232:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8083234:	4b03      	ldr	r3, [pc, #12]	; (8083244 <HAL_RCC_EnableCSS+0x14>)
 8083236:	2201      	movs	r2, #1
 8083238:	601a      	str	r2, [r3, #0]
}
 808323a:	bf00      	nop
 808323c:	46bd      	mov	sp, r7
 808323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083242:	4770      	bx	lr
 8083244:	4247004c 	.word	0x4247004c

08083248 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8083248:	b480      	push	{r7}
 808324a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 808324c:	4b03      	ldr	r3, [pc, #12]	; (808325c <HAL_RCC_DisableCSS+0x14>)
 808324e:	2200      	movs	r2, #0
 8083250:	601a      	str	r2, [r3, #0]
}
 8083252:	bf00      	nop
 8083254:	46bd      	mov	sp, r7
 8083256:	f85d 7b04 	ldr.w	r7, [sp], #4
 808325a:	4770      	bx	lr
 808325c:	4247004c 	.word	0x4247004c

08083260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8083260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083262:	b085      	sub	sp, #20
 8083264:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8083266:	2300      	movs	r3, #0
 8083268:	607b      	str	r3, [r7, #4]
 808326a:	2300      	movs	r3, #0
 808326c:	60fb      	str	r3, [r7, #12]
 808326e:	2300      	movs	r3, #0
 8083270:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8083272:	2300      	movs	r3, #0
 8083274:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8083276:	4b50      	ldr	r3, [pc, #320]	; (80833b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8083278:	689b      	ldr	r3, [r3, #8]
 808327a:	f003 030c 	and.w	r3, r3, #12
 808327e:	2b04      	cmp	r3, #4
 8083280:	d007      	beq.n	8083292 <HAL_RCC_GetSysClockFreq+0x32>
 8083282:	2b08      	cmp	r3, #8
 8083284:	d008      	beq.n	8083298 <HAL_RCC_GetSysClockFreq+0x38>
 8083286:	2b00      	cmp	r3, #0
 8083288:	f040 808d 	bne.w	80833a6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 808328c:	4b4b      	ldr	r3, [pc, #300]	; (80833bc <HAL_RCC_GetSysClockFreq+0x15c>)
 808328e:	60bb      	str	r3, [r7, #8]
       break;
 8083290:	e08c      	b.n	80833ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8083292:	4b4b      	ldr	r3, [pc, #300]	; (80833c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8083294:	60bb      	str	r3, [r7, #8]
      break;
 8083296:	e089      	b.n	80833ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8083298:	4b47      	ldr	r3, [pc, #284]	; (80833b8 <HAL_RCC_GetSysClockFreq+0x158>)
 808329a:	685b      	ldr	r3, [r3, #4]
 808329c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80832a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80832a2:	4b45      	ldr	r3, [pc, #276]	; (80833b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80832a4:	685b      	ldr	r3, [r3, #4]
 80832a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80832aa:	2b00      	cmp	r3, #0
 80832ac:	d023      	beq.n	80832f6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80832ae:	4b42      	ldr	r3, [pc, #264]	; (80833b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80832b0:	685b      	ldr	r3, [r3, #4]
 80832b2:	099b      	lsrs	r3, r3, #6
 80832b4:	f04f 0400 	mov.w	r4, #0
 80832b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80832bc:	f04f 0200 	mov.w	r2, #0
 80832c0:	ea03 0501 	and.w	r5, r3, r1
 80832c4:	ea04 0602 	and.w	r6, r4, r2
 80832c8:	4a3d      	ldr	r2, [pc, #244]	; (80833c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80832ca:	fb02 f106 	mul.w	r1, r2, r6
 80832ce:	2200      	movs	r2, #0
 80832d0:	fb02 f205 	mul.w	r2, r2, r5
 80832d4:	440a      	add	r2, r1
 80832d6:	493a      	ldr	r1, [pc, #232]	; (80833c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80832d8:	fba5 0101 	umull	r0, r1, r5, r1
 80832dc:	1853      	adds	r3, r2, r1
 80832de:	4619      	mov	r1, r3
 80832e0:	687b      	ldr	r3, [r7, #4]
 80832e2:	f04f 0400 	mov.w	r4, #0
 80832e6:	461a      	mov	r2, r3
 80832e8:	4623      	mov	r3, r4
 80832ea:	f007 fde9 	bl	808aec0 <__aeabi_uldivmod>
 80832ee:	4603      	mov	r3, r0
 80832f0:	460c      	mov	r4, r1
 80832f2:	60fb      	str	r3, [r7, #12]
 80832f4:	e049      	b.n	808338a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80832f6:	4b30      	ldr	r3, [pc, #192]	; (80833b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80832f8:	685b      	ldr	r3, [r3, #4]
 80832fa:	099b      	lsrs	r3, r3, #6
 80832fc:	f04f 0400 	mov.w	r4, #0
 8083300:	f240 11ff 	movw	r1, #511	; 0x1ff
 8083304:	f04f 0200 	mov.w	r2, #0
 8083308:	ea03 0501 	and.w	r5, r3, r1
 808330c:	ea04 0602 	and.w	r6, r4, r2
 8083310:	4629      	mov	r1, r5
 8083312:	4632      	mov	r2, r6
 8083314:	f04f 0300 	mov.w	r3, #0
 8083318:	f04f 0400 	mov.w	r4, #0
 808331c:	0154      	lsls	r4, r2, #5
 808331e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8083322:	014b      	lsls	r3, r1, #5
 8083324:	4619      	mov	r1, r3
 8083326:	4622      	mov	r2, r4
 8083328:	1b49      	subs	r1, r1, r5
 808332a:	eb62 0206 	sbc.w	r2, r2, r6
 808332e:	f04f 0300 	mov.w	r3, #0
 8083332:	f04f 0400 	mov.w	r4, #0
 8083336:	0194      	lsls	r4, r2, #6
 8083338:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 808333c:	018b      	lsls	r3, r1, #6
 808333e:	1a5b      	subs	r3, r3, r1
 8083340:	eb64 0402 	sbc.w	r4, r4, r2
 8083344:	f04f 0100 	mov.w	r1, #0
 8083348:	f04f 0200 	mov.w	r2, #0
 808334c:	00e2      	lsls	r2, r4, #3
 808334e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8083352:	00d9      	lsls	r1, r3, #3
 8083354:	460b      	mov	r3, r1
 8083356:	4614      	mov	r4, r2
 8083358:	195b      	adds	r3, r3, r5
 808335a:	eb44 0406 	adc.w	r4, r4, r6
 808335e:	f04f 0100 	mov.w	r1, #0
 8083362:	f04f 0200 	mov.w	r2, #0
 8083366:	02a2      	lsls	r2, r4, #10
 8083368:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 808336c:	0299      	lsls	r1, r3, #10
 808336e:	460b      	mov	r3, r1
 8083370:	4614      	mov	r4, r2
 8083372:	4618      	mov	r0, r3
 8083374:	4621      	mov	r1, r4
 8083376:	687b      	ldr	r3, [r7, #4]
 8083378:	f04f 0400 	mov.w	r4, #0
 808337c:	461a      	mov	r2, r3
 808337e:	4623      	mov	r3, r4
 8083380:	f007 fd9e 	bl	808aec0 <__aeabi_uldivmod>
 8083384:	4603      	mov	r3, r0
 8083386:	460c      	mov	r4, r1
 8083388:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 808338a:	4b0b      	ldr	r3, [pc, #44]	; (80833b8 <HAL_RCC_GetSysClockFreq+0x158>)
 808338c:	685b      	ldr	r3, [r3, #4]
 808338e:	0c1b      	lsrs	r3, r3, #16
 8083390:	f003 0303 	and.w	r3, r3, #3
 8083394:	3301      	adds	r3, #1
 8083396:	005b      	lsls	r3, r3, #1
 8083398:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 808339a:	68fa      	ldr	r2, [r7, #12]
 808339c:	683b      	ldr	r3, [r7, #0]
 808339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80833a2:	60bb      	str	r3, [r7, #8]
      break;
 80833a4:	e002      	b.n	80833ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80833a6:	4b05      	ldr	r3, [pc, #20]	; (80833bc <HAL_RCC_GetSysClockFreq+0x15c>)
 80833a8:	60bb      	str	r3, [r7, #8]
      break;
 80833aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80833ac:	68bb      	ldr	r3, [r7, #8]
}
 80833ae:	4618      	mov	r0, r3
 80833b0:	3714      	adds	r7, #20
 80833b2:	46bd      	mov	sp, r7
 80833b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80833b6:	bf00      	nop
 80833b8:	40023800 	.word	0x40023800
 80833bc:	00f42400 	.word	0x00f42400
 80833c0:	017d7840 	.word	0x017d7840

080833c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80833c4:	b480      	push	{r7}
 80833c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80833c8:	4b03      	ldr	r3, [pc, #12]	; (80833d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80833ca:	681b      	ldr	r3, [r3, #0]
}
 80833cc:	4618      	mov	r0, r3
 80833ce:	46bd      	mov	sp, r7
 80833d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80833d4:	4770      	bx	lr
 80833d6:	bf00      	nop
 80833d8:	20000000 	.word	0x20000000

080833dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80833dc:	b580      	push	{r7, lr}
 80833de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80833e0:	f7ff fff0 	bl	80833c4 <HAL_RCC_GetHCLKFreq>
 80833e4:	4601      	mov	r1, r0
 80833e6:	4b05      	ldr	r3, [pc, #20]	; (80833fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80833e8:	689b      	ldr	r3, [r3, #8]
 80833ea:	0a9b      	lsrs	r3, r3, #10
 80833ec:	f003 0307 	and.w	r3, r3, #7
 80833f0:	4a03      	ldr	r2, [pc, #12]	; (8083400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80833f2:	5cd3      	ldrb	r3, [r2, r3]
 80833f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80833f8:	4618      	mov	r0, r3
 80833fa:	bd80      	pop	{r7, pc}
 80833fc:	40023800 	.word	0x40023800
 8083400:	0808baf8 	.word	0x0808baf8

08083404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8083404:	b580      	push	{r7, lr}
 8083406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8083408:	f7ff ffdc 	bl	80833c4 <HAL_RCC_GetHCLKFreq>
 808340c:	4601      	mov	r1, r0
 808340e:	4b05      	ldr	r3, [pc, #20]	; (8083424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8083410:	689b      	ldr	r3, [r3, #8]
 8083412:	0b5b      	lsrs	r3, r3, #13
 8083414:	f003 0307 	and.w	r3, r3, #7
 8083418:	4a03      	ldr	r2, [pc, #12]	; (8083428 <HAL_RCC_GetPCLK2Freq+0x24>)
 808341a:	5cd3      	ldrb	r3, [r2, r3]
 808341c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8083420:	4618      	mov	r0, r3
 8083422:	bd80      	pop	{r7, pc}
 8083424:	40023800 	.word	0x40023800
 8083428:	0808baf8 	.word	0x0808baf8

0808342c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 808342c:	b480      	push	{r7}
 808342e:	b083      	sub	sp, #12
 8083430:	af00      	add	r7, sp, #0
 8083432:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8083434:	687b      	ldr	r3, [r7, #4]
 8083436:	220f      	movs	r2, #15
 8083438:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 808343a:	4b45      	ldr	r3, [pc, #276]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 808343c:	681b      	ldr	r3, [r3, #0]
 808343e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8083442:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8083446:	d104      	bne.n	8083452 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8083448:	687b      	ldr	r3, [r7, #4]
 808344a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 808344e:	605a      	str	r2, [r3, #4]
 8083450:	e00e      	b.n	8083470 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8083452:	4b3f      	ldr	r3, [pc, #252]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 8083454:	681b      	ldr	r3, [r3, #0]
 8083456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 808345a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 808345e:	d104      	bne.n	808346a <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8083460:	687b      	ldr	r3, [r7, #4]
 8083462:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8083466:	605a      	str	r2, [r3, #4]
 8083468:	e002      	b.n	8083470 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 808346a:	687b      	ldr	r3, [r7, #4]
 808346c:	2200      	movs	r2, #0
 808346e:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8083470:	4b37      	ldr	r3, [pc, #220]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 8083472:	681b      	ldr	r3, [r3, #0]
 8083474:	f003 0301 	and.w	r3, r3, #1
 8083478:	2b01      	cmp	r3, #1
 808347a:	d103      	bne.n	8083484 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 808347c:	687b      	ldr	r3, [r7, #4]
 808347e:	2201      	movs	r2, #1
 8083480:	60da      	str	r2, [r3, #12]
 8083482:	e002      	b.n	808348a <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8083484:	687b      	ldr	r3, [r7, #4]
 8083486:	2200      	movs	r2, #0
 8083488:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 808348a:	4b31      	ldr	r3, [pc, #196]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 808348c:	681b      	ldr	r3, [r3, #0]
 808348e:	08db      	lsrs	r3, r3, #3
 8083490:	f003 021f 	and.w	r2, r3, #31
 8083494:	687b      	ldr	r3, [r7, #4]
 8083496:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8083498:	4b2d      	ldr	r3, [pc, #180]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 808349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808349c:	f003 0304 	and.w	r3, r3, #4
 80834a0:	2b04      	cmp	r3, #4
 80834a2:	d103      	bne.n	80834ac <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80834a4:	687b      	ldr	r3, [r7, #4]
 80834a6:	2205      	movs	r2, #5
 80834a8:	609a      	str	r2, [r3, #8]
 80834aa:	e00c      	b.n	80834c6 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80834ac:	4b28      	ldr	r3, [pc, #160]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 80834ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80834b0:	f003 0301 	and.w	r3, r3, #1
 80834b4:	2b01      	cmp	r3, #1
 80834b6:	d103      	bne.n	80834c0 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80834b8:	687b      	ldr	r3, [r7, #4]
 80834ba:	2201      	movs	r2, #1
 80834bc:	609a      	str	r2, [r3, #8]
 80834be:	e002      	b.n	80834c6 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80834c0:	687b      	ldr	r3, [r7, #4]
 80834c2:	2200      	movs	r2, #0
 80834c4:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80834c6:	4b22      	ldr	r3, [pc, #136]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 80834c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80834ca:	f003 0301 	and.w	r3, r3, #1
 80834ce:	2b01      	cmp	r3, #1
 80834d0:	d103      	bne.n	80834da <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80834d2:	687b      	ldr	r3, [r7, #4]
 80834d4:	2201      	movs	r2, #1
 80834d6:	615a      	str	r2, [r3, #20]
 80834d8:	e002      	b.n	80834e0 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80834da:	687b      	ldr	r3, [r7, #4]
 80834dc:	2200      	movs	r2, #0
 80834de:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 80834e0:	4b1b      	ldr	r3, [pc, #108]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 80834e2:	681b      	ldr	r3, [r3, #0]
 80834e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80834e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80834ec:	d103      	bne.n	80834f6 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80834ee:	687b      	ldr	r3, [r7, #4]
 80834f0:	2202      	movs	r2, #2
 80834f2:	619a      	str	r2, [r3, #24]
 80834f4:	e002      	b.n	80834fc <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80834f6:	687b      	ldr	r3, [r7, #4]
 80834f8:	2201      	movs	r2, #1
 80834fa:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80834fc:	4b14      	ldr	r3, [pc, #80]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 80834fe:	685b      	ldr	r3, [r3, #4]
 8083500:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8083504:	687b      	ldr	r3, [r7, #4]
 8083506:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8083508:	4b11      	ldr	r3, [pc, #68]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 808350a:	685b      	ldr	r3, [r3, #4]
 808350c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8083510:	687b      	ldr	r3, [r7, #4]
 8083512:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8083514:	4b0e      	ldr	r3, [pc, #56]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 8083516:	685b      	ldr	r3, [r3, #4]
 8083518:	099b      	lsrs	r3, r3, #6
 808351a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 808351e:	687b      	ldr	r3, [r7, #4]
 8083520:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8083522:	4b0b      	ldr	r3, [pc, #44]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 8083524:	685b      	ldr	r3, [r3, #4]
 8083526:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 808352a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 808352e:	005b      	lsls	r3, r3, #1
 8083530:	0c1a      	lsrs	r2, r3, #16
 8083532:	687b      	ldr	r3, [r7, #4]
 8083534:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8083536:	4b06      	ldr	r3, [pc, #24]	; (8083550 <HAL_RCC_GetOscConfig+0x124>)
 8083538:	685b      	ldr	r3, [r3, #4]
 808353a:	0e1b      	lsrs	r3, r3, #24
 808353c:	f003 020f 	and.w	r2, r3, #15
 8083540:	687b      	ldr	r3, [r7, #4]
 8083542:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8083544:	bf00      	nop
 8083546:	370c      	adds	r7, #12
 8083548:	46bd      	mov	sp, r7
 808354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808354e:	4770      	bx	lr
 8083550:	40023800 	.word	0x40023800

08083554 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8083554:	b480      	push	{r7}
 8083556:	b083      	sub	sp, #12
 8083558:	af00      	add	r7, sp, #0
 808355a:	6078      	str	r0, [r7, #4]
 808355c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 808355e:	687b      	ldr	r3, [r7, #4]
 8083560:	220f      	movs	r2, #15
 8083562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8083564:	4b12      	ldr	r3, [pc, #72]	; (80835b0 <HAL_RCC_GetClockConfig+0x5c>)
 8083566:	689b      	ldr	r3, [r3, #8]
 8083568:	f003 0203 	and.w	r2, r3, #3
 808356c:	687b      	ldr	r3, [r7, #4]
 808356e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8083570:	4b0f      	ldr	r3, [pc, #60]	; (80835b0 <HAL_RCC_GetClockConfig+0x5c>)
 8083572:	689b      	ldr	r3, [r3, #8]
 8083574:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8083578:	687b      	ldr	r3, [r7, #4]
 808357a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 808357c:	4b0c      	ldr	r3, [pc, #48]	; (80835b0 <HAL_RCC_GetClockConfig+0x5c>)
 808357e:	689b      	ldr	r3, [r3, #8]
 8083580:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8083584:	687b      	ldr	r3, [r7, #4]
 8083586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8083588:	4b09      	ldr	r3, [pc, #36]	; (80835b0 <HAL_RCC_GetClockConfig+0x5c>)
 808358a:	689b      	ldr	r3, [r3, #8]
 808358c:	08db      	lsrs	r3, r3, #3
 808358e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8083592:	687b      	ldr	r3, [r7, #4]
 8083594:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8083596:	4b07      	ldr	r3, [pc, #28]	; (80835b4 <HAL_RCC_GetClockConfig+0x60>)
 8083598:	681b      	ldr	r3, [r3, #0]
 808359a:	f003 020f 	and.w	r2, r3, #15
 808359e:	683b      	ldr	r3, [r7, #0]
 80835a0:	601a      	str	r2, [r3, #0]
}
 80835a2:	bf00      	nop
 80835a4:	370c      	adds	r7, #12
 80835a6:	46bd      	mov	sp, r7
 80835a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80835ac:	4770      	bx	lr
 80835ae:	bf00      	nop
 80835b0:	40023800 	.word	0x40023800
 80835b4:	40023c00 	.word	0x40023c00

080835b8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80835b8:	b580      	push	{r7, lr}
 80835ba:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80835bc:	4b06      	ldr	r3, [pc, #24]	; (80835d8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80835be:	68db      	ldr	r3, [r3, #12]
 80835c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80835c4:	2b80      	cmp	r3, #128	; 0x80
 80835c6:	d104      	bne.n	80835d2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80835c8:	f000 f80a 	bl	80835e0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80835cc:	4b03      	ldr	r3, [pc, #12]	; (80835dc <HAL_RCC_NMI_IRQHandler+0x24>)
 80835ce:	2280      	movs	r2, #128	; 0x80
 80835d0:	701a      	strb	r2, [r3, #0]
  }
}
 80835d2:	bf00      	nop
 80835d4:	bd80      	pop	{r7, pc}
 80835d6:	bf00      	nop
 80835d8:	40023800 	.word	0x40023800
 80835dc:	4002380e 	.word	0x4002380e

080835e0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80835e0:	b480      	push	{r7}
 80835e2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80835e4:	bf00      	nop
 80835e6:	46bd      	mov	sp, r7
 80835e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80835ec:	4770      	bx	lr
 80835ee:	bf00      	nop

080835f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80835f0:	b580      	push	{r7, lr}
 80835f2:	b082      	sub	sp, #8
 80835f4:	af00      	add	r7, sp, #0
 80835f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80835f8:	687b      	ldr	r3, [r7, #4]
 80835fa:	2b00      	cmp	r3, #0
 80835fc:	d101      	bne.n	8083602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80835fe:	2301      	movs	r3, #1
 8083600:	e01d      	b.n	808363e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8083602:	687b      	ldr	r3, [r7, #4]
 8083604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8083608:	b2db      	uxtb	r3, r3
 808360a:	2b00      	cmp	r3, #0
 808360c:	d106      	bne.n	808361c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 808360e:	687b      	ldr	r3, [r7, #4]
 8083610:	2200      	movs	r2, #0
 8083612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8083616:	6878      	ldr	r0, [r7, #4]
 8083618:	f7fd faa0 	bl	8080b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 808361c:	687b      	ldr	r3, [r7, #4]
 808361e:	2202      	movs	r2, #2
 8083620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8083624:	687b      	ldr	r3, [r7, #4]
 8083626:	681a      	ldr	r2, [r3, #0]
 8083628:	687b      	ldr	r3, [r7, #4]
 808362a:	3304      	adds	r3, #4
 808362c:	4619      	mov	r1, r3
 808362e:	4610      	mov	r0, r2
 8083630:	f003 fcfc 	bl	808702c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8083634:	687b      	ldr	r3, [r7, #4]
 8083636:	2201      	movs	r2, #1
 8083638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 808363c:	2300      	movs	r3, #0
}
 808363e:	4618      	mov	r0, r3
 8083640:	3708      	adds	r7, #8
 8083642:	46bd      	mov	sp, r7
 8083644:	bd80      	pop	{r7, pc}

08083646 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8083646:	b580      	push	{r7, lr}
 8083648:	b082      	sub	sp, #8
 808364a:	af00      	add	r7, sp, #0
 808364c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 808364e:	687b      	ldr	r3, [r7, #4]
 8083650:	2202      	movs	r2, #2
 8083652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8083656:	687b      	ldr	r3, [r7, #4]
 8083658:	681b      	ldr	r3, [r3, #0]
 808365a:	6a1a      	ldr	r2, [r3, #32]
 808365c:	f241 1311 	movw	r3, #4369	; 0x1111
 8083660:	4013      	ands	r3, r2
 8083662:	2b00      	cmp	r3, #0
 8083664:	d10f      	bne.n	8083686 <HAL_TIM_Base_DeInit+0x40>
 8083666:	687b      	ldr	r3, [r7, #4]
 8083668:	681b      	ldr	r3, [r3, #0]
 808366a:	6a1a      	ldr	r2, [r3, #32]
 808366c:	f240 4344 	movw	r3, #1092	; 0x444
 8083670:	4013      	ands	r3, r2
 8083672:	2b00      	cmp	r3, #0
 8083674:	d107      	bne.n	8083686 <HAL_TIM_Base_DeInit+0x40>
 8083676:	687b      	ldr	r3, [r7, #4]
 8083678:	681b      	ldr	r3, [r3, #0]
 808367a:	681a      	ldr	r2, [r3, #0]
 808367c:	687b      	ldr	r3, [r7, #4]
 808367e:	681b      	ldr	r3, [r3, #0]
 8083680:	f022 0201 	bic.w	r2, r2, #1
 8083684:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8083686:	6878      	ldr	r0, [r7, #4]
 8083688:	f7fd fa90 	bl	8080bac <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 808368c:	687b      	ldr	r3, [r7, #4]
 808368e:	2200      	movs	r2, #0
 8083690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8083694:	687b      	ldr	r3, [r7, #4]
 8083696:	2200      	movs	r2, #0
 8083698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 808369c:	2300      	movs	r3, #0
}
 808369e:	4618      	mov	r0, r3
 80836a0:	3708      	adds	r7, #8
 80836a2:	46bd      	mov	sp, r7
 80836a4:	bd80      	pop	{r7, pc}
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80836a6:	b480      	push	{r7}
 80836a8:	b083      	sub	sp, #12
 80836aa:	af00      	add	r7, sp, #0
 80836ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80836ae:	bf00      	nop
 80836b0:	370c      	adds	r7, #12
 80836b2:	46bd      	mov	sp, r7
 80836b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80836b8:	4770      	bx	lr
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 80836ba:	b480      	push	{r7}
 80836bc:	b083      	sub	sp, #12
 80836be:	af00      	add	r7, sp, #0
 80836c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 80836c2:	bf00      	nop
 80836c4:	370c      	adds	r7, #12
 80836c6:	46bd      	mov	sp, r7
 80836c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80836cc:	4770      	bx	lr

080836ce <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80836ce:	b480      	push	{r7}
 80836d0:	b085      	sub	sp, #20
 80836d2:	af00      	add	r7, sp, #0
 80836d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80836d6:	687b      	ldr	r3, [r7, #4]
 80836d8:	2202      	movs	r2, #2
 80836da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80836de:	687b      	ldr	r3, [r7, #4]
 80836e0:	681b      	ldr	r3, [r3, #0]
 80836e2:	689b      	ldr	r3, [r3, #8]
 80836e4:	f003 0307 	and.w	r3, r3, #7
 80836e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80836ea:	68fb      	ldr	r3, [r7, #12]
 80836ec:	2b06      	cmp	r3, #6
 80836ee:	d007      	beq.n	8083700 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80836f0:	687b      	ldr	r3, [r7, #4]
 80836f2:	681b      	ldr	r3, [r3, #0]
 80836f4:	681a      	ldr	r2, [r3, #0]
 80836f6:	687b      	ldr	r3, [r7, #4]
 80836f8:	681b      	ldr	r3, [r3, #0]
 80836fa:	f042 0201 	orr.w	r2, r2, #1
 80836fe:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8083700:	687b      	ldr	r3, [r7, #4]
 8083702:	2201      	movs	r2, #1
 8083704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8083708:	2300      	movs	r3, #0
}
 808370a:	4618      	mov	r0, r3
 808370c:	3714      	adds	r7, #20
 808370e:	46bd      	mov	sp, r7
 8083710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083714:	4770      	bx	lr

08083716 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8083716:	b480      	push	{r7}
 8083718:	b083      	sub	sp, #12
 808371a:	af00      	add	r7, sp, #0
 808371c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 808371e:	687b      	ldr	r3, [r7, #4]
 8083720:	2202      	movs	r2, #2
 8083722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8083726:	687b      	ldr	r3, [r7, #4]
 8083728:	681b      	ldr	r3, [r3, #0]
 808372a:	6a1a      	ldr	r2, [r3, #32]
 808372c:	f241 1311 	movw	r3, #4369	; 0x1111
 8083730:	4013      	ands	r3, r2
 8083732:	2b00      	cmp	r3, #0
 8083734:	d10f      	bne.n	8083756 <HAL_TIM_Base_Stop+0x40>
 8083736:	687b      	ldr	r3, [r7, #4]
 8083738:	681b      	ldr	r3, [r3, #0]
 808373a:	6a1a      	ldr	r2, [r3, #32]
 808373c:	f240 4344 	movw	r3, #1092	; 0x444
 8083740:	4013      	ands	r3, r2
 8083742:	2b00      	cmp	r3, #0
 8083744:	d107      	bne.n	8083756 <HAL_TIM_Base_Stop+0x40>
 8083746:	687b      	ldr	r3, [r7, #4]
 8083748:	681b      	ldr	r3, [r3, #0]
 808374a:	681a      	ldr	r2, [r3, #0]
 808374c:	687b      	ldr	r3, [r7, #4]
 808374e:	681b      	ldr	r3, [r3, #0]
 8083750:	f022 0201 	bic.w	r2, r2, #1
 8083754:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8083756:	687b      	ldr	r3, [r7, #4]
 8083758:	2201      	movs	r2, #1
 808375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 808375e:	2300      	movs	r3, #0
}
 8083760:	4618      	mov	r0, r3
 8083762:	370c      	adds	r7, #12
 8083764:	46bd      	mov	sp, r7
 8083766:	f85d 7b04 	ldr.w	r7, [sp], #4
 808376a:	4770      	bx	lr

0808376c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 808376c:	b480      	push	{r7}
 808376e:	b085      	sub	sp, #20
 8083770:	af00      	add	r7, sp, #0
 8083772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8083774:	687b      	ldr	r3, [r7, #4]
 8083776:	681b      	ldr	r3, [r3, #0]
 8083778:	68da      	ldr	r2, [r3, #12]
 808377a:	687b      	ldr	r3, [r7, #4]
 808377c:	681b      	ldr	r3, [r3, #0]
 808377e:	f042 0201 	orr.w	r2, r2, #1
 8083782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8083784:	687b      	ldr	r3, [r7, #4]
 8083786:	681b      	ldr	r3, [r3, #0]
 8083788:	689b      	ldr	r3, [r3, #8]
 808378a:	f003 0307 	and.w	r3, r3, #7
 808378e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8083790:	68fb      	ldr	r3, [r7, #12]
 8083792:	2b06      	cmp	r3, #6
 8083794:	d007      	beq.n	80837a6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8083796:	687b      	ldr	r3, [r7, #4]
 8083798:	681b      	ldr	r3, [r3, #0]
 808379a:	681a      	ldr	r2, [r3, #0]
 808379c:	687b      	ldr	r3, [r7, #4]
 808379e:	681b      	ldr	r3, [r3, #0]
 80837a0:	f042 0201 	orr.w	r2, r2, #1
 80837a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80837a6:	2300      	movs	r3, #0
}
 80837a8:	4618      	mov	r0, r3
 80837aa:	3714      	adds	r7, #20
 80837ac:	46bd      	mov	sp, r7
 80837ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80837b2:	4770      	bx	lr

080837b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80837b4:	b480      	push	{r7}
 80837b6:	b083      	sub	sp, #12
 80837b8:	af00      	add	r7, sp, #0
 80837ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80837bc:	687b      	ldr	r3, [r7, #4]
 80837be:	681b      	ldr	r3, [r3, #0]
 80837c0:	68da      	ldr	r2, [r3, #12]
 80837c2:	687b      	ldr	r3, [r7, #4]
 80837c4:	681b      	ldr	r3, [r3, #0]
 80837c6:	f022 0201 	bic.w	r2, r2, #1
 80837ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80837cc:	687b      	ldr	r3, [r7, #4]
 80837ce:	681b      	ldr	r3, [r3, #0]
 80837d0:	6a1a      	ldr	r2, [r3, #32]
 80837d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80837d6:	4013      	ands	r3, r2
 80837d8:	2b00      	cmp	r3, #0
 80837da:	d10f      	bne.n	80837fc <HAL_TIM_Base_Stop_IT+0x48>
 80837dc:	687b      	ldr	r3, [r7, #4]
 80837de:	681b      	ldr	r3, [r3, #0]
 80837e0:	6a1a      	ldr	r2, [r3, #32]
 80837e2:	f240 4344 	movw	r3, #1092	; 0x444
 80837e6:	4013      	ands	r3, r2
 80837e8:	2b00      	cmp	r3, #0
 80837ea:	d107      	bne.n	80837fc <HAL_TIM_Base_Stop_IT+0x48>
 80837ec:	687b      	ldr	r3, [r7, #4]
 80837ee:	681b      	ldr	r3, [r3, #0]
 80837f0:	681a      	ldr	r2, [r3, #0]
 80837f2:	687b      	ldr	r3, [r7, #4]
 80837f4:	681b      	ldr	r3, [r3, #0]
 80837f6:	f022 0201 	bic.w	r2, r2, #1
 80837fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80837fc:	2300      	movs	r3, #0
}
 80837fe:	4618      	mov	r0, r3
 8083800:	370c      	adds	r7, #12
 8083802:	46bd      	mov	sp, r7
 8083804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083808:	4770      	bx	lr

0808380a <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 808380a:	b580      	push	{r7, lr}
 808380c:	b086      	sub	sp, #24
 808380e:	af00      	add	r7, sp, #0
 8083810:	60f8      	str	r0, [r7, #12]
 8083812:	60b9      	str	r1, [r7, #8]
 8083814:	4613      	mov	r3, r2
 8083816:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8083818:	68fb      	ldr	r3, [r7, #12]
 808381a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 808381e:	b2db      	uxtb	r3, r3
 8083820:	2b02      	cmp	r3, #2
 8083822:	d101      	bne.n	8083828 <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8083824:	2302      	movs	r3, #2
 8083826:	e046      	b.n	80838b6 <HAL_TIM_Base_Start_DMA+0xac>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8083828:	68fb      	ldr	r3, [r7, #12]
 808382a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 808382e:	b2db      	uxtb	r3, r3
 8083830:	2b01      	cmp	r3, #1
 8083832:	d10b      	bne.n	808384c <HAL_TIM_Base_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8083834:	68bb      	ldr	r3, [r7, #8]
 8083836:	2b00      	cmp	r3, #0
 8083838:	d104      	bne.n	8083844 <HAL_TIM_Base_Start_DMA+0x3a>
 808383a:	88fb      	ldrh	r3, [r7, #6]
 808383c:	2b00      	cmp	r3, #0
 808383e:	d001      	beq.n	8083844 <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8083840:	2301      	movs	r3, #1
 8083842:	e038      	b.n	80838b6 <HAL_TIM_Base_Start_DMA+0xac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8083844:	68fb      	ldr	r3, [r7, #12]
 8083846:	2202      	movs	r2, #2
 8083848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    /* nothing to do */
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 808384c:	68fb      	ldr	r3, [r7, #12]
 808384e:	6a1b      	ldr	r3, [r3, #32]
 8083850:	4a1b      	ldr	r2, [pc, #108]	; (80838c0 <HAL_TIM_Base_Start_DMA+0xb6>)
 8083852:	63da      	str	r2, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8083854:	68fb      	ldr	r3, [r7, #12]
 8083856:	6a1b      	ldr	r3, [r3, #32]
 8083858:	4a1a      	ldr	r2, [pc, #104]	; (80838c4 <HAL_TIM_Base_Start_DMA+0xba>)
 808385a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 808385c:	68fb      	ldr	r3, [r7, #12]
 808385e:	6a1b      	ldr	r3, [r3, #32]
 8083860:	4a19      	ldr	r2, [pc, #100]	; (80838c8 <HAL_TIM_Base_Start_DMA+0xbe>)
 8083862:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA stream */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length) != HAL_OK)
 8083864:	68fb      	ldr	r3, [r7, #12]
 8083866:	6a18      	ldr	r0, [r3, #32]
 8083868:	68b9      	ldr	r1, [r7, #8]
 808386a:	68fb      	ldr	r3, [r7, #12]
 808386c:	681b      	ldr	r3, [r3, #0]
 808386e:	332c      	adds	r3, #44	; 0x2c
 8083870:	461a      	mov	r2, r3
 8083872:	88fb      	ldrh	r3, [r7, #6]
 8083874:	f7fe f8ed 	bl	8081a52 <HAL_DMA_Start_IT>
 8083878:	4603      	mov	r3, r0
 808387a:	2b00      	cmp	r3, #0
 808387c:	d001      	beq.n	8083882 <HAL_TIM_Base_Start_DMA+0x78>
  {
    return HAL_ERROR;
 808387e:	2301      	movs	r3, #1
 8083880:	e019      	b.n	80838b6 <HAL_TIM_Base_Start_DMA+0xac>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8083882:	68fb      	ldr	r3, [r7, #12]
 8083884:	681b      	ldr	r3, [r3, #0]
 8083886:	68da      	ldr	r2, [r3, #12]
 8083888:	68fb      	ldr	r3, [r7, #12]
 808388a:	681b      	ldr	r3, [r3, #0]
 808388c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8083890:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8083892:	68fb      	ldr	r3, [r7, #12]
 8083894:	681b      	ldr	r3, [r3, #0]
 8083896:	689b      	ldr	r3, [r3, #8]
 8083898:	f003 0307 	and.w	r3, r3, #7
 808389c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 808389e:	697b      	ldr	r3, [r7, #20]
 80838a0:	2b06      	cmp	r3, #6
 80838a2:	d007      	beq.n	80838b4 <HAL_TIM_Base_Start_DMA+0xaa>
  {
    __HAL_TIM_ENABLE(htim);
 80838a4:	68fb      	ldr	r3, [r7, #12]
 80838a6:	681b      	ldr	r3, [r3, #0]
 80838a8:	681a      	ldr	r2, [r3, #0]
 80838aa:	68fb      	ldr	r3, [r7, #12]
 80838ac:	681b      	ldr	r3, [r3, #0]
 80838ae:	f042 0201 	orr.w	r2, r2, #1
 80838b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80838b4:	2300      	movs	r3, #0
}
 80838b6:	4618      	mov	r0, r3
 80838b8:	3718      	adds	r7, #24
 80838ba:	46bd      	mov	sp, r7
 80838bc:	bd80      	pop	{r7, pc}
 80838be:	bf00      	nop
 80838c0:	08086f9d 	.word	0x08086f9d
 80838c4:	08086fc1 	.word	0x08086fc1
 80838c8:	08086db9 	.word	0x08086db9

080838cc <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 80838cc:	b580      	push	{r7, lr}
 80838ce:	b082      	sub	sp, #8
 80838d0:	af00      	add	r7, sp, #0
 80838d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 80838d4:	687b      	ldr	r3, [r7, #4]
 80838d6:	681b      	ldr	r3, [r3, #0]
 80838d8:	68da      	ldr	r2, [r3, #12]
 80838da:	687b      	ldr	r3, [r7, #4]
 80838dc:	681b      	ldr	r3, [r3, #0]
 80838de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80838e2:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 80838e4:	687b      	ldr	r3, [r7, #4]
 80838e6:	6a1b      	ldr	r3, [r3, #32]
 80838e8:	4618      	mov	r0, r3
 80838ea:	f7fe f982 	bl	8081bf2 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80838ee:	687b      	ldr	r3, [r7, #4]
 80838f0:	681b      	ldr	r3, [r3, #0]
 80838f2:	6a1a      	ldr	r2, [r3, #32]
 80838f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80838f8:	4013      	ands	r3, r2
 80838fa:	2b00      	cmp	r3, #0
 80838fc:	d10f      	bne.n	808391e <HAL_TIM_Base_Stop_DMA+0x52>
 80838fe:	687b      	ldr	r3, [r7, #4]
 8083900:	681b      	ldr	r3, [r3, #0]
 8083902:	6a1a      	ldr	r2, [r3, #32]
 8083904:	f240 4344 	movw	r3, #1092	; 0x444
 8083908:	4013      	ands	r3, r2
 808390a:	2b00      	cmp	r3, #0
 808390c:	d107      	bne.n	808391e <HAL_TIM_Base_Stop_DMA+0x52>
 808390e:	687b      	ldr	r3, [r7, #4]
 8083910:	681b      	ldr	r3, [r3, #0]
 8083912:	681a      	ldr	r2, [r3, #0]
 8083914:	687b      	ldr	r3, [r7, #4]
 8083916:	681b      	ldr	r3, [r3, #0]
 8083918:	f022 0201 	bic.w	r2, r2, #1
 808391c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 808391e:	687b      	ldr	r3, [r7, #4]
 8083920:	2201      	movs	r2, #1
 8083922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8083926:	2300      	movs	r3, #0
}
 8083928:	4618      	mov	r0, r3
 808392a:	3708      	adds	r7, #8
 808392c:	46bd      	mov	sp, r7
 808392e:	bd80      	pop	{r7, pc}

08083930 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8083930:	b580      	push	{r7, lr}
 8083932:	b082      	sub	sp, #8
 8083934:	af00      	add	r7, sp, #0
 8083936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8083938:	687b      	ldr	r3, [r7, #4]
 808393a:	2b00      	cmp	r3, #0
 808393c:	d101      	bne.n	8083942 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 808393e:	2301      	movs	r3, #1
 8083940:	e01d      	b.n	808397e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8083942:	687b      	ldr	r3, [r7, #4]
 8083944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8083948:	b2db      	uxtb	r3, r3
 808394a:	2b00      	cmp	r3, #0
 808394c:	d106      	bne.n	808395c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 808394e:	687b      	ldr	r3, [r7, #4]
 8083950:	2200      	movs	r2, #0
 8083952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8083956:	6878      	ldr	r0, [r7, #4]
 8083958:	f000 f845 	bl	80839e6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 808395c:	687b      	ldr	r3, [r7, #4]
 808395e:	2202      	movs	r2, #2
 8083960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8083964:	687b      	ldr	r3, [r7, #4]
 8083966:	681a      	ldr	r2, [r3, #0]
 8083968:	687b      	ldr	r3, [r7, #4]
 808396a:	3304      	adds	r3, #4
 808396c:	4619      	mov	r1, r3
 808396e:	4610      	mov	r0, r2
 8083970:	f003 fb5c 	bl	808702c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8083974:	687b      	ldr	r3, [r7, #4]
 8083976:	2201      	movs	r2, #1
 8083978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 808397c:	2300      	movs	r3, #0
}
 808397e:	4618      	mov	r0, r3
 8083980:	3708      	adds	r7, #8
 8083982:	46bd      	mov	sp, r7
 8083984:	bd80      	pop	{r7, pc}

08083986 <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8083986:	b580      	push	{r7, lr}
 8083988:	b082      	sub	sp, #8
 808398a:	af00      	add	r7, sp, #0
 808398c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 808398e:	687b      	ldr	r3, [r7, #4]
 8083990:	2202      	movs	r2, #2
 8083992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8083996:	687b      	ldr	r3, [r7, #4]
 8083998:	681b      	ldr	r3, [r3, #0]
 808399a:	6a1a      	ldr	r2, [r3, #32]
 808399c:	f241 1311 	movw	r3, #4369	; 0x1111
 80839a0:	4013      	ands	r3, r2
 80839a2:	2b00      	cmp	r3, #0
 80839a4:	d10f      	bne.n	80839c6 <HAL_TIM_OC_DeInit+0x40>
 80839a6:	687b      	ldr	r3, [r7, #4]
 80839a8:	681b      	ldr	r3, [r3, #0]
 80839aa:	6a1a      	ldr	r2, [r3, #32]
 80839ac:	f240 4344 	movw	r3, #1092	; 0x444
 80839b0:	4013      	ands	r3, r2
 80839b2:	2b00      	cmp	r3, #0
 80839b4:	d107      	bne.n	80839c6 <HAL_TIM_OC_DeInit+0x40>
 80839b6:	687b      	ldr	r3, [r7, #4]
 80839b8:	681b      	ldr	r3, [r3, #0]
 80839ba:	681a      	ldr	r2, [r3, #0]
 80839bc:	687b      	ldr	r3, [r7, #4]
 80839be:	681b      	ldr	r3, [r3, #0]
 80839c0:	f022 0201 	bic.w	r2, r2, #1
 80839c4:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 80839c6:	6878      	ldr	r0, [r7, #4]
 80839c8:	f000 f817 	bl	80839fa <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80839cc:	687b      	ldr	r3, [r7, #4]
 80839ce:	2200      	movs	r2, #0
 80839d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80839d4:	687b      	ldr	r3, [r7, #4]
 80839d6:	2200      	movs	r2, #0
 80839d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80839dc:	2300      	movs	r3, #0
}
 80839de:	4618      	mov	r0, r3
 80839e0:	3708      	adds	r7, #8
 80839e2:	46bd      	mov	sp, r7
 80839e4:	bd80      	pop	{r7, pc}

080839e6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80839e6:	b480      	push	{r7}
 80839e8:	b083      	sub	sp, #12
 80839ea:	af00      	add	r7, sp, #0
 80839ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80839ee:	bf00      	nop
 80839f0:	370c      	adds	r7, #12
 80839f2:	46bd      	mov	sp, r7
 80839f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80839f8:	4770      	bx	lr

080839fa <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 80839fa:	b480      	push	{r7}
 80839fc:	b083      	sub	sp, #12
 80839fe:	af00      	add	r7, sp, #0
 8083a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8083a02:	bf00      	nop
 8083a04:	370c      	adds	r7, #12
 8083a06:	46bd      	mov	sp, r7
 8083a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083a0c:	4770      	bx	lr

08083a0e <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8083a0e:	b580      	push	{r7, lr}
 8083a10:	b084      	sub	sp, #16
 8083a12:	af00      	add	r7, sp, #0
 8083a14:	6078      	str	r0, [r7, #4]
 8083a16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8083a18:	687b      	ldr	r3, [r7, #4]
 8083a1a:	681b      	ldr	r3, [r3, #0]
 8083a1c:	2201      	movs	r2, #1
 8083a1e:	6839      	ldr	r1, [r7, #0]
 8083a20:	4618      	mov	r0, r3
 8083a22:	f003 ff9d 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8083a26:	687b      	ldr	r3, [r7, #4]
 8083a28:	681b      	ldr	r3, [r3, #0]
 8083a2a:	4a15      	ldr	r2, [pc, #84]	; (8083a80 <HAL_TIM_OC_Start+0x72>)
 8083a2c:	4293      	cmp	r3, r2
 8083a2e:	d004      	beq.n	8083a3a <HAL_TIM_OC_Start+0x2c>
 8083a30:	687b      	ldr	r3, [r7, #4]
 8083a32:	681b      	ldr	r3, [r3, #0]
 8083a34:	4a13      	ldr	r2, [pc, #76]	; (8083a84 <HAL_TIM_OC_Start+0x76>)
 8083a36:	4293      	cmp	r3, r2
 8083a38:	d101      	bne.n	8083a3e <HAL_TIM_OC_Start+0x30>
 8083a3a:	2301      	movs	r3, #1
 8083a3c:	e000      	b.n	8083a40 <HAL_TIM_OC_Start+0x32>
 8083a3e:	2300      	movs	r3, #0
 8083a40:	2b00      	cmp	r3, #0
 8083a42:	d007      	beq.n	8083a54 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8083a44:	687b      	ldr	r3, [r7, #4]
 8083a46:	681b      	ldr	r3, [r3, #0]
 8083a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8083a4a:	687b      	ldr	r3, [r7, #4]
 8083a4c:	681b      	ldr	r3, [r3, #0]
 8083a4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8083a52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8083a54:	687b      	ldr	r3, [r7, #4]
 8083a56:	681b      	ldr	r3, [r3, #0]
 8083a58:	689b      	ldr	r3, [r3, #8]
 8083a5a:	f003 0307 	and.w	r3, r3, #7
 8083a5e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8083a60:	68fb      	ldr	r3, [r7, #12]
 8083a62:	2b06      	cmp	r3, #6
 8083a64:	d007      	beq.n	8083a76 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8083a66:	687b      	ldr	r3, [r7, #4]
 8083a68:	681b      	ldr	r3, [r3, #0]
 8083a6a:	681a      	ldr	r2, [r3, #0]
 8083a6c:	687b      	ldr	r3, [r7, #4]
 8083a6e:	681b      	ldr	r3, [r3, #0]
 8083a70:	f042 0201 	orr.w	r2, r2, #1
 8083a74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8083a76:	2300      	movs	r3, #0
}
 8083a78:	4618      	mov	r0, r3
 8083a7a:	3710      	adds	r7, #16
 8083a7c:	46bd      	mov	sp, r7
 8083a7e:	bd80      	pop	{r7, pc}
 8083a80:	40010000 	.word	0x40010000
 8083a84:	40010400 	.word	0x40010400

08083a88 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8083a88:	b580      	push	{r7, lr}
 8083a8a:	b082      	sub	sp, #8
 8083a8c:	af00      	add	r7, sp, #0
 8083a8e:	6078      	str	r0, [r7, #4]
 8083a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8083a92:	687b      	ldr	r3, [r7, #4]
 8083a94:	681b      	ldr	r3, [r3, #0]
 8083a96:	2200      	movs	r2, #0
 8083a98:	6839      	ldr	r1, [r7, #0]
 8083a9a:	4618      	mov	r0, r3
 8083a9c:	f003 ff60 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8083aa0:	687b      	ldr	r3, [r7, #4]
 8083aa2:	681b      	ldr	r3, [r3, #0]
 8083aa4:	4a20      	ldr	r2, [pc, #128]	; (8083b28 <HAL_TIM_OC_Stop+0xa0>)
 8083aa6:	4293      	cmp	r3, r2
 8083aa8:	d004      	beq.n	8083ab4 <HAL_TIM_OC_Stop+0x2c>
 8083aaa:	687b      	ldr	r3, [r7, #4]
 8083aac:	681b      	ldr	r3, [r3, #0]
 8083aae:	4a1f      	ldr	r2, [pc, #124]	; (8083b2c <HAL_TIM_OC_Stop+0xa4>)
 8083ab0:	4293      	cmp	r3, r2
 8083ab2:	d101      	bne.n	8083ab8 <HAL_TIM_OC_Stop+0x30>
 8083ab4:	2301      	movs	r3, #1
 8083ab6:	e000      	b.n	8083aba <HAL_TIM_OC_Stop+0x32>
 8083ab8:	2300      	movs	r3, #0
 8083aba:	2b00      	cmp	r3, #0
 8083abc:	d017      	beq.n	8083aee <HAL_TIM_OC_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8083abe:	687b      	ldr	r3, [r7, #4]
 8083ac0:	681b      	ldr	r3, [r3, #0]
 8083ac2:	6a1a      	ldr	r2, [r3, #32]
 8083ac4:	f241 1311 	movw	r3, #4369	; 0x1111
 8083ac8:	4013      	ands	r3, r2
 8083aca:	2b00      	cmp	r3, #0
 8083acc:	d10f      	bne.n	8083aee <HAL_TIM_OC_Stop+0x66>
 8083ace:	687b      	ldr	r3, [r7, #4]
 8083ad0:	681b      	ldr	r3, [r3, #0]
 8083ad2:	6a1a      	ldr	r2, [r3, #32]
 8083ad4:	f240 4344 	movw	r3, #1092	; 0x444
 8083ad8:	4013      	ands	r3, r2
 8083ada:	2b00      	cmp	r3, #0
 8083adc:	d107      	bne.n	8083aee <HAL_TIM_OC_Stop+0x66>
 8083ade:	687b      	ldr	r3, [r7, #4]
 8083ae0:	681b      	ldr	r3, [r3, #0]
 8083ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8083ae4:	687b      	ldr	r3, [r7, #4]
 8083ae6:	681b      	ldr	r3, [r3, #0]
 8083ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8083aec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8083aee:	687b      	ldr	r3, [r7, #4]
 8083af0:	681b      	ldr	r3, [r3, #0]
 8083af2:	6a1a      	ldr	r2, [r3, #32]
 8083af4:	f241 1311 	movw	r3, #4369	; 0x1111
 8083af8:	4013      	ands	r3, r2
 8083afa:	2b00      	cmp	r3, #0
 8083afc:	d10f      	bne.n	8083b1e <HAL_TIM_OC_Stop+0x96>
 8083afe:	687b      	ldr	r3, [r7, #4]
 8083b00:	681b      	ldr	r3, [r3, #0]
 8083b02:	6a1a      	ldr	r2, [r3, #32]
 8083b04:	f240 4344 	movw	r3, #1092	; 0x444
 8083b08:	4013      	ands	r3, r2
 8083b0a:	2b00      	cmp	r3, #0
 8083b0c:	d107      	bne.n	8083b1e <HAL_TIM_OC_Stop+0x96>
 8083b0e:	687b      	ldr	r3, [r7, #4]
 8083b10:	681b      	ldr	r3, [r3, #0]
 8083b12:	681a      	ldr	r2, [r3, #0]
 8083b14:	687b      	ldr	r3, [r7, #4]
 8083b16:	681b      	ldr	r3, [r3, #0]
 8083b18:	f022 0201 	bic.w	r2, r2, #1
 8083b1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8083b1e:	2300      	movs	r3, #0
}
 8083b20:	4618      	mov	r0, r3
 8083b22:	3708      	adds	r7, #8
 8083b24:	46bd      	mov	sp, r7
 8083b26:	bd80      	pop	{r7, pc}
 8083b28:	40010000 	.word	0x40010000
 8083b2c:	40010400 	.word	0x40010400

08083b30 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8083b30:	b580      	push	{r7, lr}
 8083b32:	b084      	sub	sp, #16
 8083b34:	af00      	add	r7, sp, #0
 8083b36:	6078      	str	r0, [r7, #4]
 8083b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8083b3a:	683b      	ldr	r3, [r7, #0]
 8083b3c:	2b0c      	cmp	r3, #12
 8083b3e:	d841      	bhi.n	8083bc4 <HAL_TIM_OC_Start_IT+0x94>
 8083b40:	a201      	add	r2, pc, #4	; (adr r2, 8083b48 <HAL_TIM_OC_Start_IT+0x18>)
 8083b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8083b46:	bf00      	nop
 8083b48:	08083b7d 	.word	0x08083b7d
 8083b4c:	08083bc5 	.word	0x08083bc5
 8083b50:	08083bc5 	.word	0x08083bc5
 8083b54:	08083bc5 	.word	0x08083bc5
 8083b58:	08083b8f 	.word	0x08083b8f
 8083b5c:	08083bc5 	.word	0x08083bc5
 8083b60:	08083bc5 	.word	0x08083bc5
 8083b64:	08083bc5 	.word	0x08083bc5
 8083b68:	08083ba1 	.word	0x08083ba1
 8083b6c:	08083bc5 	.word	0x08083bc5
 8083b70:	08083bc5 	.word	0x08083bc5
 8083b74:	08083bc5 	.word	0x08083bc5
 8083b78:	08083bb3 	.word	0x08083bb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8083b7c:	687b      	ldr	r3, [r7, #4]
 8083b7e:	681b      	ldr	r3, [r3, #0]
 8083b80:	68da      	ldr	r2, [r3, #12]
 8083b82:	687b      	ldr	r3, [r7, #4]
 8083b84:	681b      	ldr	r3, [r3, #0]
 8083b86:	f042 0202 	orr.w	r2, r2, #2
 8083b8a:	60da      	str	r2, [r3, #12]
      break;
 8083b8c:	e01b      	b.n	8083bc6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8083b8e:	687b      	ldr	r3, [r7, #4]
 8083b90:	681b      	ldr	r3, [r3, #0]
 8083b92:	68da      	ldr	r2, [r3, #12]
 8083b94:	687b      	ldr	r3, [r7, #4]
 8083b96:	681b      	ldr	r3, [r3, #0]
 8083b98:	f042 0204 	orr.w	r2, r2, #4
 8083b9c:	60da      	str	r2, [r3, #12]
      break;
 8083b9e:	e012      	b.n	8083bc6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8083ba0:	687b      	ldr	r3, [r7, #4]
 8083ba2:	681b      	ldr	r3, [r3, #0]
 8083ba4:	68da      	ldr	r2, [r3, #12]
 8083ba6:	687b      	ldr	r3, [r7, #4]
 8083ba8:	681b      	ldr	r3, [r3, #0]
 8083baa:	f042 0208 	orr.w	r2, r2, #8
 8083bae:	60da      	str	r2, [r3, #12]
      break;
 8083bb0:	e009      	b.n	8083bc6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8083bb2:	687b      	ldr	r3, [r7, #4]
 8083bb4:	681b      	ldr	r3, [r3, #0]
 8083bb6:	68da      	ldr	r2, [r3, #12]
 8083bb8:	687b      	ldr	r3, [r7, #4]
 8083bba:	681b      	ldr	r3, [r3, #0]
 8083bbc:	f042 0210 	orr.w	r2, r2, #16
 8083bc0:	60da      	str	r2, [r3, #12]
      break;
 8083bc2:	e000      	b.n	8083bc6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8083bc4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8083bc6:	687b      	ldr	r3, [r7, #4]
 8083bc8:	681b      	ldr	r3, [r3, #0]
 8083bca:	2201      	movs	r2, #1
 8083bcc:	6839      	ldr	r1, [r7, #0]
 8083bce:	4618      	mov	r0, r3
 8083bd0:	f003 fec6 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8083bd4:	687b      	ldr	r3, [r7, #4]
 8083bd6:	681b      	ldr	r3, [r3, #0]
 8083bd8:	4a15      	ldr	r2, [pc, #84]	; (8083c30 <HAL_TIM_OC_Start_IT+0x100>)
 8083bda:	4293      	cmp	r3, r2
 8083bdc:	d004      	beq.n	8083be8 <HAL_TIM_OC_Start_IT+0xb8>
 8083bde:	687b      	ldr	r3, [r7, #4]
 8083be0:	681b      	ldr	r3, [r3, #0]
 8083be2:	4a14      	ldr	r2, [pc, #80]	; (8083c34 <HAL_TIM_OC_Start_IT+0x104>)
 8083be4:	4293      	cmp	r3, r2
 8083be6:	d101      	bne.n	8083bec <HAL_TIM_OC_Start_IT+0xbc>
 8083be8:	2301      	movs	r3, #1
 8083bea:	e000      	b.n	8083bee <HAL_TIM_OC_Start_IT+0xbe>
 8083bec:	2300      	movs	r3, #0
 8083bee:	2b00      	cmp	r3, #0
 8083bf0:	d007      	beq.n	8083c02 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8083bf2:	687b      	ldr	r3, [r7, #4]
 8083bf4:	681b      	ldr	r3, [r3, #0]
 8083bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8083bf8:	687b      	ldr	r3, [r7, #4]
 8083bfa:	681b      	ldr	r3, [r3, #0]
 8083bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8083c00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8083c02:	687b      	ldr	r3, [r7, #4]
 8083c04:	681b      	ldr	r3, [r3, #0]
 8083c06:	689b      	ldr	r3, [r3, #8]
 8083c08:	f003 0307 	and.w	r3, r3, #7
 8083c0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8083c0e:	68fb      	ldr	r3, [r7, #12]
 8083c10:	2b06      	cmp	r3, #6
 8083c12:	d007      	beq.n	8083c24 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8083c14:	687b      	ldr	r3, [r7, #4]
 8083c16:	681b      	ldr	r3, [r3, #0]
 8083c18:	681a      	ldr	r2, [r3, #0]
 8083c1a:	687b      	ldr	r3, [r7, #4]
 8083c1c:	681b      	ldr	r3, [r3, #0]
 8083c1e:	f042 0201 	orr.w	r2, r2, #1
 8083c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8083c24:	2300      	movs	r3, #0
}
 8083c26:	4618      	mov	r0, r3
 8083c28:	3710      	adds	r7, #16
 8083c2a:	46bd      	mov	sp, r7
 8083c2c:	bd80      	pop	{r7, pc}
 8083c2e:	bf00      	nop
 8083c30:	40010000 	.word	0x40010000
 8083c34:	40010400 	.word	0x40010400

08083c38 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8083c38:	b580      	push	{r7, lr}
 8083c3a:	b082      	sub	sp, #8
 8083c3c:	af00      	add	r7, sp, #0
 8083c3e:	6078      	str	r0, [r7, #4]
 8083c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8083c42:	683b      	ldr	r3, [r7, #0]
 8083c44:	2b0c      	cmp	r3, #12
 8083c46:	d841      	bhi.n	8083ccc <HAL_TIM_OC_Stop_IT+0x94>
 8083c48:	a201      	add	r2, pc, #4	; (adr r2, 8083c50 <HAL_TIM_OC_Stop_IT+0x18>)
 8083c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8083c4e:	bf00      	nop
 8083c50:	08083c85 	.word	0x08083c85
 8083c54:	08083ccd 	.word	0x08083ccd
 8083c58:	08083ccd 	.word	0x08083ccd
 8083c5c:	08083ccd 	.word	0x08083ccd
 8083c60:	08083c97 	.word	0x08083c97
 8083c64:	08083ccd 	.word	0x08083ccd
 8083c68:	08083ccd 	.word	0x08083ccd
 8083c6c:	08083ccd 	.word	0x08083ccd
 8083c70:	08083ca9 	.word	0x08083ca9
 8083c74:	08083ccd 	.word	0x08083ccd
 8083c78:	08083ccd 	.word	0x08083ccd
 8083c7c:	08083ccd 	.word	0x08083ccd
 8083c80:	08083cbb 	.word	0x08083cbb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8083c84:	687b      	ldr	r3, [r7, #4]
 8083c86:	681b      	ldr	r3, [r3, #0]
 8083c88:	68da      	ldr	r2, [r3, #12]
 8083c8a:	687b      	ldr	r3, [r7, #4]
 8083c8c:	681b      	ldr	r3, [r3, #0]
 8083c8e:	f022 0202 	bic.w	r2, r2, #2
 8083c92:	60da      	str	r2, [r3, #12]
      break;
 8083c94:	e01b      	b.n	8083cce <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8083c96:	687b      	ldr	r3, [r7, #4]
 8083c98:	681b      	ldr	r3, [r3, #0]
 8083c9a:	68da      	ldr	r2, [r3, #12]
 8083c9c:	687b      	ldr	r3, [r7, #4]
 8083c9e:	681b      	ldr	r3, [r3, #0]
 8083ca0:	f022 0204 	bic.w	r2, r2, #4
 8083ca4:	60da      	str	r2, [r3, #12]
      break;
 8083ca6:	e012      	b.n	8083cce <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8083ca8:	687b      	ldr	r3, [r7, #4]
 8083caa:	681b      	ldr	r3, [r3, #0]
 8083cac:	68da      	ldr	r2, [r3, #12]
 8083cae:	687b      	ldr	r3, [r7, #4]
 8083cb0:	681b      	ldr	r3, [r3, #0]
 8083cb2:	f022 0208 	bic.w	r2, r2, #8
 8083cb6:	60da      	str	r2, [r3, #12]
      break;
 8083cb8:	e009      	b.n	8083cce <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8083cba:	687b      	ldr	r3, [r7, #4]
 8083cbc:	681b      	ldr	r3, [r3, #0]
 8083cbe:	68da      	ldr	r2, [r3, #12]
 8083cc0:	687b      	ldr	r3, [r7, #4]
 8083cc2:	681b      	ldr	r3, [r3, #0]
 8083cc4:	f022 0210 	bic.w	r2, r2, #16
 8083cc8:	60da      	str	r2, [r3, #12]
      break;
 8083cca:	e000      	b.n	8083cce <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8083ccc:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8083cce:	687b      	ldr	r3, [r7, #4]
 8083cd0:	681b      	ldr	r3, [r3, #0]
 8083cd2:	2200      	movs	r2, #0
 8083cd4:	6839      	ldr	r1, [r7, #0]
 8083cd6:	4618      	mov	r0, r3
 8083cd8:	f003 fe42 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8083cdc:	687b      	ldr	r3, [r7, #4]
 8083cde:	681b      	ldr	r3, [r3, #0]
 8083ce0:	4a20      	ldr	r2, [pc, #128]	; (8083d64 <HAL_TIM_OC_Stop_IT+0x12c>)
 8083ce2:	4293      	cmp	r3, r2
 8083ce4:	d004      	beq.n	8083cf0 <HAL_TIM_OC_Stop_IT+0xb8>
 8083ce6:	687b      	ldr	r3, [r7, #4]
 8083ce8:	681b      	ldr	r3, [r3, #0]
 8083cea:	4a1f      	ldr	r2, [pc, #124]	; (8083d68 <HAL_TIM_OC_Stop_IT+0x130>)
 8083cec:	4293      	cmp	r3, r2
 8083cee:	d101      	bne.n	8083cf4 <HAL_TIM_OC_Stop_IT+0xbc>
 8083cf0:	2301      	movs	r3, #1
 8083cf2:	e000      	b.n	8083cf6 <HAL_TIM_OC_Stop_IT+0xbe>
 8083cf4:	2300      	movs	r3, #0
 8083cf6:	2b00      	cmp	r3, #0
 8083cf8:	d017      	beq.n	8083d2a <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8083cfa:	687b      	ldr	r3, [r7, #4]
 8083cfc:	681b      	ldr	r3, [r3, #0]
 8083cfe:	6a1a      	ldr	r2, [r3, #32]
 8083d00:	f241 1311 	movw	r3, #4369	; 0x1111
 8083d04:	4013      	ands	r3, r2
 8083d06:	2b00      	cmp	r3, #0
 8083d08:	d10f      	bne.n	8083d2a <HAL_TIM_OC_Stop_IT+0xf2>
 8083d0a:	687b      	ldr	r3, [r7, #4]
 8083d0c:	681b      	ldr	r3, [r3, #0]
 8083d0e:	6a1a      	ldr	r2, [r3, #32]
 8083d10:	f240 4344 	movw	r3, #1092	; 0x444
 8083d14:	4013      	ands	r3, r2
 8083d16:	2b00      	cmp	r3, #0
 8083d18:	d107      	bne.n	8083d2a <HAL_TIM_OC_Stop_IT+0xf2>
 8083d1a:	687b      	ldr	r3, [r7, #4]
 8083d1c:	681b      	ldr	r3, [r3, #0]
 8083d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8083d20:	687b      	ldr	r3, [r7, #4]
 8083d22:	681b      	ldr	r3, [r3, #0]
 8083d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8083d28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8083d2a:	687b      	ldr	r3, [r7, #4]
 8083d2c:	681b      	ldr	r3, [r3, #0]
 8083d2e:	6a1a      	ldr	r2, [r3, #32]
 8083d30:	f241 1311 	movw	r3, #4369	; 0x1111
 8083d34:	4013      	ands	r3, r2
 8083d36:	2b00      	cmp	r3, #0
 8083d38:	d10f      	bne.n	8083d5a <HAL_TIM_OC_Stop_IT+0x122>
 8083d3a:	687b      	ldr	r3, [r7, #4]
 8083d3c:	681b      	ldr	r3, [r3, #0]
 8083d3e:	6a1a      	ldr	r2, [r3, #32]
 8083d40:	f240 4344 	movw	r3, #1092	; 0x444
 8083d44:	4013      	ands	r3, r2
 8083d46:	2b00      	cmp	r3, #0
 8083d48:	d107      	bne.n	8083d5a <HAL_TIM_OC_Stop_IT+0x122>
 8083d4a:	687b      	ldr	r3, [r7, #4]
 8083d4c:	681b      	ldr	r3, [r3, #0]
 8083d4e:	681a      	ldr	r2, [r3, #0]
 8083d50:	687b      	ldr	r3, [r7, #4]
 8083d52:	681b      	ldr	r3, [r3, #0]
 8083d54:	f022 0201 	bic.w	r2, r2, #1
 8083d58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8083d5a:	2300      	movs	r3, #0
}
 8083d5c:	4618      	mov	r0, r3
 8083d5e:	3708      	adds	r7, #8
 8083d60:	46bd      	mov	sp, r7
 8083d62:	bd80      	pop	{r7, pc}
 8083d64:	40010000 	.word	0x40010000
 8083d68:	40010400 	.word	0x40010400

08083d6c <HAL_TIM_OC_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8083d6c:	b580      	push	{r7, lr}
 8083d6e:	b086      	sub	sp, #24
 8083d70:	af00      	add	r7, sp, #0
 8083d72:	60f8      	str	r0, [r7, #12]
 8083d74:	60b9      	str	r1, [r7, #8]
 8083d76:	607a      	str	r2, [r7, #4]
 8083d78:	807b      	strh	r3, [r7, #2]
   uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8083d7a:	68fb      	ldr	r3, [r7, #12]
 8083d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8083d80:	b2db      	uxtb	r3, r3
 8083d82:	2b02      	cmp	r3, #2
 8083d84:	d101      	bne.n	8083d8a <HAL_TIM_OC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8083d86:	2302      	movs	r3, #2
 8083d88:	e0f3      	b.n	8083f72 <HAL_TIM_OC_Start_DMA+0x206>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8083d8a:	68fb      	ldr	r3, [r7, #12]
 8083d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8083d90:	b2db      	uxtb	r3, r3
 8083d92:	2b01      	cmp	r3, #1
 8083d94:	d10b      	bne.n	8083dae <HAL_TIM_OC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8083d96:	687b      	ldr	r3, [r7, #4]
 8083d98:	2b00      	cmp	r3, #0
 8083d9a:	d104      	bne.n	8083da6 <HAL_TIM_OC_Start_DMA+0x3a>
 8083d9c:	887b      	ldrh	r3, [r7, #2]
 8083d9e:	2b00      	cmp	r3, #0
 8083da0:	d001      	beq.n	8083da6 <HAL_TIM_OC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8083da2:	2301      	movs	r3, #1
 8083da4:	e0e5      	b.n	8083f72 <HAL_TIM_OC_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8083da6:	68fb      	ldr	r3, [r7, #12]
 8083da8:	2202      	movs	r2, #2
 8083daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8083dae:	68bb      	ldr	r3, [r7, #8]
 8083db0:	2b0c      	cmp	r3, #12
 8083db2:	f200 80ad 	bhi.w	8083f10 <HAL_TIM_OC_Start_DMA+0x1a4>
 8083db6:	a201      	add	r2, pc, #4	; (adr r2, 8083dbc <HAL_TIM_OC_Start_DMA+0x50>)
 8083db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8083dbc:	08083df1 	.word	0x08083df1
 8083dc0:	08083f11 	.word	0x08083f11
 8083dc4:	08083f11 	.word	0x08083f11
 8083dc8:	08083f11 	.word	0x08083f11
 8083dcc:	08083e39 	.word	0x08083e39
 8083dd0:	08083f11 	.word	0x08083f11
 8083dd4:	08083f11 	.word	0x08083f11
 8083dd8:	08083f11 	.word	0x08083f11
 8083ddc:	08083e81 	.word	0x08083e81
 8083de0:	08083f11 	.word	0x08083f11
 8083de4:	08083f11 	.word	0x08083f11
 8083de8:	08083f11 	.word	0x08083f11
 8083dec:	08083ec9 	.word	0x08083ec9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8083df0:	68fb      	ldr	r3, [r7, #12]
 8083df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083df4:	4a61      	ldr	r2, [pc, #388]	; (8083f7c <HAL_TIM_OC_Start_DMA+0x210>)
 8083df6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8083df8:	68fb      	ldr	r3, [r7, #12]
 8083dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083dfc:	4a60      	ldr	r2, [pc, #384]	; (8083f80 <HAL_TIM_OC_Start_DMA+0x214>)
 8083dfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8083e00:	68fb      	ldr	r3, [r7, #12]
 8083e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083e04:	4a5f      	ldr	r2, [pc, #380]	; (8083f84 <HAL_TIM_OC_Start_DMA+0x218>)
 8083e06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8083e08:	68fb      	ldr	r3, [r7, #12]
 8083e0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8083e0c:	6879      	ldr	r1, [r7, #4]
 8083e0e:	68fb      	ldr	r3, [r7, #12]
 8083e10:	681b      	ldr	r3, [r3, #0]
 8083e12:	3334      	adds	r3, #52	; 0x34
 8083e14:	461a      	mov	r2, r3
 8083e16:	887b      	ldrh	r3, [r7, #2]
 8083e18:	f7fd fe1b 	bl	8081a52 <HAL_DMA_Start_IT>
 8083e1c:	4603      	mov	r3, r0
 8083e1e:	2b00      	cmp	r3, #0
 8083e20:	d001      	beq.n	8083e26 <HAL_TIM_OC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8083e22:	2301      	movs	r3, #1
 8083e24:	e0a5      	b.n	8083f72 <HAL_TIM_OC_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8083e26:	68fb      	ldr	r3, [r7, #12]
 8083e28:	681b      	ldr	r3, [r3, #0]
 8083e2a:	68da      	ldr	r2, [r3, #12]
 8083e2c:	68fb      	ldr	r3, [r7, #12]
 8083e2e:	681b      	ldr	r3, [r3, #0]
 8083e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8083e34:	60da      	str	r2, [r3, #12]
      break;
 8083e36:	e06c      	b.n	8083f12 <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8083e38:	68fb      	ldr	r3, [r7, #12]
 8083e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083e3c:	4a4f      	ldr	r2, [pc, #316]	; (8083f7c <HAL_TIM_OC_Start_DMA+0x210>)
 8083e3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8083e40:	68fb      	ldr	r3, [r7, #12]
 8083e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083e44:	4a4e      	ldr	r2, [pc, #312]	; (8083f80 <HAL_TIM_OC_Start_DMA+0x214>)
 8083e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8083e48:	68fb      	ldr	r3, [r7, #12]
 8083e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083e4c:	4a4d      	ldr	r2, [pc, #308]	; (8083f84 <HAL_TIM_OC_Start_DMA+0x218>)
 8083e4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8083e50:	68fb      	ldr	r3, [r7, #12]
 8083e52:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8083e54:	6879      	ldr	r1, [r7, #4]
 8083e56:	68fb      	ldr	r3, [r7, #12]
 8083e58:	681b      	ldr	r3, [r3, #0]
 8083e5a:	3338      	adds	r3, #56	; 0x38
 8083e5c:	461a      	mov	r2, r3
 8083e5e:	887b      	ldrh	r3, [r7, #2]
 8083e60:	f7fd fdf7 	bl	8081a52 <HAL_DMA_Start_IT>
 8083e64:	4603      	mov	r3, r0
 8083e66:	2b00      	cmp	r3, #0
 8083e68:	d001      	beq.n	8083e6e <HAL_TIM_OC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8083e6a:	2301      	movs	r3, #1
 8083e6c:	e081      	b.n	8083f72 <HAL_TIM_OC_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8083e6e:	68fb      	ldr	r3, [r7, #12]
 8083e70:	681b      	ldr	r3, [r3, #0]
 8083e72:	68da      	ldr	r2, [r3, #12]
 8083e74:	68fb      	ldr	r3, [r7, #12]
 8083e76:	681b      	ldr	r3, [r3, #0]
 8083e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8083e7c:	60da      	str	r2, [r3, #12]
      break;
 8083e7e:	e048      	b.n	8083f12 <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8083e80:	68fb      	ldr	r3, [r7, #12]
 8083e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083e84:	4a3d      	ldr	r2, [pc, #244]	; (8083f7c <HAL_TIM_OC_Start_DMA+0x210>)
 8083e86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8083e88:	68fb      	ldr	r3, [r7, #12]
 8083e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083e8c:	4a3c      	ldr	r2, [pc, #240]	; (8083f80 <HAL_TIM_OC_Start_DMA+0x214>)
 8083e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8083e90:	68fb      	ldr	r3, [r7, #12]
 8083e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083e94:	4a3b      	ldr	r2, [pc, #236]	; (8083f84 <HAL_TIM_OC_Start_DMA+0x218>)
 8083e96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8083e98:	68fb      	ldr	r3, [r7, #12]
 8083e9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8083e9c:	6879      	ldr	r1, [r7, #4]
 8083e9e:	68fb      	ldr	r3, [r7, #12]
 8083ea0:	681b      	ldr	r3, [r3, #0]
 8083ea2:	333c      	adds	r3, #60	; 0x3c
 8083ea4:	461a      	mov	r2, r3
 8083ea6:	887b      	ldrh	r3, [r7, #2]
 8083ea8:	f7fd fdd3 	bl	8081a52 <HAL_DMA_Start_IT>
 8083eac:	4603      	mov	r3, r0
 8083eae:	2b00      	cmp	r3, #0
 8083eb0:	d001      	beq.n	8083eb6 <HAL_TIM_OC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8083eb2:	2301      	movs	r3, #1
 8083eb4:	e05d      	b.n	8083f72 <HAL_TIM_OC_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8083eb6:	68fb      	ldr	r3, [r7, #12]
 8083eb8:	681b      	ldr	r3, [r3, #0]
 8083eba:	68da      	ldr	r2, [r3, #12]
 8083ebc:	68fb      	ldr	r3, [r7, #12]
 8083ebe:	681b      	ldr	r3, [r3, #0]
 8083ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8083ec4:	60da      	str	r2, [r3, #12]
      break;
 8083ec6:	e024      	b.n	8083f12 <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8083ec8:	68fb      	ldr	r3, [r7, #12]
 8083eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083ecc:	4a2b      	ldr	r2, [pc, #172]	; (8083f7c <HAL_TIM_OC_Start_DMA+0x210>)
 8083ece:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8083ed0:	68fb      	ldr	r3, [r7, #12]
 8083ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083ed4:	4a2a      	ldr	r2, [pc, #168]	; (8083f80 <HAL_TIM_OC_Start_DMA+0x214>)
 8083ed6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8083ed8:	68fb      	ldr	r3, [r7, #12]
 8083eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083edc:	4a29      	ldr	r2, [pc, #164]	; (8083f84 <HAL_TIM_OC_Start_DMA+0x218>)
 8083ede:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8083ee0:	68fb      	ldr	r3, [r7, #12]
 8083ee2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8083ee4:	6879      	ldr	r1, [r7, #4]
 8083ee6:	68fb      	ldr	r3, [r7, #12]
 8083ee8:	681b      	ldr	r3, [r3, #0]
 8083eea:	3340      	adds	r3, #64	; 0x40
 8083eec:	461a      	mov	r2, r3
 8083eee:	887b      	ldrh	r3, [r7, #2]
 8083ef0:	f7fd fdaf 	bl	8081a52 <HAL_DMA_Start_IT>
 8083ef4:	4603      	mov	r3, r0
 8083ef6:	2b00      	cmp	r3, #0
 8083ef8:	d001      	beq.n	8083efe <HAL_TIM_OC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8083efa:	2301      	movs	r3, #1
 8083efc:	e039      	b.n	8083f72 <HAL_TIM_OC_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8083efe:	68fb      	ldr	r3, [r7, #12]
 8083f00:	681b      	ldr	r3, [r3, #0]
 8083f02:	68da      	ldr	r2, [r3, #12]
 8083f04:	68fb      	ldr	r3, [r7, #12]
 8083f06:	681b      	ldr	r3, [r3, #0]
 8083f08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8083f0c:	60da      	str	r2, [r3, #12]
      break;
 8083f0e:	e000      	b.n	8083f12 <HAL_TIM_OC_Start_DMA+0x1a6>
    }

    default:
      break;
 8083f10:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8083f12:	68fb      	ldr	r3, [r7, #12]
 8083f14:	681b      	ldr	r3, [r3, #0]
 8083f16:	2201      	movs	r2, #1
 8083f18:	68b9      	ldr	r1, [r7, #8]
 8083f1a:	4618      	mov	r0, r3
 8083f1c:	f003 fd20 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8083f20:	68fb      	ldr	r3, [r7, #12]
 8083f22:	681b      	ldr	r3, [r3, #0]
 8083f24:	4a18      	ldr	r2, [pc, #96]	; (8083f88 <HAL_TIM_OC_Start_DMA+0x21c>)
 8083f26:	4293      	cmp	r3, r2
 8083f28:	d004      	beq.n	8083f34 <HAL_TIM_OC_Start_DMA+0x1c8>
 8083f2a:	68fb      	ldr	r3, [r7, #12]
 8083f2c:	681b      	ldr	r3, [r3, #0]
 8083f2e:	4a17      	ldr	r2, [pc, #92]	; (8083f8c <HAL_TIM_OC_Start_DMA+0x220>)
 8083f30:	4293      	cmp	r3, r2
 8083f32:	d101      	bne.n	8083f38 <HAL_TIM_OC_Start_DMA+0x1cc>
 8083f34:	2301      	movs	r3, #1
 8083f36:	e000      	b.n	8083f3a <HAL_TIM_OC_Start_DMA+0x1ce>
 8083f38:	2300      	movs	r3, #0
 8083f3a:	2b00      	cmp	r3, #0
 8083f3c:	d007      	beq.n	8083f4e <HAL_TIM_OC_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8083f3e:	68fb      	ldr	r3, [r7, #12]
 8083f40:	681b      	ldr	r3, [r3, #0]
 8083f42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8083f44:	68fb      	ldr	r3, [r7, #12]
 8083f46:	681b      	ldr	r3, [r3, #0]
 8083f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8083f4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8083f4e:	68fb      	ldr	r3, [r7, #12]
 8083f50:	681b      	ldr	r3, [r3, #0]
 8083f52:	689b      	ldr	r3, [r3, #8]
 8083f54:	f003 0307 	and.w	r3, r3, #7
 8083f58:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8083f5a:	697b      	ldr	r3, [r7, #20]
 8083f5c:	2b06      	cmp	r3, #6
 8083f5e:	d007      	beq.n	8083f70 <HAL_TIM_OC_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8083f60:	68fb      	ldr	r3, [r7, #12]
 8083f62:	681b      	ldr	r3, [r3, #0]
 8083f64:	681a      	ldr	r2, [r3, #0]
 8083f66:	68fb      	ldr	r3, [r7, #12]
 8083f68:	681b      	ldr	r3, [r3, #0]
 8083f6a:	f042 0201 	orr.w	r2, r2, #1
 8083f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8083f70:	2300      	movs	r3, #0
}
 8083f72:	4618      	mov	r0, r3
 8083f74:	3718      	adds	r7, #24
 8083f76:	46bd      	mov	sp, r7
 8083f78:	bd80      	pop	{r7, pc}
 8083f7a:	bf00      	nop
 8083f7c:	08086ddd 	.word	0x08086ddd
 8083f80:	08086e4d 	.word	0x08086e4d
 8083f84:	08086db9 	.word	0x08086db9
 8083f88:	40010000 	.word	0x40010000
 8083f8c:	40010400 	.word	0x40010400

08083f90 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8083f90:	b580      	push	{r7, lr}
 8083f92:	b082      	sub	sp, #8
 8083f94:	af00      	add	r7, sp, #0
 8083f96:	6078      	str	r0, [r7, #4]
 8083f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8083f9a:	683b      	ldr	r3, [r7, #0]
 8083f9c:	2b0c      	cmp	r3, #12
 8083f9e:	d855      	bhi.n	808404c <HAL_TIM_OC_Stop_DMA+0xbc>
 8083fa0:	a201      	add	r2, pc, #4	; (adr r2, 8083fa8 <HAL_TIM_OC_Stop_DMA+0x18>)
 8083fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8083fa6:	bf00      	nop
 8083fa8:	08083fdd 	.word	0x08083fdd
 8083fac:	0808404d 	.word	0x0808404d
 8083fb0:	0808404d 	.word	0x0808404d
 8083fb4:	0808404d 	.word	0x0808404d
 8083fb8:	08083ff9 	.word	0x08083ff9
 8083fbc:	0808404d 	.word	0x0808404d
 8083fc0:	0808404d 	.word	0x0808404d
 8083fc4:	0808404d 	.word	0x0808404d
 8083fc8:	08084015 	.word	0x08084015
 8083fcc:	0808404d 	.word	0x0808404d
 8083fd0:	0808404d 	.word	0x0808404d
 8083fd4:	0808404d 	.word	0x0808404d
 8083fd8:	08084031 	.word	0x08084031
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8083fdc:	687b      	ldr	r3, [r7, #4]
 8083fde:	681b      	ldr	r3, [r3, #0]
 8083fe0:	68da      	ldr	r2, [r3, #12]
 8083fe2:	687b      	ldr	r3, [r7, #4]
 8083fe4:	681b      	ldr	r3, [r3, #0]
 8083fe6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8083fea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8083fec:	687b      	ldr	r3, [r7, #4]
 8083fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083ff0:	4618      	mov	r0, r3
 8083ff2:	f7fd fdfe 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 8083ff6:	e02a      	b.n	808404e <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8083ff8:	687b      	ldr	r3, [r7, #4]
 8083ffa:	681b      	ldr	r3, [r3, #0]
 8083ffc:	68da      	ldr	r2, [r3, #12]
 8083ffe:	687b      	ldr	r3, [r7, #4]
 8084000:	681b      	ldr	r3, [r3, #0]
 8084002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8084006:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8084008:	687b      	ldr	r3, [r7, #4]
 808400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808400c:	4618      	mov	r0, r3
 808400e:	f7fd fdf0 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 8084012:	e01c      	b.n	808404e <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8084014:	687b      	ldr	r3, [r7, #4]
 8084016:	681b      	ldr	r3, [r3, #0]
 8084018:	68da      	ldr	r2, [r3, #12]
 808401a:	687b      	ldr	r3, [r7, #4]
 808401c:	681b      	ldr	r3, [r3, #0]
 808401e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8084022:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8084024:	687b      	ldr	r3, [r7, #4]
 8084026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084028:	4618      	mov	r0, r3
 808402a:	f7fd fde2 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 808402e:	e00e      	b.n	808404e <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8084030:	687b      	ldr	r3, [r7, #4]
 8084032:	681b      	ldr	r3, [r3, #0]
 8084034:	68da      	ldr	r2, [r3, #12]
 8084036:	687b      	ldr	r3, [r7, #4]
 8084038:	681b      	ldr	r3, [r3, #0]
 808403a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 808403e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8084040:	687b      	ldr	r3, [r7, #4]
 8084042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084044:	4618      	mov	r0, r3
 8084046:	f7fd fdd4 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 808404a:	e000      	b.n	808404e <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    default:
      break;
 808404c:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 808404e:	687b      	ldr	r3, [r7, #4]
 8084050:	681b      	ldr	r3, [r3, #0]
 8084052:	2200      	movs	r2, #0
 8084054:	6839      	ldr	r1, [r7, #0]
 8084056:	4618      	mov	r0, r3
 8084058:	f003 fc82 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 808405c:	687b      	ldr	r3, [r7, #4]
 808405e:	681b      	ldr	r3, [r3, #0]
 8084060:	4a22      	ldr	r2, [pc, #136]	; (80840ec <HAL_TIM_OC_Stop_DMA+0x15c>)
 8084062:	4293      	cmp	r3, r2
 8084064:	d004      	beq.n	8084070 <HAL_TIM_OC_Stop_DMA+0xe0>
 8084066:	687b      	ldr	r3, [r7, #4]
 8084068:	681b      	ldr	r3, [r3, #0]
 808406a:	4a21      	ldr	r2, [pc, #132]	; (80840f0 <HAL_TIM_OC_Stop_DMA+0x160>)
 808406c:	4293      	cmp	r3, r2
 808406e:	d101      	bne.n	8084074 <HAL_TIM_OC_Stop_DMA+0xe4>
 8084070:	2301      	movs	r3, #1
 8084072:	e000      	b.n	8084076 <HAL_TIM_OC_Stop_DMA+0xe6>
 8084074:	2300      	movs	r3, #0
 8084076:	2b00      	cmp	r3, #0
 8084078:	d017      	beq.n	80840aa <HAL_TIM_OC_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 808407a:	687b      	ldr	r3, [r7, #4]
 808407c:	681b      	ldr	r3, [r3, #0]
 808407e:	6a1a      	ldr	r2, [r3, #32]
 8084080:	f241 1311 	movw	r3, #4369	; 0x1111
 8084084:	4013      	ands	r3, r2
 8084086:	2b00      	cmp	r3, #0
 8084088:	d10f      	bne.n	80840aa <HAL_TIM_OC_Stop_DMA+0x11a>
 808408a:	687b      	ldr	r3, [r7, #4]
 808408c:	681b      	ldr	r3, [r3, #0]
 808408e:	6a1a      	ldr	r2, [r3, #32]
 8084090:	f240 4344 	movw	r3, #1092	; 0x444
 8084094:	4013      	ands	r3, r2
 8084096:	2b00      	cmp	r3, #0
 8084098:	d107      	bne.n	80840aa <HAL_TIM_OC_Stop_DMA+0x11a>
 808409a:	687b      	ldr	r3, [r7, #4]
 808409c:	681b      	ldr	r3, [r3, #0]
 808409e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80840a0:	687b      	ldr	r3, [r7, #4]
 80840a2:	681b      	ldr	r3, [r3, #0]
 80840a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80840a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80840aa:	687b      	ldr	r3, [r7, #4]
 80840ac:	681b      	ldr	r3, [r3, #0]
 80840ae:	6a1a      	ldr	r2, [r3, #32]
 80840b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80840b4:	4013      	ands	r3, r2
 80840b6:	2b00      	cmp	r3, #0
 80840b8:	d10f      	bne.n	80840da <HAL_TIM_OC_Stop_DMA+0x14a>
 80840ba:	687b      	ldr	r3, [r7, #4]
 80840bc:	681b      	ldr	r3, [r3, #0]
 80840be:	6a1a      	ldr	r2, [r3, #32]
 80840c0:	f240 4344 	movw	r3, #1092	; 0x444
 80840c4:	4013      	ands	r3, r2
 80840c6:	2b00      	cmp	r3, #0
 80840c8:	d107      	bne.n	80840da <HAL_TIM_OC_Stop_DMA+0x14a>
 80840ca:	687b      	ldr	r3, [r7, #4]
 80840cc:	681b      	ldr	r3, [r3, #0]
 80840ce:	681a      	ldr	r2, [r3, #0]
 80840d0:	687b      	ldr	r3, [r7, #4]
 80840d2:	681b      	ldr	r3, [r3, #0]
 80840d4:	f022 0201 	bic.w	r2, r2, #1
 80840d8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80840da:	687b      	ldr	r3, [r7, #4]
 80840dc:	2201      	movs	r2, #1
 80840de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80840e2:	2300      	movs	r3, #0
}
 80840e4:	4618      	mov	r0, r3
 80840e6:	3708      	adds	r7, #8
 80840e8:	46bd      	mov	sp, r7
 80840ea:	bd80      	pop	{r7, pc}
 80840ec:	40010000 	.word	0x40010000
 80840f0:	40010400 	.word	0x40010400

080840f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80840f4:	b580      	push	{r7, lr}
 80840f6:	b082      	sub	sp, #8
 80840f8:	af00      	add	r7, sp, #0
 80840fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80840fc:	687b      	ldr	r3, [r7, #4]
 80840fe:	2b00      	cmp	r3, #0
 8084100:	d101      	bne.n	8084106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8084102:	2301      	movs	r3, #1
 8084104:	e01d      	b.n	8084142 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8084106:	687b      	ldr	r3, [r7, #4]
 8084108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 808410c:	b2db      	uxtb	r3, r3
 808410e:	2b00      	cmp	r3, #0
 8084110:	d106      	bne.n	8084120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8084112:	687b      	ldr	r3, [r7, #4]
 8084114:	2200      	movs	r2, #0
 8084116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 808411a:	6878      	ldr	r0, [r7, #4]
 808411c:	f000 f845 	bl	80841aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8084120:	687b      	ldr	r3, [r7, #4]
 8084122:	2202      	movs	r2, #2
 8084124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8084128:	687b      	ldr	r3, [r7, #4]
 808412a:	681a      	ldr	r2, [r3, #0]
 808412c:	687b      	ldr	r3, [r7, #4]
 808412e:	3304      	adds	r3, #4
 8084130:	4619      	mov	r1, r3
 8084132:	4610      	mov	r0, r2
 8084134:	f002 ff7a 	bl	808702c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8084138:	687b      	ldr	r3, [r7, #4]
 808413a:	2201      	movs	r2, #1
 808413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8084140:	2300      	movs	r3, #0
}
 8084142:	4618      	mov	r0, r3
 8084144:	3708      	adds	r7, #8
 8084146:	46bd      	mov	sp, r7
 8084148:	bd80      	pop	{r7, pc}

0808414a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 808414a:	b580      	push	{r7, lr}
 808414c:	b082      	sub	sp, #8
 808414e:	af00      	add	r7, sp, #0
 8084150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8084152:	687b      	ldr	r3, [r7, #4]
 8084154:	2202      	movs	r2, #2
 8084156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 808415a:	687b      	ldr	r3, [r7, #4]
 808415c:	681b      	ldr	r3, [r3, #0]
 808415e:	6a1a      	ldr	r2, [r3, #32]
 8084160:	f241 1311 	movw	r3, #4369	; 0x1111
 8084164:	4013      	ands	r3, r2
 8084166:	2b00      	cmp	r3, #0
 8084168:	d10f      	bne.n	808418a <HAL_TIM_PWM_DeInit+0x40>
 808416a:	687b      	ldr	r3, [r7, #4]
 808416c:	681b      	ldr	r3, [r3, #0]
 808416e:	6a1a      	ldr	r2, [r3, #32]
 8084170:	f240 4344 	movw	r3, #1092	; 0x444
 8084174:	4013      	ands	r3, r2
 8084176:	2b00      	cmp	r3, #0
 8084178:	d107      	bne.n	808418a <HAL_TIM_PWM_DeInit+0x40>
 808417a:	687b      	ldr	r3, [r7, #4]
 808417c:	681b      	ldr	r3, [r3, #0]
 808417e:	681a      	ldr	r2, [r3, #0]
 8084180:	687b      	ldr	r3, [r7, #4]
 8084182:	681b      	ldr	r3, [r3, #0]
 8084184:	f022 0201 	bic.w	r2, r2, #1
 8084188:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 808418a:	6878      	ldr	r0, [r7, #4]
 808418c:	f000 f817 	bl	80841be <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8084190:	687b      	ldr	r3, [r7, #4]
 8084192:	2200      	movs	r2, #0
 8084194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8084198:	687b      	ldr	r3, [r7, #4]
 808419a:	2200      	movs	r2, #0
 808419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80841a0:	2300      	movs	r3, #0
}
 80841a2:	4618      	mov	r0, r3
 80841a4:	3708      	adds	r7, #8
 80841a6:	46bd      	mov	sp, r7
 80841a8:	bd80      	pop	{r7, pc}

080841aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80841aa:	b480      	push	{r7}
 80841ac:	b083      	sub	sp, #12
 80841ae:	af00      	add	r7, sp, #0
 80841b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80841b2:	bf00      	nop
 80841b4:	370c      	adds	r7, #12
 80841b6:	46bd      	mov	sp, r7
 80841b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80841bc:	4770      	bx	lr

080841be <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 80841be:	b480      	push	{r7}
 80841c0:	b083      	sub	sp, #12
 80841c2:	af00      	add	r7, sp, #0
 80841c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 80841c6:	bf00      	nop
 80841c8:	370c      	adds	r7, #12
 80841ca:	46bd      	mov	sp, r7
 80841cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80841d0:	4770      	bx	lr

080841d2 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80841d2:	b580      	push	{r7, lr}
 80841d4:	b084      	sub	sp, #16
 80841d6:	af00      	add	r7, sp, #0
 80841d8:	6078      	str	r0, [r7, #4]
 80841da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80841dc:	687b      	ldr	r3, [r7, #4]
 80841de:	681b      	ldr	r3, [r3, #0]
 80841e0:	2201      	movs	r2, #1
 80841e2:	6839      	ldr	r1, [r7, #0]
 80841e4:	4618      	mov	r0, r3
 80841e6:	f003 fbbb 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80841ea:	687b      	ldr	r3, [r7, #4]
 80841ec:	681b      	ldr	r3, [r3, #0]
 80841ee:	4a15      	ldr	r2, [pc, #84]	; (8084244 <HAL_TIM_PWM_Start+0x72>)
 80841f0:	4293      	cmp	r3, r2
 80841f2:	d004      	beq.n	80841fe <HAL_TIM_PWM_Start+0x2c>
 80841f4:	687b      	ldr	r3, [r7, #4]
 80841f6:	681b      	ldr	r3, [r3, #0]
 80841f8:	4a13      	ldr	r2, [pc, #76]	; (8084248 <HAL_TIM_PWM_Start+0x76>)
 80841fa:	4293      	cmp	r3, r2
 80841fc:	d101      	bne.n	8084202 <HAL_TIM_PWM_Start+0x30>
 80841fe:	2301      	movs	r3, #1
 8084200:	e000      	b.n	8084204 <HAL_TIM_PWM_Start+0x32>
 8084202:	2300      	movs	r3, #0
 8084204:	2b00      	cmp	r3, #0
 8084206:	d007      	beq.n	8084218 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8084208:	687b      	ldr	r3, [r7, #4]
 808420a:	681b      	ldr	r3, [r3, #0]
 808420c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 808420e:	687b      	ldr	r3, [r7, #4]
 8084210:	681b      	ldr	r3, [r3, #0]
 8084212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8084216:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8084218:	687b      	ldr	r3, [r7, #4]
 808421a:	681b      	ldr	r3, [r3, #0]
 808421c:	689b      	ldr	r3, [r3, #8]
 808421e:	f003 0307 	and.w	r3, r3, #7
 8084222:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8084224:	68fb      	ldr	r3, [r7, #12]
 8084226:	2b06      	cmp	r3, #6
 8084228:	d007      	beq.n	808423a <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 808422a:	687b      	ldr	r3, [r7, #4]
 808422c:	681b      	ldr	r3, [r3, #0]
 808422e:	681a      	ldr	r2, [r3, #0]
 8084230:	687b      	ldr	r3, [r7, #4]
 8084232:	681b      	ldr	r3, [r3, #0]
 8084234:	f042 0201 	orr.w	r2, r2, #1
 8084238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 808423a:	2300      	movs	r3, #0
}
 808423c:	4618      	mov	r0, r3
 808423e:	3710      	adds	r7, #16
 8084240:	46bd      	mov	sp, r7
 8084242:	bd80      	pop	{r7, pc}
 8084244:	40010000 	.word	0x40010000
 8084248:	40010400 	.word	0x40010400

0808424c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 808424c:	b580      	push	{r7, lr}
 808424e:	b082      	sub	sp, #8
 8084250:	af00      	add	r7, sp, #0
 8084252:	6078      	str	r0, [r7, #4]
 8084254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8084256:	687b      	ldr	r3, [r7, #4]
 8084258:	681b      	ldr	r3, [r3, #0]
 808425a:	2200      	movs	r2, #0
 808425c:	6839      	ldr	r1, [r7, #0]
 808425e:	4618      	mov	r0, r3
 8084260:	f003 fb7e 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8084264:	687b      	ldr	r3, [r7, #4]
 8084266:	681b      	ldr	r3, [r3, #0]
 8084268:	4a22      	ldr	r2, [pc, #136]	; (80842f4 <HAL_TIM_PWM_Stop+0xa8>)
 808426a:	4293      	cmp	r3, r2
 808426c:	d004      	beq.n	8084278 <HAL_TIM_PWM_Stop+0x2c>
 808426e:	687b      	ldr	r3, [r7, #4]
 8084270:	681b      	ldr	r3, [r3, #0]
 8084272:	4a21      	ldr	r2, [pc, #132]	; (80842f8 <HAL_TIM_PWM_Stop+0xac>)
 8084274:	4293      	cmp	r3, r2
 8084276:	d101      	bne.n	808427c <HAL_TIM_PWM_Stop+0x30>
 8084278:	2301      	movs	r3, #1
 808427a:	e000      	b.n	808427e <HAL_TIM_PWM_Stop+0x32>
 808427c:	2300      	movs	r3, #0
 808427e:	2b00      	cmp	r3, #0
 8084280:	d017      	beq.n	80842b2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8084282:	687b      	ldr	r3, [r7, #4]
 8084284:	681b      	ldr	r3, [r3, #0]
 8084286:	6a1a      	ldr	r2, [r3, #32]
 8084288:	f241 1311 	movw	r3, #4369	; 0x1111
 808428c:	4013      	ands	r3, r2
 808428e:	2b00      	cmp	r3, #0
 8084290:	d10f      	bne.n	80842b2 <HAL_TIM_PWM_Stop+0x66>
 8084292:	687b      	ldr	r3, [r7, #4]
 8084294:	681b      	ldr	r3, [r3, #0]
 8084296:	6a1a      	ldr	r2, [r3, #32]
 8084298:	f240 4344 	movw	r3, #1092	; 0x444
 808429c:	4013      	ands	r3, r2
 808429e:	2b00      	cmp	r3, #0
 80842a0:	d107      	bne.n	80842b2 <HAL_TIM_PWM_Stop+0x66>
 80842a2:	687b      	ldr	r3, [r7, #4]
 80842a4:	681b      	ldr	r3, [r3, #0]
 80842a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80842a8:	687b      	ldr	r3, [r7, #4]
 80842aa:	681b      	ldr	r3, [r3, #0]
 80842ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80842b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80842b2:	687b      	ldr	r3, [r7, #4]
 80842b4:	681b      	ldr	r3, [r3, #0]
 80842b6:	6a1a      	ldr	r2, [r3, #32]
 80842b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80842bc:	4013      	ands	r3, r2
 80842be:	2b00      	cmp	r3, #0
 80842c0:	d10f      	bne.n	80842e2 <HAL_TIM_PWM_Stop+0x96>
 80842c2:	687b      	ldr	r3, [r7, #4]
 80842c4:	681b      	ldr	r3, [r3, #0]
 80842c6:	6a1a      	ldr	r2, [r3, #32]
 80842c8:	f240 4344 	movw	r3, #1092	; 0x444
 80842cc:	4013      	ands	r3, r2
 80842ce:	2b00      	cmp	r3, #0
 80842d0:	d107      	bne.n	80842e2 <HAL_TIM_PWM_Stop+0x96>
 80842d2:	687b      	ldr	r3, [r7, #4]
 80842d4:	681b      	ldr	r3, [r3, #0]
 80842d6:	681a      	ldr	r2, [r3, #0]
 80842d8:	687b      	ldr	r3, [r7, #4]
 80842da:	681b      	ldr	r3, [r3, #0]
 80842dc:	f022 0201 	bic.w	r2, r2, #1
 80842e0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80842e2:	687b      	ldr	r3, [r7, #4]
 80842e4:	2201      	movs	r2, #1
 80842e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80842ea:	2300      	movs	r3, #0
}
 80842ec:	4618      	mov	r0, r3
 80842ee:	3708      	adds	r7, #8
 80842f0:	46bd      	mov	sp, r7
 80842f2:	bd80      	pop	{r7, pc}
 80842f4:	40010000 	.word	0x40010000
 80842f8:	40010400 	.word	0x40010400

080842fc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80842fc:	b580      	push	{r7, lr}
 80842fe:	b084      	sub	sp, #16
 8084300:	af00      	add	r7, sp, #0
 8084302:	6078      	str	r0, [r7, #4]
 8084304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8084306:	683b      	ldr	r3, [r7, #0]
 8084308:	2b0c      	cmp	r3, #12
 808430a:	d841      	bhi.n	8084390 <HAL_TIM_PWM_Start_IT+0x94>
 808430c:	a201      	add	r2, pc, #4	; (adr r2, 8084314 <HAL_TIM_PWM_Start_IT+0x18>)
 808430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8084312:	bf00      	nop
 8084314:	08084349 	.word	0x08084349
 8084318:	08084391 	.word	0x08084391
 808431c:	08084391 	.word	0x08084391
 8084320:	08084391 	.word	0x08084391
 8084324:	0808435b 	.word	0x0808435b
 8084328:	08084391 	.word	0x08084391
 808432c:	08084391 	.word	0x08084391
 8084330:	08084391 	.word	0x08084391
 8084334:	0808436d 	.word	0x0808436d
 8084338:	08084391 	.word	0x08084391
 808433c:	08084391 	.word	0x08084391
 8084340:	08084391 	.word	0x08084391
 8084344:	0808437f 	.word	0x0808437f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8084348:	687b      	ldr	r3, [r7, #4]
 808434a:	681b      	ldr	r3, [r3, #0]
 808434c:	68da      	ldr	r2, [r3, #12]
 808434e:	687b      	ldr	r3, [r7, #4]
 8084350:	681b      	ldr	r3, [r3, #0]
 8084352:	f042 0202 	orr.w	r2, r2, #2
 8084356:	60da      	str	r2, [r3, #12]
      break;
 8084358:	e01b      	b.n	8084392 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 808435a:	687b      	ldr	r3, [r7, #4]
 808435c:	681b      	ldr	r3, [r3, #0]
 808435e:	68da      	ldr	r2, [r3, #12]
 8084360:	687b      	ldr	r3, [r7, #4]
 8084362:	681b      	ldr	r3, [r3, #0]
 8084364:	f042 0204 	orr.w	r2, r2, #4
 8084368:	60da      	str	r2, [r3, #12]
      break;
 808436a:	e012      	b.n	8084392 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 808436c:	687b      	ldr	r3, [r7, #4]
 808436e:	681b      	ldr	r3, [r3, #0]
 8084370:	68da      	ldr	r2, [r3, #12]
 8084372:	687b      	ldr	r3, [r7, #4]
 8084374:	681b      	ldr	r3, [r3, #0]
 8084376:	f042 0208 	orr.w	r2, r2, #8
 808437a:	60da      	str	r2, [r3, #12]
      break;
 808437c:	e009      	b.n	8084392 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 808437e:	687b      	ldr	r3, [r7, #4]
 8084380:	681b      	ldr	r3, [r3, #0]
 8084382:	68da      	ldr	r2, [r3, #12]
 8084384:	687b      	ldr	r3, [r7, #4]
 8084386:	681b      	ldr	r3, [r3, #0]
 8084388:	f042 0210 	orr.w	r2, r2, #16
 808438c:	60da      	str	r2, [r3, #12]
      break;
 808438e:	e000      	b.n	8084392 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8084390:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8084392:	687b      	ldr	r3, [r7, #4]
 8084394:	681b      	ldr	r3, [r3, #0]
 8084396:	2201      	movs	r2, #1
 8084398:	6839      	ldr	r1, [r7, #0]
 808439a:	4618      	mov	r0, r3
 808439c:	f003 fae0 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80843a0:	687b      	ldr	r3, [r7, #4]
 80843a2:	681b      	ldr	r3, [r3, #0]
 80843a4:	4a15      	ldr	r2, [pc, #84]	; (80843fc <HAL_TIM_PWM_Start_IT+0x100>)
 80843a6:	4293      	cmp	r3, r2
 80843a8:	d004      	beq.n	80843b4 <HAL_TIM_PWM_Start_IT+0xb8>
 80843aa:	687b      	ldr	r3, [r7, #4]
 80843ac:	681b      	ldr	r3, [r3, #0]
 80843ae:	4a14      	ldr	r2, [pc, #80]	; (8084400 <HAL_TIM_PWM_Start_IT+0x104>)
 80843b0:	4293      	cmp	r3, r2
 80843b2:	d101      	bne.n	80843b8 <HAL_TIM_PWM_Start_IT+0xbc>
 80843b4:	2301      	movs	r3, #1
 80843b6:	e000      	b.n	80843ba <HAL_TIM_PWM_Start_IT+0xbe>
 80843b8:	2300      	movs	r3, #0
 80843ba:	2b00      	cmp	r3, #0
 80843bc:	d007      	beq.n	80843ce <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80843be:	687b      	ldr	r3, [r7, #4]
 80843c0:	681b      	ldr	r3, [r3, #0]
 80843c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80843c4:	687b      	ldr	r3, [r7, #4]
 80843c6:	681b      	ldr	r3, [r3, #0]
 80843c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80843cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80843ce:	687b      	ldr	r3, [r7, #4]
 80843d0:	681b      	ldr	r3, [r3, #0]
 80843d2:	689b      	ldr	r3, [r3, #8]
 80843d4:	f003 0307 	and.w	r3, r3, #7
 80843d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80843da:	68fb      	ldr	r3, [r7, #12]
 80843dc:	2b06      	cmp	r3, #6
 80843de:	d007      	beq.n	80843f0 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80843e0:	687b      	ldr	r3, [r7, #4]
 80843e2:	681b      	ldr	r3, [r3, #0]
 80843e4:	681a      	ldr	r2, [r3, #0]
 80843e6:	687b      	ldr	r3, [r7, #4]
 80843e8:	681b      	ldr	r3, [r3, #0]
 80843ea:	f042 0201 	orr.w	r2, r2, #1
 80843ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80843f0:	2300      	movs	r3, #0
}
 80843f2:	4618      	mov	r0, r3
 80843f4:	3710      	adds	r7, #16
 80843f6:	46bd      	mov	sp, r7
 80843f8:	bd80      	pop	{r7, pc}
 80843fa:	bf00      	nop
 80843fc:	40010000 	.word	0x40010000
 8084400:	40010400 	.word	0x40010400

08084404 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8084404:	b580      	push	{r7, lr}
 8084406:	b082      	sub	sp, #8
 8084408:	af00      	add	r7, sp, #0
 808440a:	6078      	str	r0, [r7, #4]
 808440c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 808440e:	683b      	ldr	r3, [r7, #0]
 8084410:	2b0c      	cmp	r3, #12
 8084412:	d841      	bhi.n	8084498 <HAL_TIM_PWM_Stop_IT+0x94>
 8084414:	a201      	add	r2, pc, #4	; (adr r2, 808441c <HAL_TIM_PWM_Stop_IT+0x18>)
 8084416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 808441a:	bf00      	nop
 808441c:	08084451 	.word	0x08084451
 8084420:	08084499 	.word	0x08084499
 8084424:	08084499 	.word	0x08084499
 8084428:	08084499 	.word	0x08084499
 808442c:	08084463 	.word	0x08084463
 8084430:	08084499 	.word	0x08084499
 8084434:	08084499 	.word	0x08084499
 8084438:	08084499 	.word	0x08084499
 808443c:	08084475 	.word	0x08084475
 8084440:	08084499 	.word	0x08084499
 8084444:	08084499 	.word	0x08084499
 8084448:	08084499 	.word	0x08084499
 808444c:	08084487 	.word	0x08084487
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8084450:	687b      	ldr	r3, [r7, #4]
 8084452:	681b      	ldr	r3, [r3, #0]
 8084454:	68da      	ldr	r2, [r3, #12]
 8084456:	687b      	ldr	r3, [r7, #4]
 8084458:	681b      	ldr	r3, [r3, #0]
 808445a:	f022 0202 	bic.w	r2, r2, #2
 808445e:	60da      	str	r2, [r3, #12]
      break;
 8084460:	e01b      	b.n	808449a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8084462:	687b      	ldr	r3, [r7, #4]
 8084464:	681b      	ldr	r3, [r3, #0]
 8084466:	68da      	ldr	r2, [r3, #12]
 8084468:	687b      	ldr	r3, [r7, #4]
 808446a:	681b      	ldr	r3, [r3, #0]
 808446c:	f022 0204 	bic.w	r2, r2, #4
 8084470:	60da      	str	r2, [r3, #12]
      break;
 8084472:	e012      	b.n	808449a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8084474:	687b      	ldr	r3, [r7, #4]
 8084476:	681b      	ldr	r3, [r3, #0]
 8084478:	68da      	ldr	r2, [r3, #12]
 808447a:	687b      	ldr	r3, [r7, #4]
 808447c:	681b      	ldr	r3, [r3, #0]
 808447e:	f022 0208 	bic.w	r2, r2, #8
 8084482:	60da      	str	r2, [r3, #12]
      break;
 8084484:	e009      	b.n	808449a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8084486:	687b      	ldr	r3, [r7, #4]
 8084488:	681b      	ldr	r3, [r3, #0]
 808448a:	68da      	ldr	r2, [r3, #12]
 808448c:	687b      	ldr	r3, [r7, #4]
 808448e:	681b      	ldr	r3, [r3, #0]
 8084490:	f022 0210 	bic.w	r2, r2, #16
 8084494:	60da      	str	r2, [r3, #12]
      break;
 8084496:	e000      	b.n	808449a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8084498:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 808449a:	687b      	ldr	r3, [r7, #4]
 808449c:	681b      	ldr	r3, [r3, #0]
 808449e:	2200      	movs	r2, #0
 80844a0:	6839      	ldr	r1, [r7, #0]
 80844a2:	4618      	mov	r0, r3
 80844a4:	f003 fa5c 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80844a8:	687b      	ldr	r3, [r7, #4]
 80844aa:	681b      	ldr	r3, [r3, #0]
 80844ac:	4a20      	ldr	r2, [pc, #128]	; (8084530 <HAL_TIM_PWM_Stop_IT+0x12c>)
 80844ae:	4293      	cmp	r3, r2
 80844b0:	d004      	beq.n	80844bc <HAL_TIM_PWM_Stop_IT+0xb8>
 80844b2:	687b      	ldr	r3, [r7, #4]
 80844b4:	681b      	ldr	r3, [r3, #0]
 80844b6:	4a1f      	ldr	r2, [pc, #124]	; (8084534 <HAL_TIM_PWM_Stop_IT+0x130>)
 80844b8:	4293      	cmp	r3, r2
 80844ba:	d101      	bne.n	80844c0 <HAL_TIM_PWM_Stop_IT+0xbc>
 80844bc:	2301      	movs	r3, #1
 80844be:	e000      	b.n	80844c2 <HAL_TIM_PWM_Stop_IT+0xbe>
 80844c0:	2300      	movs	r3, #0
 80844c2:	2b00      	cmp	r3, #0
 80844c4:	d017      	beq.n	80844f6 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80844c6:	687b      	ldr	r3, [r7, #4]
 80844c8:	681b      	ldr	r3, [r3, #0]
 80844ca:	6a1a      	ldr	r2, [r3, #32]
 80844cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80844d0:	4013      	ands	r3, r2
 80844d2:	2b00      	cmp	r3, #0
 80844d4:	d10f      	bne.n	80844f6 <HAL_TIM_PWM_Stop_IT+0xf2>
 80844d6:	687b      	ldr	r3, [r7, #4]
 80844d8:	681b      	ldr	r3, [r3, #0]
 80844da:	6a1a      	ldr	r2, [r3, #32]
 80844dc:	f240 4344 	movw	r3, #1092	; 0x444
 80844e0:	4013      	ands	r3, r2
 80844e2:	2b00      	cmp	r3, #0
 80844e4:	d107      	bne.n	80844f6 <HAL_TIM_PWM_Stop_IT+0xf2>
 80844e6:	687b      	ldr	r3, [r7, #4]
 80844e8:	681b      	ldr	r3, [r3, #0]
 80844ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80844ec:	687b      	ldr	r3, [r7, #4]
 80844ee:	681b      	ldr	r3, [r3, #0]
 80844f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80844f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80844f6:	687b      	ldr	r3, [r7, #4]
 80844f8:	681b      	ldr	r3, [r3, #0]
 80844fa:	6a1a      	ldr	r2, [r3, #32]
 80844fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8084500:	4013      	ands	r3, r2
 8084502:	2b00      	cmp	r3, #0
 8084504:	d10f      	bne.n	8084526 <HAL_TIM_PWM_Stop_IT+0x122>
 8084506:	687b      	ldr	r3, [r7, #4]
 8084508:	681b      	ldr	r3, [r3, #0]
 808450a:	6a1a      	ldr	r2, [r3, #32]
 808450c:	f240 4344 	movw	r3, #1092	; 0x444
 8084510:	4013      	ands	r3, r2
 8084512:	2b00      	cmp	r3, #0
 8084514:	d107      	bne.n	8084526 <HAL_TIM_PWM_Stop_IT+0x122>
 8084516:	687b      	ldr	r3, [r7, #4]
 8084518:	681b      	ldr	r3, [r3, #0]
 808451a:	681a      	ldr	r2, [r3, #0]
 808451c:	687b      	ldr	r3, [r7, #4]
 808451e:	681b      	ldr	r3, [r3, #0]
 8084520:	f022 0201 	bic.w	r2, r2, #1
 8084524:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8084526:	2300      	movs	r3, #0
}
 8084528:	4618      	mov	r0, r3
 808452a:	3708      	adds	r7, #8
 808452c:	46bd      	mov	sp, r7
 808452e:	bd80      	pop	{r7, pc}
 8084530:	40010000 	.word	0x40010000
 8084534:	40010400 	.word	0x40010400

08084538 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8084538:	b580      	push	{r7, lr}
 808453a:	b086      	sub	sp, #24
 808453c:	af00      	add	r7, sp, #0
 808453e:	60f8      	str	r0, [r7, #12]
 8084540:	60b9      	str	r1, [r7, #8]
 8084542:	607a      	str	r2, [r7, #4]
 8084544:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8084546:	68fb      	ldr	r3, [r7, #12]
 8084548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 808454c:	b2db      	uxtb	r3, r3
 808454e:	2b02      	cmp	r3, #2
 8084550:	d101      	bne.n	8084556 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8084552:	2302      	movs	r3, #2
 8084554:	e0f3      	b.n	808473e <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8084556:	68fb      	ldr	r3, [r7, #12]
 8084558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 808455c:	b2db      	uxtb	r3, r3
 808455e:	2b01      	cmp	r3, #1
 8084560:	d10b      	bne.n	808457a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8084562:	687b      	ldr	r3, [r7, #4]
 8084564:	2b00      	cmp	r3, #0
 8084566:	d104      	bne.n	8084572 <HAL_TIM_PWM_Start_DMA+0x3a>
 8084568:	887b      	ldrh	r3, [r7, #2]
 808456a:	2b00      	cmp	r3, #0
 808456c:	d001      	beq.n	8084572 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 808456e:	2301      	movs	r3, #1
 8084570:	e0e5      	b.n	808473e <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8084572:	68fb      	ldr	r3, [r7, #12]
 8084574:	2202      	movs	r2, #2
 8084576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 808457a:	68bb      	ldr	r3, [r7, #8]
 808457c:	2b0c      	cmp	r3, #12
 808457e:	f200 80ad 	bhi.w	80846dc <HAL_TIM_PWM_Start_DMA+0x1a4>
 8084582:	a201      	add	r2, pc, #4	; (adr r2, 8084588 <HAL_TIM_PWM_Start_DMA+0x50>)
 8084584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8084588:	080845bd 	.word	0x080845bd
 808458c:	080846dd 	.word	0x080846dd
 8084590:	080846dd 	.word	0x080846dd
 8084594:	080846dd 	.word	0x080846dd
 8084598:	08084605 	.word	0x08084605
 808459c:	080846dd 	.word	0x080846dd
 80845a0:	080846dd 	.word	0x080846dd
 80845a4:	080846dd 	.word	0x080846dd
 80845a8:	0808464d 	.word	0x0808464d
 80845ac:	080846dd 	.word	0x080846dd
 80845b0:	080846dd 	.word	0x080846dd
 80845b4:	080846dd 	.word	0x080846dd
 80845b8:	08084695 	.word	0x08084695
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80845bc:	68fb      	ldr	r3, [r7, #12]
 80845be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80845c0:	4a61      	ldr	r2, [pc, #388]	; (8084748 <HAL_TIM_PWM_Start_DMA+0x210>)
 80845c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80845c4:	68fb      	ldr	r3, [r7, #12]
 80845c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80845c8:	4a60      	ldr	r2, [pc, #384]	; (808474c <HAL_TIM_PWM_Start_DMA+0x214>)
 80845ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80845cc:	68fb      	ldr	r3, [r7, #12]
 80845ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80845d0:	4a5f      	ldr	r2, [pc, #380]	; (8084750 <HAL_TIM_PWM_Start_DMA+0x218>)
 80845d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80845d4:	68fb      	ldr	r3, [r7, #12]
 80845d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80845d8:	6879      	ldr	r1, [r7, #4]
 80845da:	68fb      	ldr	r3, [r7, #12]
 80845dc:	681b      	ldr	r3, [r3, #0]
 80845de:	3334      	adds	r3, #52	; 0x34
 80845e0:	461a      	mov	r2, r3
 80845e2:	887b      	ldrh	r3, [r7, #2]
 80845e4:	f7fd fa35 	bl	8081a52 <HAL_DMA_Start_IT>
 80845e8:	4603      	mov	r3, r0
 80845ea:	2b00      	cmp	r3, #0
 80845ec:	d001      	beq.n	80845f2 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80845ee:	2301      	movs	r3, #1
 80845f0:	e0a5      	b.n	808473e <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80845f2:	68fb      	ldr	r3, [r7, #12]
 80845f4:	681b      	ldr	r3, [r3, #0]
 80845f6:	68da      	ldr	r2, [r3, #12]
 80845f8:	68fb      	ldr	r3, [r7, #12]
 80845fa:	681b      	ldr	r3, [r3, #0]
 80845fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8084600:	60da      	str	r2, [r3, #12]
      break;
 8084602:	e06c      	b.n	80846de <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8084604:	68fb      	ldr	r3, [r7, #12]
 8084606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084608:	4a4f      	ldr	r2, [pc, #316]	; (8084748 <HAL_TIM_PWM_Start_DMA+0x210>)
 808460a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 808460c:	68fb      	ldr	r3, [r7, #12]
 808460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084610:	4a4e      	ldr	r2, [pc, #312]	; (808474c <HAL_TIM_PWM_Start_DMA+0x214>)
 8084612:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8084614:	68fb      	ldr	r3, [r7, #12]
 8084616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084618:	4a4d      	ldr	r2, [pc, #308]	; (8084750 <HAL_TIM_PWM_Start_DMA+0x218>)
 808461a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 808461c:	68fb      	ldr	r3, [r7, #12]
 808461e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8084620:	6879      	ldr	r1, [r7, #4]
 8084622:	68fb      	ldr	r3, [r7, #12]
 8084624:	681b      	ldr	r3, [r3, #0]
 8084626:	3338      	adds	r3, #56	; 0x38
 8084628:	461a      	mov	r2, r3
 808462a:	887b      	ldrh	r3, [r7, #2]
 808462c:	f7fd fa11 	bl	8081a52 <HAL_DMA_Start_IT>
 8084630:	4603      	mov	r3, r0
 8084632:	2b00      	cmp	r3, #0
 8084634:	d001      	beq.n	808463a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8084636:	2301      	movs	r3, #1
 8084638:	e081      	b.n	808473e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 808463a:	68fb      	ldr	r3, [r7, #12]
 808463c:	681b      	ldr	r3, [r3, #0]
 808463e:	68da      	ldr	r2, [r3, #12]
 8084640:	68fb      	ldr	r3, [r7, #12]
 8084642:	681b      	ldr	r3, [r3, #0]
 8084644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8084648:	60da      	str	r2, [r3, #12]
      break;
 808464a:	e048      	b.n	80846de <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 808464c:	68fb      	ldr	r3, [r7, #12]
 808464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084650:	4a3d      	ldr	r2, [pc, #244]	; (8084748 <HAL_TIM_PWM_Start_DMA+0x210>)
 8084652:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8084654:	68fb      	ldr	r3, [r7, #12]
 8084656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084658:	4a3c      	ldr	r2, [pc, #240]	; (808474c <HAL_TIM_PWM_Start_DMA+0x214>)
 808465a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 808465c:	68fb      	ldr	r3, [r7, #12]
 808465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084660:	4a3b      	ldr	r2, [pc, #236]	; (8084750 <HAL_TIM_PWM_Start_DMA+0x218>)
 8084662:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8084664:	68fb      	ldr	r3, [r7, #12]
 8084666:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8084668:	6879      	ldr	r1, [r7, #4]
 808466a:	68fb      	ldr	r3, [r7, #12]
 808466c:	681b      	ldr	r3, [r3, #0]
 808466e:	333c      	adds	r3, #60	; 0x3c
 8084670:	461a      	mov	r2, r3
 8084672:	887b      	ldrh	r3, [r7, #2]
 8084674:	f7fd f9ed 	bl	8081a52 <HAL_DMA_Start_IT>
 8084678:	4603      	mov	r3, r0
 808467a:	2b00      	cmp	r3, #0
 808467c:	d001      	beq.n	8084682 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 808467e:	2301      	movs	r3, #1
 8084680:	e05d      	b.n	808473e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8084682:	68fb      	ldr	r3, [r7, #12]
 8084684:	681b      	ldr	r3, [r3, #0]
 8084686:	68da      	ldr	r2, [r3, #12]
 8084688:	68fb      	ldr	r3, [r7, #12]
 808468a:	681b      	ldr	r3, [r3, #0]
 808468c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8084690:	60da      	str	r2, [r3, #12]
      break;
 8084692:	e024      	b.n	80846de <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8084694:	68fb      	ldr	r3, [r7, #12]
 8084696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084698:	4a2b      	ldr	r2, [pc, #172]	; (8084748 <HAL_TIM_PWM_Start_DMA+0x210>)
 808469a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 808469c:	68fb      	ldr	r3, [r7, #12]
 808469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80846a0:	4a2a      	ldr	r2, [pc, #168]	; (808474c <HAL_TIM_PWM_Start_DMA+0x214>)
 80846a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80846a4:	68fb      	ldr	r3, [r7, #12]
 80846a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80846a8:	4a29      	ldr	r2, [pc, #164]	; (8084750 <HAL_TIM_PWM_Start_DMA+0x218>)
 80846aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80846ac:	68fb      	ldr	r3, [r7, #12]
 80846ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80846b0:	6879      	ldr	r1, [r7, #4]
 80846b2:	68fb      	ldr	r3, [r7, #12]
 80846b4:	681b      	ldr	r3, [r3, #0]
 80846b6:	3340      	adds	r3, #64	; 0x40
 80846b8:	461a      	mov	r2, r3
 80846ba:	887b      	ldrh	r3, [r7, #2]
 80846bc:	f7fd f9c9 	bl	8081a52 <HAL_DMA_Start_IT>
 80846c0:	4603      	mov	r3, r0
 80846c2:	2b00      	cmp	r3, #0
 80846c4:	d001      	beq.n	80846ca <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80846c6:	2301      	movs	r3, #1
 80846c8:	e039      	b.n	808473e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80846ca:	68fb      	ldr	r3, [r7, #12]
 80846cc:	681b      	ldr	r3, [r3, #0]
 80846ce:	68da      	ldr	r2, [r3, #12]
 80846d0:	68fb      	ldr	r3, [r7, #12]
 80846d2:	681b      	ldr	r3, [r3, #0]
 80846d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80846d8:	60da      	str	r2, [r3, #12]
      break;
 80846da:	e000      	b.n	80846de <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80846dc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80846de:	68fb      	ldr	r3, [r7, #12]
 80846e0:	681b      	ldr	r3, [r3, #0]
 80846e2:	2201      	movs	r2, #1
 80846e4:	68b9      	ldr	r1, [r7, #8]
 80846e6:	4618      	mov	r0, r3
 80846e8:	f003 f93a 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80846ec:	68fb      	ldr	r3, [r7, #12]
 80846ee:	681b      	ldr	r3, [r3, #0]
 80846f0:	4a18      	ldr	r2, [pc, #96]	; (8084754 <HAL_TIM_PWM_Start_DMA+0x21c>)
 80846f2:	4293      	cmp	r3, r2
 80846f4:	d004      	beq.n	8084700 <HAL_TIM_PWM_Start_DMA+0x1c8>
 80846f6:	68fb      	ldr	r3, [r7, #12]
 80846f8:	681b      	ldr	r3, [r3, #0]
 80846fa:	4a17      	ldr	r2, [pc, #92]	; (8084758 <HAL_TIM_PWM_Start_DMA+0x220>)
 80846fc:	4293      	cmp	r3, r2
 80846fe:	d101      	bne.n	8084704 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8084700:	2301      	movs	r3, #1
 8084702:	e000      	b.n	8084706 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8084704:	2300      	movs	r3, #0
 8084706:	2b00      	cmp	r3, #0
 8084708:	d007      	beq.n	808471a <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 808470a:	68fb      	ldr	r3, [r7, #12]
 808470c:	681b      	ldr	r3, [r3, #0]
 808470e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8084710:	68fb      	ldr	r3, [r7, #12]
 8084712:	681b      	ldr	r3, [r3, #0]
 8084714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8084718:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 808471a:	68fb      	ldr	r3, [r7, #12]
 808471c:	681b      	ldr	r3, [r3, #0]
 808471e:	689b      	ldr	r3, [r3, #8]
 8084720:	f003 0307 	and.w	r3, r3, #7
 8084724:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8084726:	697b      	ldr	r3, [r7, #20]
 8084728:	2b06      	cmp	r3, #6
 808472a:	d007      	beq.n	808473c <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 808472c:	68fb      	ldr	r3, [r7, #12]
 808472e:	681b      	ldr	r3, [r3, #0]
 8084730:	681a      	ldr	r2, [r3, #0]
 8084732:	68fb      	ldr	r3, [r7, #12]
 8084734:	681b      	ldr	r3, [r3, #0]
 8084736:	f042 0201 	orr.w	r2, r2, #1
 808473a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 808473c:	2300      	movs	r3, #0
}
 808473e:	4618      	mov	r0, r3
 8084740:	3718      	adds	r7, #24
 8084742:	46bd      	mov	sp, r7
 8084744:	bd80      	pop	{r7, pc}
 8084746:	bf00      	nop
 8084748:	08086ddd 	.word	0x08086ddd
 808474c:	08086e4d 	.word	0x08086e4d
 8084750:	08086db9 	.word	0x08086db9
 8084754:	40010000 	.word	0x40010000
 8084758:	40010400 	.word	0x40010400

0808475c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 808475c:	b580      	push	{r7, lr}
 808475e:	b082      	sub	sp, #8
 8084760:	af00      	add	r7, sp, #0
 8084762:	6078      	str	r0, [r7, #4]
 8084764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8084766:	683b      	ldr	r3, [r7, #0]
 8084768:	2b0c      	cmp	r3, #12
 808476a:	d855      	bhi.n	8084818 <HAL_TIM_PWM_Stop_DMA+0xbc>
 808476c:	a201      	add	r2, pc, #4	; (adr r2, 8084774 <HAL_TIM_PWM_Stop_DMA+0x18>)
 808476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8084772:	bf00      	nop
 8084774:	080847a9 	.word	0x080847a9
 8084778:	08084819 	.word	0x08084819
 808477c:	08084819 	.word	0x08084819
 8084780:	08084819 	.word	0x08084819
 8084784:	080847c5 	.word	0x080847c5
 8084788:	08084819 	.word	0x08084819
 808478c:	08084819 	.word	0x08084819
 8084790:	08084819 	.word	0x08084819
 8084794:	080847e1 	.word	0x080847e1
 8084798:	08084819 	.word	0x08084819
 808479c:	08084819 	.word	0x08084819
 80847a0:	08084819 	.word	0x08084819
 80847a4:	080847fd 	.word	0x080847fd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80847a8:	687b      	ldr	r3, [r7, #4]
 80847aa:	681b      	ldr	r3, [r3, #0]
 80847ac:	68da      	ldr	r2, [r3, #12]
 80847ae:	687b      	ldr	r3, [r7, #4]
 80847b0:	681b      	ldr	r3, [r3, #0]
 80847b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80847b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80847b8:	687b      	ldr	r3, [r7, #4]
 80847ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80847bc:	4618      	mov	r0, r3
 80847be:	f7fd fa18 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 80847c2:	e02a      	b.n	808481a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80847c4:	687b      	ldr	r3, [r7, #4]
 80847c6:	681b      	ldr	r3, [r3, #0]
 80847c8:	68da      	ldr	r2, [r3, #12]
 80847ca:	687b      	ldr	r3, [r7, #4]
 80847cc:	681b      	ldr	r3, [r3, #0]
 80847ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80847d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80847d4:	687b      	ldr	r3, [r7, #4]
 80847d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80847d8:	4618      	mov	r0, r3
 80847da:	f7fd fa0a 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 80847de:	e01c      	b.n	808481a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80847e0:	687b      	ldr	r3, [r7, #4]
 80847e2:	681b      	ldr	r3, [r3, #0]
 80847e4:	68da      	ldr	r2, [r3, #12]
 80847e6:	687b      	ldr	r3, [r7, #4]
 80847e8:	681b      	ldr	r3, [r3, #0]
 80847ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80847ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80847f0:	687b      	ldr	r3, [r7, #4]
 80847f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80847f4:	4618      	mov	r0, r3
 80847f6:	f7fd f9fc 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 80847fa:	e00e      	b.n	808481a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80847fc:	687b      	ldr	r3, [r7, #4]
 80847fe:	681b      	ldr	r3, [r3, #0]
 8084800:	68da      	ldr	r2, [r3, #12]
 8084802:	687b      	ldr	r3, [r7, #4]
 8084804:	681b      	ldr	r3, [r3, #0]
 8084806:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 808480a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 808480c:	687b      	ldr	r3, [r7, #4]
 808480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084810:	4618      	mov	r0, r3
 8084812:	f7fd f9ee 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 8084816:	e000      	b.n	808481a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8084818:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 808481a:	687b      	ldr	r3, [r7, #4]
 808481c:	681b      	ldr	r3, [r3, #0]
 808481e:	2200      	movs	r2, #0
 8084820:	6839      	ldr	r1, [r7, #0]
 8084822:	4618      	mov	r0, r3
 8084824:	f003 f89c 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8084828:	687b      	ldr	r3, [r7, #4]
 808482a:	681b      	ldr	r3, [r3, #0]
 808482c:	4a22      	ldr	r2, [pc, #136]	; (80848b8 <HAL_TIM_PWM_Stop_DMA+0x15c>)
 808482e:	4293      	cmp	r3, r2
 8084830:	d004      	beq.n	808483c <HAL_TIM_PWM_Stop_DMA+0xe0>
 8084832:	687b      	ldr	r3, [r7, #4]
 8084834:	681b      	ldr	r3, [r3, #0]
 8084836:	4a21      	ldr	r2, [pc, #132]	; (80848bc <HAL_TIM_PWM_Stop_DMA+0x160>)
 8084838:	4293      	cmp	r3, r2
 808483a:	d101      	bne.n	8084840 <HAL_TIM_PWM_Stop_DMA+0xe4>
 808483c:	2301      	movs	r3, #1
 808483e:	e000      	b.n	8084842 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8084840:	2300      	movs	r3, #0
 8084842:	2b00      	cmp	r3, #0
 8084844:	d017      	beq.n	8084876 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8084846:	687b      	ldr	r3, [r7, #4]
 8084848:	681b      	ldr	r3, [r3, #0]
 808484a:	6a1a      	ldr	r2, [r3, #32]
 808484c:	f241 1311 	movw	r3, #4369	; 0x1111
 8084850:	4013      	ands	r3, r2
 8084852:	2b00      	cmp	r3, #0
 8084854:	d10f      	bne.n	8084876 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8084856:	687b      	ldr	r3, [r7, #4]
 8084858:	681b      	ldr	r3, [r3, #0]
 808485a:	6a1a      	ldr	r2, [r3, #32]
 808485c:	f240 4344 	movw	r3, #1092	; 0x444
 8084860:	4013      	ands	r3, r2
 8084862:	2b00      	cmp	r3, #0
 8084864:	d107      	bne.n	8084876 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8084866:	687b      	ldr	r3, [r7, #4]
 8084868:	681b      	ldr	r3, [r3, #0]
 808486a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 808486c:	687b      	ldr	r3, [r7, #4]
 808486e:	681b      	ldr	r3, [r3, #0]
 8084870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8084874:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8084876:	687b      	ldr	r3, [r7, #4]
 8084878:	681b      	ldr	r3, [r3, #0]
 808487a:	6a1a      	ldr	r2, [r3, #32]
 808487c:	f241 1311 	movw	r3, #4369	; 0x1111
 8084880:	4013      	ands	r3, r2
 8084882:	2b00      	cmp	r3, #0
 8084884:	d10f      	bne.n	80848a6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8084886:	687b      	ldr	r3, [r7, #4]
 8084888:	681b      	ldr	r3, [r3, #0]
 808488a:	6a1a      	ldr	r2, [r3, #32]
 808488c:	f240 4344 	movw	r3, #1092	; 0x444
 8084890:	4013      	ands	r3, r2
 8084892:	2b00      	cmp	r3, #0
 8084894:	d107      	bne.n	80848a6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8084896:	687b      	ldr	r3, [r7, #4]
 8084898:	681b      	ldr	r3, [r3, #0]
 808489a:	681a      	ldr	r2, [r3, #0]
 808489c:	687b      	ldr	r3, [r7, #4]
 808489e:	681b      	ldr	r3, [r3, #0]
 80848a0:	f022 0201 	bic.w	r2, r2, #1
 80848a4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80848a6:	687b      	ldr	r3, [r7, #4]
 80848a8:	2201      	movs	r2, #1
 80848aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80848ae:	2300      	movs	r3, #0
}
 80848b0:	4618      	mov	r0, r3
 80848b2:	3708      	adds	r7, #8
 80848b4:	46bd      	mov	sp, r7
 80848b6:	bd80      	pop	{r7, pc}
 80848b8:	40010000 	.word	0x40010000
 80848bc:	40010400 	.word	0x40010400

080848c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80848c0:	b580      	push	{r7, lr}
 80848c2:	b082      	sub	sp, #8
 80848c4:	af00      	add	r7, sp, #0
 80848c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80848c8:	687b      	ldr	r3, [r7, #4]
 80848ca:	2b00      	cmp	r3, #0
 80848cc:	d101      	bne.n	80848d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80848ce:	2301      	movs	r3, #1
 80848d0:	e01d      	b.n	808490e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80848d2:	687b      	ldr	r3, [r7, #4]
 80848d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80848d8:	b2db      	uxtb	r3, r3
 80848da:	2b00      	cmp	r3, #0
 80848dc:	d106      	bne.n	80848ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80848de:	687b      	ldr	r3, [r7, #4]
 80848e0:	2200      	movs	r2, #0
 80848e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80848e6:	6878      	ldr	r0, [r7, #4]
 80848e8:	f000 f845 	bl	8084976 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80848ec:	687b      	ldr	r3, [r7, #4]
 80848ee:	2202      	movs	r2, #2
 80848f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80848f4:	687b      	ldr	r3, [r7, #4]
 80848f6:	681a      	ldr	r2, [r3, #0]
 80848f8:	687b      	ldr	r3, [r7, #4]
 80848fa:	3304      	adds	r3, #4
 80848fc:	4619      	mov	r1, r3
 80848fe:	4610      	mov	r0, r2
 8084900:	f002 fb94 	bl	808702c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8084904:	687b      	ldr	r3, [r7, #4]
 8084906:	2201      	movs	r2, #1
 8084908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 808490c:	2300      	movs	r3, #0
}
 808490e:	4618      	mov	r0, r3
 8084910:	3708      	adds	r7, #8
 8084912:	46bd      	mov	sp, r7
 8084914:	bd80      	pop	{r7, pc}

08084916 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8084916:	b580      	push	{r7, lr}
 8084918:	b082      	sub	sp, #8
 808491a:	af00      	add	r7, sp, #0
 808491c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 808491e:	687b      	ldr	r3, [r7, #4]
 8084920:	2202      	movs	r2, #2
 8084922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8084926:	687b      	ldr	r3, [r7, #4]
 8084928:	681b      	ldr	r3, [r3, #0]
 808492a:	6a1a      	ldr	r2, [r3, #32]
 808492c:	f241 1311 	movw	r3, #4369	; 0x1111
 8084930:	4013      	ands	r3, r2
 8084932:	2b00      	cmp	r3, #0
 8084934:	d10f      	bne.n	8084956 <HAL_TIM_IC_DeInit+0x40>
 8084936:	687b      	ldr	r3, [r7, #4]
 8084938:	681b      	ldr	r3, [r3, #0]
 808493a:	6a1a      	ldr	r2, [r3, #32]
 808493c:	f240 4344 	movw	r3, #1092	; 0x444
 8084940:	4013      	ands	r3, r2
 8084942:	2b00      	cmp	r3, #0
 8084944:	d107      	bne.n	8084956 <HAL_TIM_IC_DeInit+0x40>
 8084946:	687b      	ldr	r3, [r7, #4]
 8084948:	681b      	ldr	r3, [r3, #0]
 808494a:	681a      	ldr	r2, [r3, #0]
 808494c:	687b      	ldr	r3, [r7, #4]
 808494e:	681b      	ldr	r3, [r3, #0]
 8084950:	f022 0201 	bic.w	r2, r2, #1
 8084954:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8084956:	6878      	ldr	r0, [r7, #4]
 8084958:	f000 f817 	bl	808498a <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 808495c:	687b      	ldr	r3, [r7, #4]
 808495e:	2200      	movs	r2, #0
 8084960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8084964:	687b      	ldr	r3, [r7, #4]
 8084966:	2200      	movs	r2, #0
 8084968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 808496c:	2300      	movs	r3, #0
}
 808496e:	4618      	mov	r0, r3
 8084970:	3708      	adds	r7, #8
 8084972:	46bd      	mov	sp, r7
 8084974:	bd80      	pop	{r7, pc}

08084976 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8084976:	b480      	push	{r7}
 8084978:	b083      	sub	sp, #12
 808497a:	af00      	add	r7, sp, #0
 808497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 808497e:	bf00      	nop
 8084980:	370c      	adds	r7, #12
 8084982:	46bd      	mov	sp, r7
 8084984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084988:	4770      	bx	lr

0808498a <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 808498a:	b480      	push	{r7}
 808498c:	b083      	sub	sp, #12
 808498e:	af00      	add	r7, sp, #0
 8084990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 8084992:	bf00      	nop
 8084994:	370c      	adds	r7, #12
 8084996:	46bd      	mov	sp, r7
 8084998:	f85d 7b04 	ldr.w	r7, [sp], #4
 808499c:	4770      	bx	lr

0808499e <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 808499e:	b580      	push	{r7, lr}
 80849a0:	b084      	sub	sp, #16
 80849a2:	af00      	add	r7, sp, #0
 80849a4:	6078      	str	r0, [r7, #4]
 80849a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80849a8:	687b      	ldr	r3, [r7, #4]
 80849aa:	681b      	ldr	r3, [r3, #0]
 80849ac:	2201      	movs	r2, #1
 80849ae:	6839      	ldr	r1, [r7, #0]
 80849b0:	4618      	mov	r0, r3
 80849b2:	f002 ffd5 	bl	8087960 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80849b6:	687b      	ldr	r3, [r7, #4]
 80849b8:	681b      	ldr	r3, [r3, #0]
 80849ba:	689b      	ldr	r3, [r3, #8]
 80849bc:	f003 0307 	and.w	r3, r3, #7
 80849c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80849c2:	68fb      	ldr	r3, [r7, #12]
 80849c4:	2b06      	cmp	r3, #6
 80849c6:	d007      	beq.n	80849d8 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80849c8:	687b      	ldr	r3, [r7, #4]
 80849ca:	681b      	ldr	r3, [r3, #0]
 80849cc:	681a      	ldr	r2, [r3, #0]
 80849ce:	687b      	ldr	r3, [r7, #4]
 80849d0:	681b      	ldr	r3, [r3, #0]
 80849d2:	f042 0201 	orr.w	r2, r2, #1
 80849d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80849d8:	2300      	movs	r3, #0
}
 80849da:	4618      	mov	r0, r3
 80849dc:	3710      	adds	r7, #16
 80849de:	46bd      	mov	sp, r7
 80849e0:	bd80      	pop	{r7, pc}

080849e2 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80849e2:	b580      	push	{r7, lr}
 80849e4:	b082      	sub	sp, #8
 80849e6:	af00      	add	r7, sp, #0
 80849e8:	6078      	str	r0, [r7, #4]
 80849ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80849ec:	687b      	ldr	r3, [r7, #4]
 80849ee:	681b      	ldr	r3, [r3, #0]
 80849f0:	2200      	movs	r2, #0
 80849f2:	6839      	ldr	r1, [r7, #0]
 80849f4:	4618      	mov	r0, r3
 80849f6:	f002 ffb3 	bl	8087960 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80849fa:	687b      	ldr	r3, [r7, #4]
 80849fc:	681b      	ldr	r3, [r3, #0]
 80849fe:	6a1a      	ldr	r2, [r3, #32]
 8084a00:	f241 1311 	movw	r3, #4369	; 0x1111
 8084a04:	4013      	ands	r3, r2
 8084a06:	2b00      	cmp	r3, #0
 8084a08:	d10f      	bne.n	8084a2a <HAL_TIM_IC_Stop+0x48>
 8084a0a:	687b      	ldr	r3, [r7, #4]
 8084a0c:	681b      	ldr	r3, [r3, #0]
 8084a0e:	6a1a      	ldr	r2, [r3, #32]
 8084a10:	f240 4344 	movw	r3, #1092	; 0x444
 8084a14:	4013      	ands	r3, r2
 8084a16:	2b00      	cmp	r3, #0
 8084a18:	d107      	bne.n	8084a2a <HAL_TIM_IC_Stop+0x48>
 8084a1a:	687b      	ldr	r3, [r7, #4]
 8084a1c:	681b      	ldr	r3, [r3, #0]
 8084a1e:	681a      	ldr	r2, [r3, #0]
 8084a20:	687b      	ldr	r3, [r7, #4]
 8084a22:	681b      	ldr	r3, [r3, #0]
 8084a24:	f022 0201 	bic.w	r2, r2, #1
 8084a28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8084a2a:	2300      	movs	r3, #0
}
 8084a2c:	4618      	mov	r0, r3
 8084a2e:	3708      	adds	r7, #8
 8084a30:	46bd      	mov	sp, r7
 8084a32:	bd80      	pop	{r7, pc}

08084a34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8084a34:	b580      	push	{r7, lr}
 8084a36:	b084      	sub	sp, #16
 8084a38:	af00      	add	r7, sp, #0
 8084a3a:	6078      	str	r0, [r7, #4]
 8084a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8084a3e:	683b      	ldr	r3, [r7, #0]
 8084a40:	2b0c      	cmp	r3, #12
 8084a42:	d841      	bhi.n	8084ac8 <HAL_TIM_IC_Start_IT+0x94>
 8084a44:	a201      	add	r2, pc, #4	; (adr r2, 8084a4c <HAL_TIM_IC_Start_IT+0x18>)
 8084a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8084a4a:	bf00      	nop
 8084a4c:	08084a81 	.word	0x08084a81
 8084a50:	08084ac9 	.word	0x08084ac9
 8084a54:	08084ac9 	.word	0x08084ac9
 8084a58:	08084ac9 	.word	0x08084ac9
 8084a5c:	08084a93 	.word	0x08084a93
 8084a60:	08084ac9 	.word	0x08084ac9
 8084a64:	08084ac9 	.word	0x08084ac9
 8084a68:	08084ac9 	.word	0x08084ac9
 8084a6c:	08084aa5 	.word	0x08084aa5
 8084a70:	08084ac9 	.word	0x08084ac9
 8084a74:	08084ac9 	.word	0x08084ac9
 8084a78:	08084ac9 	.word	0x08084ac9
 8084a7c:	08084ab7 	.word	0x08084ab7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8084a80:	687b      	ldr	r3, [r7, #4]
 8084a82:	681b      	ldr	r3, [r3, #0]
 8084a84:	68da      	ldr	r2, [r3, #12]
 8084a86:	687b      	ldr	r3, [r7, #4]
 8084a88:	681b      	ldr	r3, [r3, #0]
 8084a8a:	f042 0202 	orr.w	r2, r2, #2
 8084a8e:	60da      	str	r2, [r3, #12]
      break;
 8084a90:	e01b      	b.n	8084aca <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8084a92:	687b      	ldr	r3, [r7, #4]
 8084a94:	681b      	ldr	r3, [r3, #0]
 8084a96:	68da      	ldr	r2, [r3, #12]
 8084a98:	687b      	ldr	r3, [r7, #4]
 8084a9a:	681b      	ldr	r3, [r3, #0]
 8084a9c:	f042 0204 	orr.w	r2, r2, #4
 8084aa0:	60da      	str	r2, [r3, #12]
      break;
 8084aa2:	e012      	b.n	8084aca <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8084aa4:	687b      	ldr	r3, [r7, #4]
 8084aa6:	681b      	ldr	r3, [r3, #0]
 8084aa8:	68da      	ldr	r2, [r3, #12]
 8084aaa:	687b      	ldr	r3, [r7, #4]
 8084aac:	681b      	ldr	r3, [r3, #0]
 8084aae:	f042 0208 	orr.w	r2, r2, #8
 8084ab2:	60da      	str	r2, [r3, #12]
      break;
 8084ab4:	e009      	b.n	8084aca <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8084ab6:	687b      	ldr	r3, [r7, #4]
 8084ab8:	681b      	ldr	r3, [r3, #0]
 8084aba:	68da      	ldr	r2, [r3, #12]
 8084abc:	687b      	ldr	r3, [r7, #4]
 8084abe:	681b      	ldr	r3, [r3, #0]
 8084ac0:	f042 0210 	orr.w	r2, r2, #16
 8084ac4:	60da      	str	r2, [r3, #12]
      break;
 8084ac6:	e000      	b.n	8084aca <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8084ac8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8084aca:	687b      	ldr	r3, [r7, #4]
 8084acc:	681b      	ldr	r3, [r3, #0]
 8084ace:	2201      	movs	r2, #1
 8084ad0:	6839      	ldr	r1, [r7, #0]
 8084ad2:	4618      	mov	r0, r3
 8084ad4:	f002 ff44 	bl	8087960 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8084ad8:	687b      	ldr	r3, [r7, #4]
 8084ada:	681b      	ldr	r3, [r3, #0]
 8084adc:	689b      	ldr	r3, [r3, #8]
 8084ade:	f003 0307 	and.w	r3, r3, #7
 8084ae2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8084ae4:	68fb      	ldr	r3, [r7, #12]
 8084ae6:	2b06      	cmp	r3, #6
 8084ae8:	d007      	beq.n	8084afa <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8084aea:	687b      	ldr	r3, [r7, #4]
 8084aec:	681b      	ldr	r3, [r3, #0]
 8084aee:	681a      	ldr	r2, [r3, #0]
 8084af0:	687b      	ldr	r3, [r7, #4]
 8084af2:	681b      	ldr	r3, [r3, #0]
 8084af4:	f042 0201 	orr.w	r2, r2, #1
 8084af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8084afa:	2300      	movs	r3, #0
}
 8084afc:	4618      	mov	r0, r3
 8084afe:	3710      	adds	r7, #16
 8084b00:	46bd      	mov	sp, r7
 8084b02:	bd80      	pop	{r7, pc}

08084b04 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8084b04:	b580      	push	{r7, lr}
 8084b06:	b082      	sub	sp, #8
 8084b08:	af00      	add	r7, sp, #0
 8084b0a:	6078      	str	r0, [r7, #4]
 8084b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8084b0e:	683b      	ldr	r3, [r7, #0]
 8084b10:	2b0c      	cmp	r3, #12
 8084b12:	d841      	bhi.n	8084b98 <HAL_TIM_IC_Stop_IT+0x94>
 8084b14:	a201      	add	r2, pc, #4	; (adr r2, 8084b1c <HAL_TIM_IC_Stop_IT+0x18>)
 8084b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8084b1a:	bf00      	nop
 8084b1c:	08084b51 	.word	0x08084b51
 8084b20:	08084b99 	.word	0x08084b99
 8084b24:	08084b99 	.word	0x08084b99
 8084b28:	08084b99 	.word	0x08084b99
 8084b2c:	08084b63 	.word	0x08084b63
 8084b30:	08084b99 	.word	0x08084b99
 8084b34:	08084b99 	.word	0x08084b99
 8084b38:	08084b99 	.word	0x08084b99
 8084b3c:	08084b75 	.word	0x08084b75
 8084b40:	08084b99 	.word	0x08084b99
 8084b44:	08084b99 	.word	0x08084b99
 8084b48:	08084b99 	.word	0x08084b99
 8084b4c:	08084b87 	.word	0x08084b87
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8084b50:	687b      	ldr	r3, [r7, #4]
 8084b52:	681b      	ldr	r3, [r3, #0]
 8084b54:	68da      	ldr	r2, [r3, #12]
 8084b56:	687b      	ldr	r3, [r7, #4]
 8084b58:	681b      	ldr	r3, [r3, #0]
 8084b5a:	f022 0202 	bic.w	r2, r2, #2
 8084b5e:	60da      	str	r2, [r3, #12]
      break;
 8084b60:	e01b      	b.n	8084b9a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8084b62:	687b      	ldr	r3, [r7, #4]
 8084b64:	681b      	ldr	r3, [r3, #0]
 8084b66:	68da      	ldr	r2, [r3, #12]
 8084b68:	687b      	ldr	r3, [r7, #4]
 8084b6a:	681b      	ldr	r3, [r3, #0]
 8084b6c:	f022 0204 	bic.w	r2, r2, #4
 8084b70:	60da      	str	r2, [r3, #12]
      break;
 8084b72:	e012      	b.n	8084b9a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8084b74:	687b      	ldr	r3, [r7, #4]
 8084b76:	681b      	ldr	r3, [r3, #0]
 8084b78:	68da      	ldr	r2, [r3, #12]
 8084b7a:	687b      	ldr	r3, [r7, #4]
 8084b7c:	681b      	ldr	r3, [r3, #0]
 8084b7e:	f022 0208 	bic.w	r2, r2, #8
 8084b82:	60da      	str	r2, [r3, #12]
      break;
 8084b84:	e009      	b.n	8084b9a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8084b86:	687b      	ldr	r3, [r7, #4]
 8084b88:	681b      	ldr	r3, [r3, #0]
 8084b8a:	68da      	ldr	r2, [r3, #12]
 8084b8c:	687b      	ldr	r3, [r7, #4]
 8084b8e:	681b      	ldr	r3, [r3, #0]
 8084b90:	f022 0210 	bic.w	r2, r2, #16
 8084b94:	60da      	str	r2, [r3, #12]
      break;
 8084b96:	e000      	b.n	8084b9a <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8084b98:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8084b9a:	687b      	ldr	r3, [r7, #4]
 8084b9c:	681b      	ldr	r3, [r3, #0]
 8084b9e:	2200      	movs	r2, #0
 8084ba0:	6839      	ldr	r1, [r7, #0]
 8084ba2:	4618      	mov	r0, r3
 8084ba4:	f002 fedc 	bl	8087960 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8084ba8:	687b      	ldr	r3, [r7, #4]
 8084baa:	681b      	ldr	r3, [r3, #0]
 8084bac:	6a1a      	ldr	r2, [r3, #32]
 8084bae:	f241 1311 	movw	r3, #4369	; 0x1111
 8084bb2:	4013      	ands	r3, r2
 8084bb4:	2b00      	cmp	r3, #0
 8084bb6:	d10f      	bne.n	8084bd8 <HAL_TIM_IC_Stop_IT+0xd4>
 8084bb8:	687b      	ldr	r3, [r7, #4]
 8084bba:	681b      	ldr	r3, [r3, #0]
 8084bbc:	6a1a      	ldr	r2, [r3, #32]
 8084bbe:	f240 4344 	movw	r3, #1092	; 0x444
 8084bc2:	4013      	ands	r3, r2
 8084bc4:	2b00      	cmp	r3, #0
 8084bc6:	d107      	bne.n	8084bd8 <HAL_TIM_IC_Stop_IT+0xd4>
 8084bc8:	687b      	ldr	r3, [r7, #4]
 8084bca:	681b      	ldr	r3, [r3, #0]
 8084bcc:	681a      	ldr	r2, [r3, #0]
 8084bce:	687b      	ldr	r3, [r7, #4]
 8084bd0:	681b      	ldr	r3, [r3, #0]
 8084bd2:	f022 0201 	bic.w	r2, r2, #1
 8084bd6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8084bd8:	2300      	movs	r3, #0
}
 8084bda:	4618      	mov	r0, r3
 8084bdc:	3708      	adds	r7, #8
 8084bde:	46bd      	mov	sp, r7
 8084be0:	bd80      	pop	{r7, pc}

08084be2 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8084be2:	b580      	push	{r7, lr}
 8084be4:	b086      	sub	sp, #24
 8084be6:	af00      	add	r7, sp, #0
 8084be8:	60f8      	str	r0, [r7, #12]
 8084bea:	60b9      	str	r1, [r7, #8]
 8084bec:	607a      	str	r2, [r7, #4]
 8084bee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8084bf0:	68fb      	ldr	r3, [r7, #12]
 8084bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8084bf6:	b2db      	uxtb	r3, r3
 8084bf8:	2b02      	cmp	r3, #2
 8084bfa:	d101      	bne.n	8084c00 <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8084bfc:	2302      	movs	r3, #2
 8084bfe:	e0dd      	b.n	8084dbc <HAL_TIM_IC_Start_DMA+0x1da>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8084c00:	68fb      	ldr	r3, [r7, #12]
 8084c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8084c06:	b2db      	uxtb	r3, r3
 8084c08:	2b01      	cmp	r3, #1
 8084c0a:	d10b      	bne.n	8084c24 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8084c0c:	687b      	ldr	r3, [r7, #4]
 8084c0e:	2b00      	cmp	r3, #0
 8084c10:	d104      	bne.n	8084c1c <HAL_TIM_IC_Start_DMA+0x3a>
 8084c12:	887b      	ldrh	r3, [r7, #2]
 8084c14:	2b00      	cmp	r3, #0
 8084c16:	d001      	beq.n	8084c1c <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8084c18:	2301      	movs	r3, #1
 8084c1a:	e0cf      	b.n	8084dbc <HAL_TIM_IC_Start_DMA+0x1da>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8084c1c:	68fb      	ldr	r3, [r7, #12]
 8084c1e:	2202      	movs	r2, #2
 8084c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8084c24:	68bb      	ldr	r3, [r7, #8]
 8084c26:	2b0c      	cmp	r3, #12
 8084c28:	f200 80ae 	bhi.w	8084d88 <HAL_TIM_IC_Start_DMA+0x1a6>
 8084c2c:	a201      	add	r2, pc, #4	; (adr r2, 8084c34 <HAL_TIM_IC_Start_DMA+0x52>)
 8084c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8084c32:	bf00      	nop
 8084c34:	08084c69 	.word	0x08084c69
 8084c38:	08084d89 	.word	0x08084d89
 8084c3c:	08084d89 	.word	0x08084d89
 8084c40:	08084d89 	.word	0x08084d89
 8084c44:	08084cb1 	.word	0x08084cb1
 8084c48:	08084d89 	.word	0x08084d89
 8084c4c:	08084d89 	.word	0x08084d89
 8084c50:	08084d89 	.word	0x08084d89
 8084c54:	08084cf9 	.word	0x08084cf9
 8084c58:	08084d89 	.word	0x08084d89
 8084c5c:	08084d89 	.word	0x08084d89
 8084c60:	08084d89 	.word	0x08084d89
 8084c64:	08084d41 	.word	0x08084d41
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8084c68:	68fb      	ldr	r3, [r7, #12]
 8084c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084c6c:	4a55      	ldr	r2, [pc, #340]	; (8084dc4 <HAL_TIM_IC_Start_DMA+0x1e2>)
 8084c6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8084c70:	68fb      	ldr	r3, [r7, #12]
 8084c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084c74:	4a54      	ldr	r2, [pc, #336]	; (8084dc8 <HAL_TIM_IC_Start_DMA+0x1e6>)
 8084c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8084c78:	68fb      	ldr	r3, [r7, #12]
 8084c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084c7c:	4a53      	ldr	r2, [pc, #332]	; (8084dcc <HAL_TIM_IC_Start_DMA+0x1ea>)
 8084c7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8084c80:	68fb      	ldr	r3, [r7, #12]
 8084c82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8084c84:	68fb      	ldr	r3, [r7, #12]
 8084c86:	681b      	ldr	r3, [r3, #0]
 8084c88:	3334      	adds	r3, #52	; 0x34
 8084c8a:	4619      	mov	r1, r3
 8084c8c:	687a      	ldr	r2, [r7, #4]
 8084c8e:	887b      	ldrh	r3, [r7, #2]
 8084c90:	f7fc fedf 	bl	8081a52 <HAL_DMA_Start_IT>
 8084c94:	4603      	mov	r3, r0
 8084c96:	2b00      	cmp	r3, #0
 8084c98:	d001      	beq.n	8084c9e <HAL_TIM_IC_Start_DMA+0xbc>
      {
        return HAL_ERROR;
 8084c9a:	2301      	movs	r3, #1
 8084c9c:	e08e      	b.n	8084dbc <HAL_TIM_IC_Start_DMA+0x1da>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8084c9e:	68fb      	ldr	r3, [r7, #12]
 8084ca0:	681b      	ldr	r3, [r3, #0]
 8084ca2:	68da      	ldr	r2, [r3, #12]
 8084ca4:	68fb      	ldr	r3, [r7, #12]
 8084ca6:	681b      	ldr	r3, [r3, #0]
 8084ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8084cac:	60da      	str	r2, [r3, #12]
      break;
 8084cae:	e06c      	b.n	8084d8a <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8084cb0:	68fb      	ldr	r3, [r7, #12]
 8084cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084cb4:	4a43      	ldr	r2, [pc, #268]	; (8084dc4 <HAL_TIM_IC_Start_DMA+0x1e2>)
 8084cb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8084cb8:	68fb      	ldr	r3, [r7, #12]
 8084cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084cbc:	4a42      	ldr	r2, [pc, #264]	; (8084dc8 <HAL_TIM_IC_Start_DMA+0x1e6>)
 8084cbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8084cc0:	68fb      	ldr	r3, [r7, #12]
 8084cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084cc4:	4a41      	ldr	r2, [pc, #260]	; (8084dcc <HAL_TIM_IC_Start_DMA+0x1ea>)
 8084cc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8084cc8:	68fb      	ldr	r3, [r7, #12]
 8084cca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8084ccc:	68fb      	ldr	r3, [r7, #12]
 8084cce:	681b      	ldr	r3, [r3, #0]
 8084cd0:	3338      	adds	r3, #56	; 0x38
 8084cd2:	4619      	mov	r1, r3
 8084cd4:	687a      	ldr	r2, [r7, #4]
 8084cd6:	887b      	ldrh	r3, [r7, #2]
 8084cd8:	f7fc febb 	bl	8081a52 <HAL_DMA_Start_IT>
 8084cdc:	4603      	mov	r3, r0
 8084cde:	2b00      	cmp	r3, #0
 8084ce0:	d001      	beq.n	8084ce6 <HAL_TIM_IC_Start_DMA+0x104>
      {
        return HAL_ERROR;
 8084ce2:	2301      	movs	r3, #1
 8084ce4:	e06a      	b.n	8084dbc <HAL_TIM_IC_Start_DMA+0x1da>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8084ce6:	68fb      	ldr	r3, [r7, #12]
 8084ce8:	681b      	ldr	r3, [r3, #0]
 8084cea:	68da      	ldr	r2, [r3, #12]
 8084cec:	68fb      	ldr	r3, [r7, #12]
 8084cee:	681b      	ldr	r3, [r3, #0]
 8084cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8084cf4:	60da      	str	r2, [r3, #12]
      break;
 8084cf6:	e048      	b.n	8084d8a <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8084cf8:	68fb      	ldr	r3, [r7, #12]
 8084cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084cfc:	4a31      	ldr	r2, [pc, #196]	; (8084dc4 <HAL_TIM_IC_Start_DMA+0x1e2>)
 8084cfe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8084d00:	68fb      	ldr	r3, [r7, #12]
 8084d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084d04:	4a30      	ldr	r2, [pc, #192]	; (8084dc8 <HAL_TIM_IC_Start_DMA+0x1e6>)
 8084d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8084d08:	68fb      	ldr	r3, [r7, #12]
 8084d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084d0c:	4a2f      	ldr	r2, [pc, #188]	; (8084dcc <HAL_TIM_IC_Start_DMA+0x1ea>)
 8084d0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8084d10:	68fb      	ldr	r3, [r7, #12]
 8084d12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8084d14:	68fb      	ldr	r3, [r7, #12]
 8084d16:	681b      	ldr	r3, [r3, #0]
 8084d18:	333c      	adds	r3, #60	; 0x3c
 8084d1a:	4619      	mov	r1, r3
 8084d1c:	687a      	ldr	r2, [r7, #4]
 8084d1e:	887b      	ldrh	r3, [r7, #2]
 8084d20:	f7fc fe97 	bl	8081a52 <HAL_DMA_Start_IT>
 8084d24:	4603      	mov	r3, r0
 8084d26:	2b00      	cmp	r3, #0
 8084d28:	d001      	beq.n	8084d2e <HAL_TIM_IC_Start_DMA+0x14c>
      {
        return HAL_ERROR;
 8084d2a:	2301      	movs	r3, #1
 8084d2c:	e046      	b.n	8084dbc <HAL_TIM_IC_Start_DMA+0x1da>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8084d2e:	68fb      	ldr	r3, [r7, #12]
 8084d30:	681b      	ldr	r3, [r3, #0]
 8084d32:	68da      	ldr	r2, [r3, #12]
 8084d34:	68fb      	ldr	r3, [r7, #12]
 8084d36:	681b      	ldr	r3, [r3, #0]
 8084d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8084d3c:	60da      	str	r2, [r3, #12]
      break;
 8084d3e:	e024      	b.n	8084d8a <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8084d40:	68fb      	ldr	r3, [r7, #12]
 8084d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084d44:	4a1f      	ldr	r2, [pc, #124]	; (8084dc4 <HAL_TIM_IC_Start_DMA+0x1e2>)
 8084d46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8084d48:	68fb      	ldr	r3, [r7, #12]
 8084d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084d4c:	4a1e      	ldr	r2, [pc, #120]	; (8084dc8 <HAL_TIM_IC_Start_DMA+0x1e6>)
 8084d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8084d50:	68fb      	ldr	r3, [r7, #12]
 8084d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084d54:	4a1d      	ldr	r2, [pc, #116]	; (8084dcc <HAL_TIM_IC_Start_DMA+0x1ea>)
 8084d56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8084d58:	68fb      	ldr	r3, [r7, #12]
 8084d5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8084d5c:	68fb      	ldr	r3, [r7, #12]
 8084d5e:	681b      	ldr	r3, [r3, #0]
 8084d60:	3340      	adds	r3, #64	; 0x40
 8084d62:	4619      	mov	r1, r3
 8084d64:	687a      	ldr	r2, [r7, #4]
 8084d66:	887b      	ldrh	r3, [r7, #2]
 8084d68:	f7fc fe73 	bl	8081a52 <HAL_DMA_Start_IT>
 8084d6c:	4603      	mov	r3, r0
 8084d6e:	2b00      	cmp	r3, #0
 8084d70:	d001      	beq.n	8084d76 <HAL_TIM_IC_Start_DMA+0x194>
      {
        return HAL_ERROR;
 8084d72:	2301      	movs	r3, #1
 8084d74:	e022      	b.n	8084dbc <HAL_TIM_IC_Start_DMA+0x1da>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8084d76:	68fb      	ldr	r3, [r7, #12]
 8084d78:	681b      	ldr	r3, [r3, #0]
 8084d7a:	68da      	ldr	r2, [r3, #12]
 8084d7c:	68fb      	ldr	r3, [r7, #12]
 8084d7e:	681b      	ldr	r3, [r3, #0]
 8084d80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8084d84:	60da      	str	r2, [r3, #12]
      break;
 8084d86:	e000      	b.n	8084d8a <HAL_TIM_IC_Start_DMA+0x1a8>
    }

    default:
      break;
 8084d88:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8084d8a:	68fb      	ldr	r3, [r7, #12]
 8084d8c:	681b      	ldr	r3, [r3, #0]
 8084d8e:	2201      	movs	r2, #1
 8084d90:	68b9      	ldr	r1, [r7, #8]
 8084d92:	4618      	mov	r0, r3
 8084d94:	f002 fde4 	bl	8087960 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8084d98:	68fb      	ldr	r3, [r7, #12]
 8084d9a:	681b      	ldr	r3, [r3, #0]
 8084d9c:	689b      	ldr	r3, [r3, #8]
 8084d9e:	f003 0307 	and.w	r3, r3, #7
 8084da2:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8084da4:	697b      	ldr	r3, [r7, #20]
 8084da6:	2b06      	cmp	r3, #6
 8084da8:	d007      	beq.n	8084dba <HAL_TIM_IC_Start_DMA+0x1d8>
  {
    __HAL_TIM_ENABLE(htim);
 8084daa:	68fb      	ldr	r3, [r7, #12]
 8084dac:	681b      	ldr	r3, [r3, #0]
 8084dae:	681a      	ldr	r2, [r3, #0]
 8084db0:	68fb      	ldr	r3, [r7, #12]
 8084db2:	681b      	ldr	r3, [r3, #0]
 8084db4:	f042 0201 	orr.w	r2, r2, #1
 8084db8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8084dba:	2300      	movs	r3, #0
}
 8084dbc:	4618      	mov	r0, r3
 8084dbe:	3718      	adds	r7, #24
 8084dc0:	46bd      	mov	sp, r7
 8084dc2:	bd80      	pop	{r7, pc}
 8084dc4:	08086ebd 	.word	0x08086ebd
 8084dc8:	08086f2d 	.word	0x08086f2d
 8084dcc:	08086db9 	.word	0x08086db9

08084dd0 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8084dd0:	b580      	push	{r7, lr}
 8084dd2:	b082      	sub	sp, #8
 8084dd4:	af00      	add	r7, sp, #0
 8084dd6:	6078      	str	r0, [r7, #4]
 8084dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8084dda:	683b      	ldr	r3, [r7, #0]
 8084ddc:	2b0c      	cmp	r3, #12
 8084dde:	d855      	bhi.n	8084e8c <HAL_TIM_IC_Stop_DMA+0xbc>
 8084de0:	a201      	add	r2, pc, #4	; (adr r2, 8084de8 <HAL_TIM_IC_Stop_DMA+0x18>)
 8084de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8084de6:	bf00      	nop
 8084de8:	08084e1d 	.word	0x08084e1d
 8084dec:	08084e8d 	.word	0x08084e8d
 8084df0:	08084e8d 	.word	0x08084e8d
 8084df4:	08084e8d 	.word	0x08084e8d
 8084df8:	08084e39 	.word	0x08084e39
 8084dfc:	08084e8d 	.word	0x08084e8d
 8084e00:	08084e8d 	.word	0x08084e8d
 8084e04:	08084e8d 	.word	0x08084e8d
 8084e08:	08084e55 	.word	0x08084e55
 8084e0c:	08084e8d 	.word	0x08084e8d
 8084e10:	08084e8d 	.word	0x08084e8d
 8084e14:	08084e8d 	.word	0x08084e8d
 8084e18:	08084e71 	.word	0x08084e71
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8084e1c:	687b      	ldr	r3, [r7, #4]
 8084e1e:	681b      	ldr	r3, [r3, #0]
 8084e20:	68da      	ldr	r2, [r3, #12]
 8084e22:	687b      	ldr	r3, [r7, #4]
 8084e24:	681b      	ldr	r3, [r3, #0]
 8084e26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8084e2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8084e2c:	687b      	ldr	r3, [r7, #4]
 8084e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084e30:	4618      	mov	r0, r3
 8084e32:	f7fc fede 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 8084e36:	e02a      	b.n	8084e8e <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8084e38:	687b      	ldr	r3, [r7, #4]
 8084e3a:	681b      	ldr	r3, [r3, #0]
 8084e3c:	68da      	ldr	r2, [r3, #12]
 8084e3e:	687b      	ldr	r3, [r7, #4]
 8084e40:	681b      	ldr	r3, [r3, #0]
 8084e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8084e46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8084e48:	687b      	ldr	r3, [r7, #4]
 8084e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8084e4c:	4618      	mov	r0, r3
 8084e4e:	f7fc fed0 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 8084e52:	e01c      	b.n	8084e8e <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8084e54:	687b      	ldr	r3, [r7, #4]
 8084e56:	681b      	ldr	r3, [r3, #0]
 8084e58:	68da      	ldr	r2, [r3, #12]
 8084e5a:	687b      	ldr	r3, [r7, #4]
 8084e5c:	681b      	ldr	r3, [r3, #0]
 8084e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8084e62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8084e64:	687b      	ldr	r3, [r7, #4]
 8084e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084e68:	4618      	mov	r0, r3
 8084e6a:	f7fc fec2 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 8084e6e:	e00e      	b.n	8084e8e <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8084e70:	687b      	ldr	r3, [r7, #4]
 8084e72:	681b      	ldr	r3, [r3, #0]
 8084e74:	68da      	ldr	r2, [r3, #12]
 8084e76:	687b      	ldr	r3, [r7, #4]
 8084e78:	681b      	ldr	r3, [r3, #0]
 8084e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8084e7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8084e80:	687b      	ldr	r3, [r7, #4]
 8084e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084e84:	4618      	mov	r0, r3
 8084e86:	f7fc feb4 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 8084e8a:	e000      	b.n	8084e8e <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 8084e8c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8084e8e:	687b      	ldr	r3, [r7, #4]
 8084e90:	681b      	ldr	r3, [r3, #0]
 8084e92:	2200      	movs	r2, #0
 8084e94:	6839      	ldr	r1, [r7, #0]
 8084e96:	4618      	mov	r0, r3
 8084e98:	f002 fd62 	bl	8087960 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8084e9c:	687b      	ldr	r3, [r7, #4]
 8084e9e:	681b      	ldr	r3, [r3, #0]
 8084ea0:	6a1a      	ldr	r2, [r3, #32]
 8084ea2:	f241 1311 	movw	r3, #4369	; 0x1111
 8084ea6:	4013      	ands	r3, r2
 8084ea8:	2b00      	cmp	r3, #0
 8084eaa:	d10f      	bne.n	8084ecc <HAL_TIM_IC_Stop_DMA+0xfc>
 8084eac:	687b      	ldr	r3, [r7, #4]
 8084eae:	681b      	ldr	r3, [r3, #0]
 8084eb0:	6a1a      	ldr	r2, [r3, #32]
 8084eb2:	f240 4344 	movw	r3, #1092	; 0x444
 8084eb6:	4013      	ands	r3, r2
 8084eb8:	2b00      	cmp	r3, #0
 8084eba:	d107      	bne.n	8084ecc <HAL_TIM_IC_Stop_DMA+0xfc>
 8084ebc:	687b      	ldr	r3, [r7, #4]
 8084ebe:	681b      	ldr	r3, [r3, #0]
 8084ec0:	681a      	ldr	r2, [r3, #0]
 8084ec2:	687b      	ldr	r3, [r7, #4]
 8084ec4:	681b      	ldr	r3, [r3, #0]
 8084ec6:	f022 0201 	bic.w	r2, r2, #1
 8084eca:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8084ecc:	687b      	ldr	r3, [r7, #4]
 8084ece:	2201      	movs	r2, #1
 8084ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8084ed4:	2300      	movs	r3, #0
}
 8084ed6:	4618      	mov	r0, r3
 8084ed8:	3708      	adds	r7, #8
 8084eda:	46bd      	mov	sp, r7
 8084edc:	bd80      	pop	{r7, pc}

08084ede <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8084ede:	b580      	push	{r7, lr}
 8084ee0:	b082      	sub	sp, #8
 8084ee2:	af00      	add	r7, sp, #0
 8084ee4:	6078      	str	r0, [r7, #4]
 8084ee6:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8084ee8:	687b      	ldr	r3, [r7, #4]
 8084eea:	2b00      	cmp	r3, #0
 8084eec:	d101      	bne.n	8084ef2 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8084eee:	2301      	movs	r3, #1
 8084ef0:	e02d      	b.n	8084f4e <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8084ef2:	687b      	ldr	r3, [r7, #4]
 8084ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8084ef8:	b2db      	uxtb	r3, r3
 8084efa:	2b00      	cmp	r3, #0
 8084efc:	d106      	bne.n	8084f0c <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8084efe:	687b      	ldr	r3, [r7, #4]
 8084f00:	2200      	movs	r2, #0
 8084f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8084f06:	6878      	ldr	r0, [r7, #4]
 8084f08:	f000 f855 	bl	8084fb6 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8084f0c:	687b      	ldr	r3, [r7, #4]
 8084f0e:	2202      	movs	r2, #2
 8084f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8084f14:	687b      	ldr	r3, [r7, #4]
 8084f16:	681a      	ldr	r2, [r3, #0]
 8084f18:	687b      	ldr	r3, [r7, #4]
 8084f1a:	3304      	adds	r3, #4
 8084f1c:	4619      	mov	r1, r3
 8084f1e:	4610      	mov	r0, r2
 8084f20:	f002 f884 	bl	808702c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8084f24:	687b      	ldr	r3, [r7, #4]
 8084f26:	681b      	ldr	r3, [r3, #0]
 8084f28:	681a      	ldr	r2, [r3, #0]
 8084f2a:	687b      	ldr	r3, [r7, #4]
 8084f2c:	681b      	ldr	r3, [r3, #0]
 8084f2e:	f022 0208 	bic.w	r2, r2, #8
 8084f32:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8084f34:	687b      	ldr	r3, [r7, #4]
 8084f36:	681b      	ldr	r3, [r3, #0]
 8084f38:	6819      	ldr	r1, [r3, #0]
 8084f3a:	687b      	ldr	r3, [r7, #4]
 8084f3c:	681b      	ldr	r3, [r3, #0]
 8084f3e:	683a      	ldr	r2, [r7, #0]
 8084f40:	430a      	orrs	r2, r1
 8084f42:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8084f44:	687b      	ldr	r3, [r7, #4]
 8084f46:	2201      	movs	r2, #1
 8084f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8084f4c:	2300      	movs	r3, #0
}
 8084f4e:	4618      	mov	r0, r3
 8084f50:	3708      	adds	r7, #8
 8084f52:	46bd      	mov	sp, r7
 8084f54:	bd80      	pop	{r7, pc}

08084f56 <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse
  * @param  htim TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 8084f56:	b580      	push	{r7, lr}
 8084f58:	b082      	sub	sp, #8
 8084f5a:	af00      	add	r7, sp, #0
 8084f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8084f5e:	687b      	ldr	r3, [r7, #4]
 8084f60:	2202      	movs	r2, #2
 8084f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8084f66:	687b      	ldr	r3, [r7, #4]
 8084f68:	681b      	ldr	r3, [r3, #0]
 8084f6a:	6a1a      	ldr	r2, [r3, #32]
 8084f6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8084f70:	4013      	ands	r3, r2
 8084f72:	2b00      	cmp	r3, #0
 8084f74:	d10f      	bne.n	8084f96 <HAL_TIM_OnePulse_DeInit+0x40>
 8084f76:	687b      	ldr	r3, [r7, #4]
 8084f78:	681b      	ldr	r3, [r3, #0]
 8084f7a:	6a1a      	ldr	r2, [r3, #32]
 8084f7c:	f240 4344 	movw	r3, #1092	; 0x444
 8084f80:	4013      	ands	r3, r2
 8084f82:	2b00      	cmp	r3, #0
 8084f84:	d107      	bne.n	8084f96 <HAL_TIM_OnePulse_DeInit+0x40>
 8084f86:	687b      	ldr	r3, [r7, #4]
 8084f88:	681b      	ldr	r3, [r3, #0]
 8084f8a:	681a      	ldr	r2, [r3, #0]
 8084f8c:	687b      	ldr	r3, [r7, #4]
 8084f8e:	681b      	ldr	r3, [r3, #0]
 8084f90:	f022 0201 	bic.w	r2, r2, #1
 8084f94:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OnePulse_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 8084f96:	6878      	ldr	r0, [r7, #4]
 8084f98:	f000 f817 	bl	8084fca <HAL_TIM_OnePulse_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8084f9c:	687b      	ldr	r3, [r7, #4]
 8084f9e:	2200      	movs	r2, #0
 8084fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8084fa4:	687b      	ldr	r3, [r7, #4]
 8084fa6:	2200      	movs	r2, #0
 8084fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8084fac:	2300      	movs	r3, #0
}
 8084fae:	4618      	mov	r0, r3
 8084fb0:	3708      	adds	r7, #8
 8084fb2:	46bd      	mov	sp, r7
 8084fb4:	bd80      	pop	{r7, pc}

08084fb6 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8084fb6:	b480      	push	{r7}
 8084fb8:	b083      	sub	sp, #12
 8084fba:	af00      	add	r7, sp, #0
 8084fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8084fbe:	bf00      	nop
 8084fc0:	370c      	adds	r7, #12
 8084fc2:	46bd      	mov	sp, r7
 8084fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084fc8:	4770      	bx	lr

08084fca <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 8084fca:	b480      	push	{r7}
 8084fcc:	b083      	sub	sp, #12
 8084fce:	af00      	add	r7, sp, #0
 8084fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 8084fd2:	bf00      	nop
 8084fd4:	370c      	adds	r7, #12
 8084fd6:	46bd      	mov	sp, r7
 8084fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084fdc:	4770      	bx	lr

08084fde <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8084fde:	b580      	push	{r7, lr}
 8084fe0:	b082      	sub	sp, #8
 8084fe2:	af00      	add	r7, sp, #0
 8084fe4:	6078      	str	r0, [r7, #4]
 8084fe6:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8084fe8:	687b      	ldr	r3, [r7, #4]
 8084fea:	681b      	ldr	r3, [r3, #0]
 8084fec:	2201      	movs	r2, #1
 8084fee:	2100      	movs	r1, #0
 8084ff0:	4618      	mov	r0, r3
 8084ff2:	f002 fcb5 	bl	8087960 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8084ff6:	687b      	ldr	r3, [r7, #4]
 8084ff8:	681b      	ldr	r3, [r3, #0]
 8084ffa:	2201      	movs	r2, #1
 8084ffc:	2104      	movs	r1, #4
 8084ffe:	4618      	mov	r0, r3
 8085000:	f002 fcae 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8085004:	687b      	ldr	r3, [r7, #4]
 8085006:	681b      	ldr	r3, [r3, #0]
 8085008:	4a0c      	ldr	r2, [pc, #48]	; (808503c <HAL_TIM_OnePulse_Start+0x5e>)
 808500a:	4293      	cmp	r3, r2
 808500c:	d004      	beq.n	8085018 <HAL_TIM_OnePulse_Start+0x3a>
 808500e:	687b      	ldr	r3, [r7, #4]
 8085010:	681b      	ldr	r3, [r3, #0]
 8085012:	4a0b      	ldr	r2, [pc, #44]	; (8085040 <HAL_TIM_OnePulse_Start+0x62>)
 8085014:	4293      	cmp	r3, r2
 8085016:	d101      	bne.n	808501c <HAL_TIM_OnePulse_Start+0x3e>
 8085018:	2301      	movs	r3, #1
 808501a:	e000      	b.n	808501e <HAL_TIM_OnePulse_Start+0x40>
 808501c:	2300      	movs	r3, #0
 808501e:	2b00      	cmp	r3, #0
 8085020:	d007      	beq.n	8085032 <HAL_TIM_OnePulse_Start+0x54>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8085022:	687b      	ldr	r3, [r7, #4]
 8085024:	681b      	ldr	r3, [r3, #0]
 8085026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8085028:	687b      	ldr	r3, [r7, #4]
 808502a:	681b      	ldr	r3, [r3, #0]
 808502c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8085030:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8085032:	2300      	movs	r3, #0
}
 8085034:	4618      	mov	r0, r3
 8085036:	3708      	adds	r7, #8
 8085038:	46bd      	mov	sp, r7
 808503a:	bd80      	pop	{r7, pc}
 808503c:	40010000 	.word	0x40010000
 8085040:	40010400 	.word	0x40010400

08085044 <HAL_TIM_OnePulse_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8085044:	b580      	push	{r7, lr}
 8085046:	b082      	sub	sp, #8
 8085048:	af00      	add	r7, sp, #0
 808504a:	6078      	str	r0, [r7, #4]
 808504c:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 808504e:	687b      	ldr	r3, [r7, #4]
 8085050:	681b      	ldr	r3, [r3, #0]
 8085052:	2200      	movs	r2, #0
 8085054:	2100      	movs	r1, #0
 8085056:	4618      	mov	r0, r3
 8085058:	f002 fc82 	bl	8087960 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 808505c:	687b      	ldr	r3, [r7, #4]
 808505e:	681b      	ldr	r3, [r3, #0]
 8085060:	2200      	movs	r2, #0
 8085062:	2104      	movs	r1, #4
 8085064:	4618      	mov	r0, r3
 8085066:	f002 fc7b 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 808506a:	687b      	ldr	r3, [r7, #4]
 808506c:	681b      	ldr	r3, [r3, #0]
 808506e:	4a21      	ldr	r2, [pc, #132]	; (80850f4 <HAL_TIM_OnePulse_Stop+0xb0>)
 8085070:	4293      	cmp	r3, r2
 8085072:	d004      	beq.n	808507e <HAL_TIM_OnePulse_Stop+0x3a>
 8085074:	687b      	ldr	r3, [r7, #4]
 8085076:	681b      	ldr	r3, [r3, #0]
 8085078:	4a1f      	ldr	r2, [pc, #124]	; (80850f8 <HAL_TIM_OnePulse_Stop+0xb4>)
 808507a:	4293      	cmp	r3, r2
 808507c:	d101      	bne.n	8085082 <HAL_TIM_OnePulse_Stop+0x3e>
 808507e:	2301      	movs	r3, #1
 8085080:	e000      	b.n	8085084 <HAL_TIM_OnePulse_Stop+0x40>
 8085082:	2300      	movs	r3, #0
 8085084:	2b00      	cmp	r3, #0
 8085086:	d017      	beq.n	80850b8 <HAL_TIM_OnePulse_Stop+0x74>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8085088:	687b      	ldr	r3, [r7, #4]
 808508a:	681b      	ldr	r3, [r3, #0]
 808508c:	6a1a      	ldr	r2, [r3, #32]
 808508e:	f241 1311 	movw	r3, #4369	; 0x1111
 8085092:	4013      	ands	r3, r2
 8085094:	2b00      	cmp	r3, #0
 8085096:	d10f      	bne.n	80850b8 <HAL_TIM_OnePulse_Stop+0x74>
 8085098:	687b      	ldr	r3, [r7, #4]
 808509a:	681b      	ldr	r3, [r3, #0]
 808509c:	6a1a      	ldr	r2, [r3, #32]
 808509e:	f240 4344 	movw	r3, #1092	; 0x444
 80850a2:	4013      	ands	r3, r2
 80850a4:	2b00      	cmp	r3, #0
 80850a6:	d107      	bne.n	80850b8 <HAL_TIM_OnePulse_Stop+0x74>
 80850a8:	687b      	ldr	r3, [r7, #4]
 80850aa:	681b      	ldr	r3, [r3, #0]
 80850ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80850ae:	687b      	ldr	r3, [r7, #4]
 80850b0:	681b      	ldr	r3, [r3, #0]
 80850b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80850b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80850b8:	687b      	ldr	r3, [r7, #4]
 80850ba:	681b      	ldr	r3, [r3, #0]
 80850bc:	6a1a      	ldr	r2, [r3, #32]
 80850be:	f241 1311 	movw	r3, #4369	; 0x1111
 80850c2:	4013      	ands	r3, r2
 80850c4:	2b00      	cmp	r3, #0
 80850c6:	d10f      	bne.n	80850e8 <HAL_TIM_OnePulse_Stop+0xa4>
 80850c8:	687b      	ldr	r3, [r7, #4]
 80850ca:	681b      	ldr	r3, [r3, #0]
 80850cc:	6a1a      	ldr	r2, [r3, #32]
 80850ce:	f240 4344 	movw	r3, #1092	; 0x444
 80850d2:	4013      	ands	r3, r2
 80850d4:	2b00      	cmp	r3, #0
 80850d6:	d107      	bne.n	80850e8 <HAL_TIM_OnePulse_Stop+0xa4>
 80850d8:	687b      	ldr	r3, [r7, #4]
 80850da:	681b      	ldr	r3, [r3, #0]
 80850dc:	681a      	ldr	r2, [r3, #0]
 80850de:	687b      	ldr	r3, [r7, #4]
 80850e0:	681b      	ldr	r3, [r3, #0]
 80850e2:	f022 0201 	bic.w	r2, r2, #1
 80850e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80850e8:	2300      	movs	r3, #0
}
 80850ea:	4618      	mov	r0, r3
 80850ec:	3708      	adds	r7, #8
 80850ee:	46bd      	mov	sp, r7
 80850f0:	bd80      	pop	{r7, pc}
 80850f2:	bf00      	nop
 80850f4:	40010000 	.word	0x40010000
 80850f8:	40010400 	.word	0x40010400

080850fc <HAL_TIM_OnePulse_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80850fc:	b580      	push	{r7, lr}
 80850fe:	b082      	sub	sp, #8
 8085100:	af00      	add	r7, sp, #0
 8085102:	6078      	str	r0, [r7, #4]
 8085104:	6039      	str	r1, [r7, #0]

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8085106:	687b      	ldr	r3, [r7, #4]
 8085108:	681b      	ldr	r3, [r3, #0]
 808510a:	68da      	ldr	r2, [r3, #12]
 808510c:	687b      	ldr	r3, [r7, #4]
 808510e:	681b      	ldr	r3, [r3, #0]
 8085110:	f042 0202 	orr.w	r2, r2, #2
 8085114:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8085116:	687b      	ldr	r3, [r7, #4]
 8085118:	681b      	ldr	r3, [r3, #0]
 808511a:	68da      	ldr	r2, [r3, #12]
 808511c:	687b      	ldr	r3, [r7, #4]
 808511e:	681b      	ldr	r3, [r3, #0]
 8085120:	f042 0204 	orr.w	r2, r2, #4
 8085124:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8085126:	687b      	ldr	r3, [r7, #4]
 8085128:	681b      	ldr	r3, [r3, #0]
 808512a:	2201      	movs	r2, #1
 808512c:	2100      	movs	r1, #0
 808512e:	4618      	mov	r0, r3
 8085130:	f002 fc16 	bl	8087960 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8085134:	687b      	ldr	r3, [r7, #4]
 8085136:	681b      	ldr	r3, [r3, #0]
 8085138:	2201      	movs	r2, #1
 808513a:	2104      	movs	r1, #4
 808513c:	4618      	mov	r0, r3
 808513e:	f002 fc0f 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8085142:	687b      	ldr	r3, [r7, #4]
 8085144:	681b      	ldr	r3, [r3, #0]
 8085146:	4a0d      	ldr	r2, [pc, #52]	; (808517c <HAL_TIM_OnePulse_Start_IT+0x80>)
 8085148:	4293      	cmp	r3, r2
 808514a:	d004      	beq.n	8085156 <HAL_TIM_OnePulse_Start_IT+0x5a>
 808514c:	687b      	ldr	r3, [r7, #4]
 808514e:	681b      	ldr	r3, [r3, #0]
 8085150:	4a0b      	ldr	r2, [pc, #44]	; (8085180 <HAL_TIM_OnePulse_Start_IT+0x84>)
 8085152:	4293      	cmp	r3, r2
 8085154:	d101      	bne.n	808515a <HAL_TIM_OnePulse_Start_IT+0x5e>
 8085156:	2301      	movs	r3, #1
 8085158:	e000      	b.n	808515c <HAL_TIM_OnePulse_Start_IT+0x60>
 808515a:	2300      	movs	r3, #0
 808515c:	2b00      	cmp	r3, #0
 808515e:	d007      	beq.n	8085170 <HAL_TIM_OnePulse_Start_IT+0x74>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8085160:	687b      	ldr	r3, [r7, #4]
 8085162:	681b      	ldr	r3, [r3, #0]
 8085164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8085166:	687b      	ldr	r3, [r7, #4]
 8085168:	681b      	ldr	r3, [r3, #0]
 808516a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 808516e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8085170:	2300      	movs	r3, #0
}
 8085172:	4618      	mov	r0, r3
 8085174:	3708      	adds	r7, #8
 8085176:	46bd      	mov	sp, r7
 8085178:	bd80      	pop	{r7, pc}
 808517a:	bf00      	nop
 808517c:	40010000 	.word	0x40010000
 8085180:	40010400 	.word	0x40010400

08085184 <HAL_TIM_OnePulse_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8085184:	b580      	push	{r7, lr}
 8085186:	b082      	sub	sp, #8
 8085188:	af00      	add	r7, sp, #0
 808518a:	6078      	str	r0, [r7, #4]
 808518c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 808518e:	687b      	ldr	r3, [r7, #4]
 8085190:	681b      	ldr	r3, [r3, #0]
 8085192:	68da      	ldr	r2, [r3, #12]
 8085194:	687b      	ldr	r3, [r7, #4]
 8085196:	681b      	ldr	r3, [r3, #0]
 8085198:	f022 0202 	bic.w	r2, r2, #2
 808519c:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 808519e:	687b      	ldr	r3, [r7, #4]
 80851a0:	681b      	ldr	r3, [r3, #0]
 80851a2:	68da      	ldr	r2, [r3, #12]
 80851a4:	687b      	ldr	r3, [r7, #4]
 80851a6:	681b      	ldr	r3, [r3, #0]
 80851a8:	f022 0204 	bic.w	r2, r2, #4
 80851ac:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80851ae:	687b      	ldr	r3, [r7, #4]
 80851b0:	681b      	ldr	r3, [r3, #0]
 80851b2:	2200      	movs	r2, #0
 80851b4:	2100      	movs	r1, #0
 80851b6:	4618      	mov	r0, r3
 80851b8:	f002 fbd2 	bl	8087960 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80851bc:	687b      	ldr	r3, [r7, #4]
 80851be:	681b      	ldr	r3, [r3, #0]
 80851c0:	2200      	movs	r2, #0
 80851c2:	2104      	movs	r1, #4
 80851c4:	4618      	mov	r0, r3
 80851c6:	f002 fbcb 	bl	8087960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80851ca:	687b      	ldr	r3, [r7, #4]
 80851cc:	681b      	ldr	r3, [r3, #0]
 80851ce:	4a21      	ldr	r2, [pc, #132]	; (8085254 <HAL_TIM_OnePulse_Stop_IT+0xd0>)
 80851d0:	4293      	cmp	r3, r2
 80851d2:	d004      	beq.n	80851de <HAL_TIM_OnePulse_Stop_IT+0x5a>
 80851d4:	687b      	ldr	r3, [r7, #4]
 80851d6:	681b      	ldr	r3, [r3, #0]
 80851d8:	4a1f      	ldr	r2, [pc, #124]	; (8085258 <HAL_TIM_OnePulse_Stop_IT+0xd4>)
 80851da:	4293      	cmp	r3, r2
 80851dc:	d101      	bne.n	80851e2 <HAL_TIM_OnePulse_Stop_IT+0x5e>
 80851de:	2301      	movs	r3, #1
 80851e0:	e000      	b.n	80851e4 <HAL_TIM_OnePulse_Stop_IT+0x60>
 80851e2:	2300      	movs	r3, #0
 80851e4:	2b00      	cmp	r3, #0
 80851e6:	d017      	beq.n	8085218 <HAL_TIM_OnePulse_Stop_IT+0x94>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80851e8:	687b      	ldr	r3, [r7, #4]
 80851ea:	681b      	ldr	r3, [r3, #0]
 80851ec:	6a1a      	ldr	r2, [r3, #32]
 80851ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80851f2:	4013      	ands	r3, r2
 80851f4:	2b00      	cmp	r3, #0
 80851f6:	d10f      	bne.n	8085218 <HAL_TIM_OnePulse_Stop_IT+0x94>
 80851f8:	687b      	ldr	r3, [r7, #4]
 80851fa:	681b      	ldr	r3, [r3, #0]
 80851fc:	6a1a      	ldr	r2, [r3, #32]
 80851fe:	f240 4344 	movw	r3, #1092	; 0x444
 8085202:	4013      	ands	r3, r2
 8085204:	2b00      	cmp	r3, #0
 8085206:	d107      	bne.n	8085218 <HAL_TIM_OnePulse_Stop_IT+0x94>
 8085208:	687b      	ldr	r3, [r7, #4]
 808520a:	681b      	ldr	r3, [r3, #0]
 808520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 808520e:	687b      	ldr	r3, [r7, #4]
 8085210:	681b      	ldr	r3, [r3, #0]
 8085212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8085216:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8085218:	687b      	ldr	r3, [r7, #4]
 808521a:	681b      	ldr	r3, [r3, #0]
 808521c:	6a1a      	ldr	r2, [r3, #32]
 808521e:	f241 1311 	movw	r3, #4369	; 0x1111
 8085222:	4013      	ands	r3, r2
 8085224:	2b00      	cmp	r3, #0
 8085226:	d10f      	bne.n	8085248 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 8085228:	687b      	ldr	r3, [r7, #4]
 808522a:	681b      	ldr	r3, [r3, #0]
 808522c:	6a1a      	ldr	r2, [r3, #32]
 808522e:	f240 4344 	movw	r3, #1092	; 0x444
 8085232:	4013      	ands	r3, r2
 8085234:	2b00      	cmp	r3, #0
 8085236:	d107      	bne.n	8085248 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 8085238:	687b      	ldr	r3, [r7, #4]
 808523a:	681b      	ldr	r3, [r3, #0]
 808523c:	681a      	ldr	r2, [r3, #0]
 808523e:	687b      	ldr	r3, [r7, #4]
 8085240:	681b      	ldr	r3, [r3, #0]
 8085242:	f022 0201 	bic.w	r2, r2, #1
 8085246:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8085248:	2300      	movs	r3, #0
}
 808524a:	4618      	mov	r0, r3
 808524c:	3708      	adds	r7, #8
 808524e:	46bd      	mov	sp, r7
 8085250:	bd80      	pop	{r7, pc}
 8085252:	bf00      	nop
 8085254:	40010000 	.word	0x40010000
 8085258:	40010400 	.word	0x40010400

0808525c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 808525c:	b580      	push	{r7, lr}
 808525e:	b086      	sub	sp, #24
 8085260:	af00      	add	r7, sp, #0
 8085262:	6078      	str	r0, [r7, #4]
 8085264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8085266:	687b      	ldr	r3, [r7, #4]
 8085268:	2b00      	cmp	r3, #0
 808526a:	d101      	bne.n	8085270 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 808526c:	2301      	movs	r3, #1
 808526e:	e083      	b.n	8085378 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8085270:	687b      	ldr	r3, [r7, #4]
 8085272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8085276:	b2db      	uxtb	r3, r3
 8085278:	2b00      	cmp	r3, #0
 808527a:	d106      	bne.n	808528a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 808527c:	687b      	ldr	r3, [r7, #4]
 808527e:	2200      	movs	r2, #0
 8085280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8085284:	6878      	ldr	r0, [r7, #4]
 8085286:	f000 f8ab 	bl	80853e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 808528a:	687b      	ldr	r3, [r7, #4]
 808528c:	2202      	movs	r2, #2
 808528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8085292:	687b      	ldr	r3, [r7, #4]
 8085294:	681b      	ldr	r3, [r3, #0]
 8085296:	689b      	ldr	r3, [r3, #8]
 8085298:	687a      	ldr	r2, [r7, #4]
 808529a:	6812      	ldr	r2, [r2, #0]
 808529c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80852a0:	f023 0307 	bic.w	r3, r3, #7
 80852a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80852a6:	687b      	ldr	r3, [r7, #4]
 80852a8:	681a      	ldr	r2, [r3, #0]
 80852aa:	687b      	ldr	r3, [r7, #4]
 80852ac:	3304      	adds	r3, #4
 80852ae:	4619      	mov	r1, r3
 80852b0:	4610      	mov	r0, r2
 80852b2:	f001 febb 	bl	808702c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80852b6:	687b      	ldr	r3, [r7, #4]
 80852b8:	681b      	ldr	r3, [r3, #0]
 80852ba:	689b      	ldr	r3, [r3, #8]
 80852bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80852be:	687b      	ldr	r3, [r7, #4]
 80852c0:	681b      	ldr	r3, [r3, #0]
 80852c2:	699b      	ldr	r3, [r3, #24]
 80852c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80852c6:	687b      	ldr	r3, [r7, #4]
 80852c8:	681b      	ldr	r3, [r3, #0]
 80852ca:	6a1b      	ldr	r3, [r3, #32]
 80852cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80852ce:	683b      	ldr	r3, [r7, #0]
 80852d0:	681b      	ldr	r3, [r3, #0]
 80852d2:	697a      	ldr	r2, [r7, #20]
 80852d4:	4313      	orrs	r3, r2
 80852d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80852d8:	693b      	ldr	r3, [r7, #16]
 80852da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80852de:	f023 0303 	bic.w	r3, r3, #3
 80852e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80852e4:	683b      	ldr	r3, [r7, #0]
 80852e6:	689a      	ldr	r2, [r3, #8]
 80852e8:	683b      	ldr	r3, [r7, #0]
 80852ea:	699b      	ldr	r3, [r3, #24]
 80852ec:	021b      	lsls	r3, r3, #8
 80852ee:	4313      	orrs	r3, r2
 80852f0:	693a      	ldr	r2, [r7, #16]
 80852f2:	4313      	orrs	r3, r2
 80852f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80852f6:	693b      	ldr	r3, [r7, #16]
 80852f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80852fc:	f023 030c 	bic.w	r3, r3, #12
 8085300:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8085302:	693b      	ldr	r3, [r7, #16]
 8085304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8085308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 808530c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 808530e:	683b      	ldr	r3, [r7, #0]
 8085310:	68da      	ldr	r2, [r3, #12]
 8085312:	683b      	ldr	r3, [r7, #0]
 8085314:	69db      	ldr	r3, [r3, #28]
 8085316:	021b      	lsls	r3, r3, #8
 8085318:	4313      	orrs	r3, r2
 808531a:	693a      	ldr	r2, [r7, #16]
 808531c:	4313      	orrs	r3, r2
 808531e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8085320:	683b      	ldr	r3, [r7, #0]
 8085322:	691b      	ldr	r3, [r3, #16]
 8085324:	011a      	lsls	r2, r3, #4
 8085326:	683b      	ldr	r3, [r7, #0]
 8085328:	6a1b      	ldr	r3, [r3, #32]
 808532a:	031b      	lsls	r3, r3, #12
 808532c:	4313      	orrs	r3, r2
 808532e:	693a      	ldr	r2, [r7, #16]
 8085330:	4313      	orrs	r3, r2
 8085332:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8085334:	68fb      	ldr	r3, [r7, #12]
 8085336:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 808533a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 808533c:	68fb      	ldr	r3, [r7, #12]
 808533e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8085342:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8085344:	683b      	ldr	r3, [r7, #0]
 8085346:	685a      	ldr	r2, [r3, #4]
 8085348:	683b      	ldr	r3, [r7, #0]
 808534a:	695b      	ldr	r3, [r3, #20]
 808534c:	011b      	lsls	r3, r3, #4
 808534e:	4313      	orrs	r3, r2
 8085350:	68fa      	ldr	r2, [r7, #12]
 8085352:	4313      	orrs	r3, r2
 8085354:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8085356:	687b      	ldr	r3, [r7, #4]
 8085358:	681b      	ldr	r3, [r3, #0]
 808535a:	697a      	ldr	r2, [r7, #20]
 808535c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 808535e:	687b      	ldr	r3, [r7, #4]
 8085360:	681b      	ldr	r3, [r3, #0]
 8085362:	693a      	ldr	r2, [r7, #16]
 8085364:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8085366:	687b      	ldr	r3, [r7, #4]
 8085368:	681b      	ldr	r3, [r3, #0]
 808536a:	68fa      	ldr	r2, [r7, #12]
 808536c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 808536e:	687b      	ldr	r3, [r7, #4]
 8085370:	2201      	movs	r2, #1
 8085372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8085376:	2300      	movs	r3, #0
}
 8085378:	4618      	mov	r0, r3
 808537a:	3718      	adds	r7, #24
 808537c:	46bd      	mov	sp, r7
 808537e:	bd80      	pop	{r7, pc}

08085380 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface
  * @param  htim TIM Encoder Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 8085380:	b580      	push	{r7, lr}
 8085382:	b082      	sub	sp, #8
 8085384:	af00      	add	r7, sp, #0
 8085386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8085388:	687b      	ldr	r3, [r7, #4]
 808538a:	2202      	movs	r2, #2
 808538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8085390:	687b      	ldr	r3, [r7, #4]
 8085392:	681b      	ldr	r3, [r3, #0]
 8085394:	6a1a      	ldr	r2, [r3, #32]
 8085396:	f241 1311 	movw	r3, #4369	; 0x1111
 808539a:	4013      	ands	r3, r2
 808539c:	2b00      	cmp	r3, #0
 808539e:	d10f      	bne.n	80853c0 <HAL_TIM_Encoder_DeInit+0x40>
 80853a0:	687b      	ldr	r3, [r7, #4]
 80853a2:	681b      	ldr	r3, [r3, #0]
 80853a4:	6a1a      	ldr	r2, [r3, #32]
 80853a6:	f240 4344 	movw	r3, #1092	; 0x444
 80853aa:	4013      	ands	r3, r2
 80853ac:	2b00      	cmp	r3, #0
 80853ae:	d107      	bne.n	80853c0 <HAL_TIM_Encoder_DeInit+0x40>
 80853b0:	687b      	ldr	r3, [r7, #4]
 80853b2:	681b      	ldr	r3, [r3, #0]
 80853b4:	681a      	ldr	r2, [r3, #0]
 80853b6:	687b      	ldr	r3, [r7, #4]
 80853b8:	681b      	ldr	r3, [r3, #0]
 80853ba:	f022 0201 	bic.w	r2, r2, #1
 80853be:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Encoder_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 80853c0:	6878      	ldr	r0, [r7, #4]
 80853c2:	f000 f817 	bl	80853f4 <HAL_TIM_Encoder_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80853c6:	687b      	ldr	r3, [r7, #4]
 80853c8:	2200      	movs	r2, #0
 80853ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80853ce:	687b      	ldr	r3, [r7, #4]
 80853d0:	2200      	movs	r2, #0
 80853d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80853d6:	2300      	movs	r3, #0
}
 80853d8:	4618      	mov	r0, r3
 80853da:	3708      	adds	r7, #8
 80853dc:	46bd      	mov	sp, r7
 80853de:	bd80      	pop	{r7, pc}

080853e0 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80853e0:	b480      	push	{r7}
 80853e2:	b083      	sub	sp, #12
 80853e4:	af00      	add	r7, sp, #0
 80853e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80853e8:	bf00      	nop
 80853ea:	370c      	adds	r7, #12
 80853ec:	46bd      	mov	sp, r7
 80853ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80853f2:	4770      	bx	lr

080853f4 <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 80853f4:	b480      	push	{r7}
 80853f6:	b083      	sub	sp, #12
 80853f8:	af00      	add	r7, sp, #0
 80853fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 80853fc:	bf00      	nop
 80853fe:	370c      	adds	r7, #12
 8085400:	46bd      	mov	sp, r7
 8085402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085406:	4770      	bx	lr

08085408 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8085408:	b580      	push	{r7, lr}
 808540a:	b082      	sub	sp, #8
 808540c:	af00      	add	r7, sp, #0
 808540e:	6078      	str	r0, [r7, #4]
 8085410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8085412:	683b      	ldr	r3, [r7, #0]
 8085414:	2b00      	cmp	r3, #0
 8085416:	d002      	beq.n	808541e <HAL_TIM_Encoder_Start+0x16>
 8085418:	2b04      	cmp	r3, #4
 808541a:	d008      	beq.n	808542e <HAL_TIM_Encoder_Start+0x26>
 808541c:	e00f      	b.n	808543e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 808541e:	687b      	ldr	r3, [r7, #4]
 8085420:	681b      	ldr	r3, [r3, #0]
 8085422:	2201      	movs	r2, #1
 8085424:	2100      	movs	r1, #0
 8085426:	4618      	mov	r0, r3
 8085428:	f002 fa9a 	bl	8087960 <TIM_CCxChannelCmd>
      break;
 808542c:	e016      	b.n	808545c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 808542e:	687b      	ldr	r3, [r7, #4]
 8085430:	681b      	ldr	r3, [r3, #0]
 8085432:	2201      	movs	r2, #1
 8085434:	2104      	movs	r1, #4
 8085436:	4618      	mov	r0, r3
 8085438:	f002 fa92 	bl	8087960 <TIM_CCxChannelCmd>
      break;
 808543c:	e00e      	b.n	808545c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 808543e:	687b      	ldr	r3, [r7, #4]
 8085440:	681b      	ldr	r3, [r3, #0]
 8085442:	2201      	movs	r2, #1
 8085444:	2100      	movs	r1, #0
 8085446:	4618      	mov	r0, r3
 8085448:	f002 fa8a 	bl	8087960 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 808544c:	687b      	ldr	r3, [r7, #4]
 808544e:	681b      	ldr	r3, [r3, #0]
 8085450:	2201      	movs	r2, #1
 8085452:	2104      	movs	r1, #4
 8085454:	4618      	mov	r0, r3
 8085456:	f002 fa83 	bl	8087960 <TIM_CCxChannelCmd>
      break;
 808545a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 808545c:	687b      	ldr	r3, [r7, #4]
 808545e:	681b      	ldr	r3, [r3, #0]
 8085460:	681a      	ldr	r2, [r3, #0]
 8085462:	687b      	ldr	r3, [r7, #4]
 8085464:	681b      	ldr	r3, [r3, #0]
 8085466:	f042 0201 	orr.w	r2, r2, #1
 808546a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 808546c:	2300      	movs	r3, #0
}
 808546e:	4618      	mov	r0, r3
 8085470:	3708      	adds	r7, #8
 8085472:	46bd      	mov	sp, r7
 8085474:	bd80      	pop	{r7, pc}

08085476 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8085476:	b580      	push	{r7, lr}
 8085478:	b082      	sub	sp, #8
 808547a:	af00      	add	r7, sp, #0
 808547c:	6078      	str	r0, [r7, #4]
 808547e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8085480:	683b      	ldr	r3, [r7, #0]
 8085482:	2b00      	cmp	r3, #0
 8085484:	d002      	beq.n	808548c <HAL_TIM_Encoder_Stop+0x16>
 8085486:	2b04      	cmp	r3, #4
 8085488:	d008      	beq.n	808549c <HAL_TIM_Encoder_Stop+0x26>
 808548a:	e00f      	b.n	80854ac <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 808548c:	687b      	ldr	r3, [r7, #4]
 808548e:	681b      	ldr	r3, [r3, #0]
 8085490:	2200      	movs	r2, #0
 8085492:	2100      	movs	r1, #0
 8085494:	4618      	mov	r0, r3
 8085496:	f002 fa63 	bl	8087960 <TIM_CCxChannelCmd>
      break;
 808549a:	e016      	b.n	80854ca <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 808549c:	687b      	ldr	r3, [r7, #4]
 808549e:	681b      	ldr	r3, [r3, #0]
 80854a0:	2200      	movs	r2, #0
 80854a2:	2104      	movs	r1, #4
 80854a4:	4618      	mov	r0, r3
 80854a6:	f002 fa5b 	bl	8087960 <TIM_CCxChannelCmd>
      break;
 80854aa:	e00e      	b.n	80854ca <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80854ac:	687b      	ldr	r3, [r7, #4]
 80854ae:	681b      	ldr	r3, [r3, #0]
 80854b0:	2200      	movs	r2, #0
 80854b2:	2100      	movs	r1, #0
 80854b4:	4618      	mov	r0, r3
 80854b6:	f002 fa53 	bl	8087960 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80854ba:	687b      	ldr	r3, [r7, #4]
 80854bc:	681b      	ldr	r3, [r3, #0]
 80854be:	2200      	movs	r2, #0
 80854c0:	2104      	movs	r1, #4
 80854c2:	4618      	mov	r0, r3
 80854c4:	f002 fa4c 	bl	8087960 <TIM_CCxChannelCmd>
      break;
 80854c8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80854ca:	687b      	ldr	r3, [r7, #4]
 80854cc:	681b      	ldr	r3, [r3, #0]
 80854ce:	6a1a      	ldr	r2, [r3, #32]
 80854d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80854d4:	4013      	ands	r3, r2
 80854d6:	2b00      	cmp	r3, #0
 80854d8:	d10f      	bne.n	80854fa <HAL_TIM_Encoder_Stop+0x84>
 80854da:	687b      	ldr	r3, [r7, #4]
 80854dc:	681b      	ldr	r3, [r3, #0]
 80854de:	6a1a      	ldr	r2, [r3, #32]
 80854e0:	f240 4344 	movw	r3, #1092	; 0x444
 80854e4:	4013      	ands	r3, r2
 80854e6:	2b00      	cmp	r3, #0
 80854e8:	d107      	bne.n	80854fa <HAL_TIM_Encoder_Stop+0x84>
 80854ea:	687b      	ldr	r3, [r7, #4]
 80854ec:	681b      	ldr	r3, [r3, #0]
 80854ee:	681a      	ldr	r2, [r3, #0]
 80854f0:	687b      	ldr	r3, [r7, #4]
 80854f2:	681b      	ldr	r3, [r3, #0]
 80854f4:	f022 0201 	bic.w	r2, r2, #1
 80854f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80854fa:	2300      	movs	r3, #0
}
 80854fc:	4618      	mov	r0, r3
 80854fe:	3708      	adds	r7, #8
 8085500:	46bd      	mov	sp, r7
 8085502:	bd80      	pop	{r7, pc}

08085504 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8085504:	b580      	push	{r7, lr}
 8085506:	b082      	sub	sp, #8
 8085508:	af00      	add	r7, sp, #0
 808550a:	6078      	str	r0, [r7, #4]
 808550c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 808550e:	683b      	ldr	r3, [r7, #0]
 8085510:	2b00      	cmp	r3, #0
 8085512:	d002      	beq.n	808551a <HAL_TIM_Encoder_Start_IT+0x16>
 8085514:	2b04      	cmp	r3, #4
 8085516:	d010      	beq.n	808553a <HAL_TIM_Encoder_Start_IT+0x36>
 8085518:	e01f      	b.n	808555a <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 808551a:	687b      	ldr	r3, [r7, #4]
 808551c:	681b      	ldr	r3, [r3, #0]
 808551e:	2201      	movs	r2, #1
 8085520:	2100      	movs	r1, #0
 8085522:	4618      	mov	r0, r3
 8085524:	f002 fa1c 	bl	8087960 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8085528:	687b      	ldr	r3, [r7, #4]
 808552a:	681b      	ldr	r3, [r3, #0]
 808552c:	68da      	ldr	r2, [r3, #12]
 808552e:	687b      	ldr	r3, [r7, #4]
 8085530:	681b      	ldr	r3, [r3, #0]
 8085532:	f042 0202 	orr.w	r2, r2, #2
 8085536:	60da      	str	r2, [r3, #12]
      break;
 8085538:	e02e      	b.n	8085598 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 808553a:	687b      	ldr	r3, [r7, #4]
 808553c:	681b      	ldr	r3, [r3, #0]
 808553e:	2201      	movs	r2, #1
 8085540:	2104      	movs	r1, #4
 8085542:	4618      	mov	r0, r3
 8085544:	f002 fa0c 	bl	8087960 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8085548:	687b      	ldr	r3, [r7, #4]
 808554a:	681b      	ldr	r3, [r3, #0]
 808554c:	68da      	ldr	r2, [r3, #12]
 808554e:	687b      	ldr	r3, [r7, #4]
 8085550:	681b      	ldr	r3, [r3, #0]
 8085552:	f042 0204 	orr.w	r2, r2, #4
 8085556:	60da      	str	r2, [r3, #12]
      break;
 8085558:	e01e      	b.n	8085598 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 808555a:	687b      	ldr	r3, [r7, #4]
 808555c:	681b      	ldr	r3, [r3, #0]
 808555e:	2201      	movs	r2, #1
 8085560:	2100      	movs	r1, #0
 8085562:	4618      	mov	r0, r3
 8085564:	f002 f9fc 	bl	8087960 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8085568:	687b      	ldr	r3, [r7, #4]
 808556a:	681b      	ldr	r3, [r3, #0]
 808556c:	2201      	movs	r2, #1
 808556e:	2104      	movs	r1, #4
 8085570:	4618      	mov	r0, r3
 8085572:	f002 f9f5 	bl	8087960 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8085576:	687b      	ldr	r3, [r7, #4]
 8085578:	681b      	ldr	r3, [r3, #0]
 808557a:	68da      	ldr	r2, [r3, #12]
 808557c:	687b      	ldr	r3, [r7, #4]
 808557e:	681b      	ldr	r3, [r3, #0]
 8085580:	f042 0202 	orr.w	r2, r2, #2
 8085584:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8085586:	687b      	ldr	r3, [r7, #4]
 8085588:	681b      	ldr	r3, [r3, #0]
 808558a:	68da      	ldr	r2, [r3, #12]
 808558c:	687b      	ldr	r3, [r7, #4]
 808558e:	681b      	ldr	r3, [r3, #0]
 8085590:	f042 0204 	orr.w	r2, r2, #4
 8085594:	60da      	str	r2, [r3, #12]
      break;
 8085596:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8085598:	687b      	ldr	r3, [r7, #4]
 808559a:	681b      	ldr	r3, [r3, #0]
 808559c:	681a      	ldr	r2, [r3, #0]
 808559e:	687b      	ldr	r3, [r7, #4]
 80855a0:	681b      	ldr	r3, [r3, #0]
 80855a2:	f042 0201 	orr.w	r2, r2, #1
 80855a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80855a8:	2300      	movs	r3, #0
}
 80855aa:	4618      	mov	r0, r3
 80855ac:	3708      	adds	r7, #8
 80855ae:	46bd      	mov	sp, r7
 80855b0:	bd80      	pop	{r7, pc}

080855b2 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80855b2:	b580      	push	{r7, lr}
 80855b4:	b082      	sub	sp, #8
 80855b6:	af00      	add	r7, sp, #0
 80855b8:	6078      	str	r0, [r7, #4]
 80855ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80855bc:	683b      	ldr	r3, [r7, #0]
 80855be:	2b00      	cmp	r3, #0
 80855c0:	d10f      	bne.n	80855e2 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80855c2:	687b      	ldr	r3, [r7, #4]
 80855c4:	681b      	ldr	r3, [r3, #0]
 80855c6:	2200      	movs	r2, #0
 80855c8:	2100      	movs	r1, #0
 80855ca:	4618      	mov	r0, r3
 80855cc:	f002 f9c8 	bl	8087960 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80855d0:	687b      	ldr	r3, [r7, #4]
 80855d2:	681b      	ldr	r3, [r3, #0]
 80855d4:	68da      	ldr	r2, [r3, #12]
 80855d6:	687b      	ldr	r3, [r7, #4]
 80855d8:	681b      	ldr	r3, [r3, #0]
 80855da:	f022 0202 	bic.w	r2, r2, #2
 80855de:	60da      	str	r2, [r3, #12]
 80855e0:	e030      	b.n	8085644 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80855e2:	683b      	ldr	r3, [r7, #0]
 80855e4:	2b04      	cmp	r3, #4
 80855e6:	d10f      	bne.n	8085608 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80855e8:	687b      	ldr	r3, [r7, #4]
 80855ea:	681b      	ldr	r3, [r3, #0]
 80855ec:	2200      	movs	r2, #0
 80855ee:	2104      	movs	r1, #4
 80855f0:	4618      	mov	r0, r3
 80855f2:	f002 f9b5 	bl	8087960 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80855f6:	687b      	ldr	r3, [r7, #4]
 80855f8:	681b      	ldr	r3, [r3, #0]
 80855fa:	68da      	ldr	r2, [r3, #12]
 80855fc:	687b      	ldr	r3, [r7, #4]
 80855fe:	681b      	ldr	r3, [r3, #0]
 8085600:	f022 0204 	bic.w	r2, r2, #4
 8085604:	60da      	str	r2, [r3, #12]
 8085606:	e01d      	b.n	8085644 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8085608:	687b      	ldr	r3, [r7, #4]
 808560a:	681b      	ldr	r3, [r3, #0]
 808560c:	2200      	movs	r2, #0
 808560e:	2100      	movs	r1, #0
 8085610:	4618      	mov	r0, r3
 8085612:	f002 f9a5 	bl	8087960 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8085616:	687b      	ldr	r3, [r7, #4]
 8085618:	681b      	ldr	r3, [r3, #0]
 808561a:	2200      	movs	r2, #0
 808561c:	2104      	movs	r1, #4
 808561e:	4618      	mov	r0, r3
 8085620:	f002 f99e 	bl	8087960 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8085624:	687b      	ldr	r3, [r7, #4]
 8085626:	681b      	ldr	r3, [r3, #0]
 8085628:	68da      	ldr	r2, [r3, #12]
 808562a:	687b      	ldr	r3, [r7, #4]
 808562c:	681b      	ldr	r3, [r3, #0]
 808562e:	f022 0202 	bic.w	r2, r2, #2
 8085632:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8085634:	687b      	ldr	r3, [r7, #4]
 8085636:	681b      	ldr	r3, [r3, #0]
 8085638:	68da      	ldr	r2, [r3, #12]
 808563a:	687b      	ldr	r3, [r7, #4]
 808563c:	681b      	ldr	r3, [r3, #0]
 808563e:	f022 0204 	bic.w	r2, r2, #4
 8085642:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8085644:	687b      	ldr	r3, [r7, #4]
 8085646:	681b      	ldr	r3, [r3, #0]
 8085648:	6a1a      	ldr	r2, [r3, #32]
 808564a:	f241 1311 	movw	r3, #4369	; 0x1111
 808564e:	4013      	ands	r3, r2
 8085650:	2b00      	cmp	r3, #0
 8085652:	d10f      	bne.n	8085674 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8085654:	687b      	ldr	r3, [r7, #4]
 8085656:	681b      	ldr	r3, [r3, #0]
 8085658:	6a1a      	ldr	r2, [r3, #32]
 808565a:	f240 4344 	movw	r3, #1092	; 0x444
 808565e:	4013      	ands	r3, r2
 8085660:	2b00      	cmp	r3, #0
 8085662:	d107      	bne.n	8085674 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8085664:	687b      	ldr	r3, [r7, #4]
 8085666:	681b      	ldr	r3, [r3, #0]
 8085668:	681a      	ldr	r2, [r3, #0]
 808566a:	687b      	ldr	r3, [r7, #4]
 808566c:	681b      	ldr	r3, [r3, #0]
 808566e:	f022 0201 	bic.w	r2, r2, #1
 8085672:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8085674:	687b      	ldr	r3, [r7, #4]
 8085676:	2201      	movs	r2, #1
 8085678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 808567c:	2300      	movs	r3, #0
}
 808567e:	4618      	mov	r0, r3
 8085680:	3708      	adds	r7, #8
 8085682:	46bd      	mov	sp, r7
 8085684:	bd80      	pop	{r7, pc}

08085686 <HAL_TIM_Encoder_Start_DMA>:
  * @param  pData2 The destination Buffer address for IC2.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
{
 8085686:	b580      	push	{r7, lr}
 8085688:	b084      	sub	sp, #16
 808568a:	af00      	add	r7, sp, #0
 808568c:	60f8      	str	r0, [r7, #12]
 808568e:	60b9      	str	r1, [r7, #8]
 8085690:	607a      	str	r2, [r7, #4]
 8085692:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8085694:	68fb      	ldr	r3, [r7, #12]
 8085696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 808569a:	b2db      	uxtb	r3, r3
 808569c:	2b02      	cmp	r3, #2
 808569e:	d101      	bne.n	80856a4 <HAL_TIM_Encoder_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80856a0:	2302      	movs	r3, #2
 80856a2:	e0e0      	b.n	8085866 <HAL_TIM_Encoder_Start_DMA+0x1e0>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 80856a4:	68fb      	ldr	r3, [r7, #12]
 80856a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80856aa:	b2db      	uxtb	r3, r3
 80856ac:	2b01      	cmp	r3, #1
 80856ae:	d10e      	bne.n	80856ce <HAL_TIM_Encoder_Start_DMA+0x48>
  {
    if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 80856b0:	687b      	ldr	r3, [r7, #4]
 80856b2:	2b00      	cmp	r3, #0
 80856b4:	d002      	beq.n	80856bc <HAL_TIM_Encoder_Start_DMA+0x36>
 80856b6:	683b      	ldr	r3, [r7, #0]
 80856b8:	2b00      	cmp	r3, #0
 80856ba:	d104      	bne.n	80856c6 <HAL_TIM_Encoder_Start_DMA+0x40>
 80856bc:	8b3b      	ldrh	r3, [r7, #24]
 80856be:	2b00      	cmp	r3, #0
 80856c0:	d001      	beq.n	80856c6 <HAL_TIM_Encoder_Start_DMA+0x40>
    {
      return HAL_ERROR;
 80856c2:	2301      	movs	r3, #1
 80856c4:	e0cf      	b.n	8085866 <HAL_TIM_Encoder_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80856c6:	68fb      	ldr	r3, [r7, #12]
 80856c8:	2202      	movs	r2, #2
 80856ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 80856ce:	68bb      	ldr	r3, [r7, #8]
 80856d0:	2b04      	cmp	r3, #4
 80856d2:	d037      	beq.n	8085744 <HAL_TIM_Encoder_Start_DMA+0xbe>
 80856d4:	2b3c      	cmp	r3, #60	; 0x3c
 80856d6:	d068      	beq.n	80857aa <HAL_TIM_Encoder_Start_DMA+0x124>
 80856d8:	2b00      	cmp	r3, #0
 80856da:	d000      	beq.n	80856de <HAL_TIM_Encoder_Start_DMA+0x58>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
      break;
    }

    default:
      break;
 80856dc:	e0c2      	b.n	8085864 <HAL_TIM_Encoder_Start_DMA+0x1de>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80856de:	68fb      	ldr	r3, [r7, #12]
 80856e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80856e2:	4a63      	ldr	r2, [pc, #396]	; (8085870 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 80856e4:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80856e6:	68fb      	ldr	r3, [r7, #12]
 80856e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80856ea:	4a62      	ldr	r2, [pc, #392]	; (8085874 <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 80856ec:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80856ee:	68fb      	ldr	r3, [r7, #12]
 80856f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80856f2:	4a61      	ldr	r2, [pc, #388]	; (8085878 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 80856f4:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 80856f6:	68fb      	ldr	r3, [r7, #12]
 80856f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80856fa:	68fb      	ldr	r3, [r7, #12]
 80856fc:	681b      	ldr	r3, [r3, #0]
 80856fe:	3334      	adds	r3, #52	; 0x34
 8085700:	4619      	mov	r1, r3
 8085702:	687a      	ldr	r2, [r7, #4]
 8085704:	8b3b      	ldrh	r3, [r7, #24]
 8085706:	f7fc f9a4 	bl	8081a52 <HAL_DMA_Start_IT>
 808570a:	4603      	mov	r3, r0
 808570c:	2b00      	cmp	r3, #0
 808570e:	d001      	beq.n	8085714 <HAL_TIM_Encoder_Start_DMA+0x8e>
        return HAL_ERROR;
 8085710:	2301      	movs	r3, #1
 8085712:	e0a8      	b.n	8085866 <HAL_TIM_Encoder_Start_DMA+0x1e0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8085714:	68fb      	ldr	r3, [r7, #12]
 8085716:	681b      	ldr	r3, [r3, #0]
 8085718:	68da      	ldr	r2, [r3, #12]
 808571a:	68fb      	ldr	r3, [r7, #12]
 808571c:	681b      	ldr	r3, [r3, #0]
 808571e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8085722:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 8085724:	68fb      	ldr	r3, [r7, #12]
 8085726:	681b      	ldr	r3, [r3, #0]
 8085728:	681a      	ldr	r2, [r3, #0]
 808572a:	68fb      	ldr	r3, [r7, #12]
 808572c:	681b      	ldr	r3, [r3, #0]
 808572e:	f042 0201 	orr.w	r2, r2, #1
 8085732:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8085734:	68fb      	ldr	r3, [r7, #12]
 8085736:	681b      	ldr	r3, [r3, #0]
 8085738:	2201      	movs	r2, #1
 808573a:	2100      	movs	r1, #0
 808573c:	4618      	mov	r0, r3
 808573e:	f002 f90f 	bl	8087960 <TIM_CCxChannelCmd>
      break;
 8085742:	e08f      	b.n	8085864 <HAL_TIM_Encoder_Start_DMA+0x1de>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8085744:	68fb      	ldr	r3, [r7, #12]
 8085746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085748:	4a49      	ldr	r2, [pc, #292]	; (8085870 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 808574a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 808574c:	68fb      	ldr	r3, [r7, #12]
 808574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085750:	4a48      	ldr	r2, [pc, #288]	; (8085874 <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 8085752:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 8085754:	68fb      	ldr	r3, [r7, #12]
 8085756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085758:	4a47      	ldr	r2, [pc, #284]	; (8085878 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 808575a:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 808575c:	68fb      	ldr	r3, [r7, #12]
 808575e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8085760:	68fb      	ldr	r3, [r7, #12]
 8085762:	681b      	ldr	r3, [r3, #0]
 8085764:	3338      	adds	r3, #56	; 0x38
 8085766:	4619      	mov	r1, r3
 8085768:	683a      	ldr	r2, [r7, #0]
 808576a:	8b3b      	ldrh	r3, [r7, #24]
 808576c:	f7fc f971 	bl	8081a52 <HAL_DMA_Start_IT>
 8085770:	4603      	mov	r3, r0
 8085772:	2b00      	cmp	r3, #0
 8085774:	d001      	beq.n	808577a <HAL_TIM_Encoder_Start_DMA+0xf4>
        return HAL_ERROR;
 8085776:	2301      	movs	r3, #1
 8085778:	e075      	b.n	8085866 <HAL_TIM_Encoder_Start_DMA+0x1e0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 808577a:	68fb      	ldr	r3, [r7, #12]
 808577c:	681b      	ldr	r3, [r3, #0]
 808577e:	68da      	ldr	r2, [r3, #12]
 8085780:	68fb      	ldr	r3, [r7, #12]
 8085782:	681b      	ldr	r3, [r3, #0]
 8085784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8085788:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 808578a:	68fb      	ldr	r3, [r7, #12]
 808578c:	681b      	ldr	r3, [r3, #0]
 808578e:	681a      	ldr	r2, [r3, #0]
 8085790:	68fb      	ldr	r3, [r7, #12]
 8085792:	681b      	ldr	r3, [r3, #0]
 8085794:	f042 0201 	orr.w	r2, r2, #1
 8085798:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 808579a:	68fb      	ldr	r3, [r7, #12]
 808579c:	681b      	ldr	r3, [r3, #0]
 808579e:	2201      	movs	r2, #1
 80857a0:	2104      	movs	r1, #4
 80857a2:	4618      	mov	r0, r3
 80857a4:	f002 f8dc 	bl	8087960 <TIM_CCxChannelCmd>
      break;
 80857a8:	e05c      	b.n	8085864 <HAL_TIM_Encoder_Start_DMA+0x1de>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80857aa:	68fb      	ldr	r3, [r7, #12]
 80857ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80857ae:	4a30      	ldr	r2, [pc, #192]	; (8085870 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 80857b0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80857b2:	68fb      	ldr	r3, [r7, #12]
 80857b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80857b6:	4a2f      	ldr	r2, [pc, #188]	; (8085874 <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 80857b8:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80857ba:	68fb      	ldr	r3, [r7, #12]
 80857bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80857be:	4a2e      	ldr	r2, [pc, #184]	; (8085878 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 80857c0:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 80857c2:	68fb      	ldr	r3, [r7, #12]
 80857c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80857c6:	68fb      	ldr	r3, [r7, #12]
 80857c8:	681b      	ldr	r3, [r3, #0]
 80857ca:	3334      	adds	r3, #52	; 0x34
 80857cc:	4619      	mov	r1, r3
 80857ce:	687a      	ldr	r2, [r7, #4]
 80857d0:	8b3b      	ldrh	r3, [r7, #24]
 80857d2:	f7fc f93e 	bl	8081a52 <HAL_DMA_Start_IT>
 80857d6:	4603      	mov	r3, r0
 80857d8:	2b00      	cmp	r3, #0
 80857da:	d001      	beq.n	80857e0 <HAL_TIM_Encoder_Start_DMA+0x15a>
        return HAL_ERROR;
 80857dc:	2301      	movs	r3, #1
 80857de:	e042      	b.n	8085866 <HAL_TIM_Encoder_Start_DMA+0x1e0>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80857e0:	68fb      	ldr	r3, [r7, #12]
 80857e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80857e4:	4a22      	ldr	r2, [pc, #136]	; (8085870 <HAL_TIM_Encoder_Start_DMA+0x1ea>)
 80857e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80857e8:	68fb      	ldr	r3, [r7, #12]
 80857ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80857ec:	4a21      	ldr	r2, [pc, #132]	; (8085874 <HAL_TIM_Encoder_Start_DMA+0x1ee>)
 80857ee:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80857f0:	68fb      	ldr	r3, [r7, #12]
 80857f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80857f4:	4a20      	ldr	r2, [pc, #128]	; (8085878 <HAL_TIM_Encoder_Start_DMA+0x1f2>)
 80857f6:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 80857f8:	68fb      	ldr	r3, [r7, #12]
 80857fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80857fc:	68fb      	ldr	r3, [r7, #12]
 80857fe:	681b      	ldr	r3, [r3, #0]
 8085800:	3338      	adds	r3, #56	; 0x38
 8085802:	4619      	mov	r1, r3
 8085804:	683a      	ldr	r2, [r7, #0]
 8085806:	8b3b      	ldrh	r3, [r7, #24]
 8085808:	f7fc f923 	bl	8081a52 <HAL_DMA_Start_IT>
 808580c:	4603      	mov	r3, r0
 808580e:	2b00      	cmp	r3, #0
 8085810:	d001      	beq.n	8085816 <HAL_TIM_Encoder_Start_DMA+0x190>
        return HAL_ERROR;
 8085812:	2301      	movs	r3, #1
 8085814:	e027      	b.n	8085866 <HAL_TIM_Encoder_Start_DMA+0x1e0>
      __HAL_TIM_ENABLE(htim);
 8085816:	68fb      	ldr	r3, [r7, #12]
 8085818:	681b      	ldr	r3, [r3, #0]
 808581a:	681a      	ldr	r2, [r3, #0]
 808581c:	68fb      	ldr	r3, [r7, #12]
 808581e:	681b      	ldr	r3, [r3, #0]
 8085820:	f042 0201 	orr.w	r2, r2, #1
 8085824:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8085826:	68fb      	ldr	r3, [r7, #12]
 8085828:	681b      	ldr	r3, [r3, #0]
 808582a:	2201      	movs	r2, #1
 808582c:	2100      	movs	r1, #0
 808582e:	4618      	mov	r0, r3
 8085830:	f002 f896 	bl	8087960 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8085834:	68fb      	ldr	r3, [r7, #12]
 8085836:	681b      	ldr	r3, [r3, #0]
 8085838:	2201      	movs	r2, #1
 808583a:	2104      	movs	r1, #4
 808583c:	4618      	mov	r0, r3
 808583e:	f002 f88f 	bl	8087960 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8085842:	68fb      	ldr	r3, [r7, #12]
 8085844:	681b      	ldr	r3, [r3, #0]
 8085846:	68da      	ldr	r2, [r3, #12]
 8085848:	68fb      	ldr	r3, [r7, #12]
 808584a:	681b      	ldr	r3, [r3, #0]
 808584c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8085850:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8085852:	68fb      	ldr	r3, [r7, #12]
 8085854:	681b      	ldr	r3, [r3, #0]
 8085856:	68da      	ldr	r2, [r3, #12]
 8085858:	68fb      	ldr	r3, [r7, #12]
 808585a:	681b      	ldr	r3, [r3, #0]
 808585c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8085860:	60da      	str	r2, [r3, #12]
      break;
 8085862:	bf00      	nop
  }
  /* Return function status */
  return HAL_OK;
 8085864:	2300      	movs	r3, #0
}
 8085866:	4618      	mov	r0, r3
 8085868:	3710      	adds	r7, #16
 808586a:	46bd      	mov	sp, r7
 808586c:	bd80      	pop	{r7, pc}
 808586e:	bf00      	nop
 8085870:	08086ebd 	.word	0x08086ebd
 8085874:	08086f2d 	.word	0x08086f2d
 8085878:	08086db9 	.word	0x08086db9

0808587c <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 808587c:	b580      	push	{r7, lr}
 808587e:	b082      	sub	sp, #8
 8085880:	af00      	add	r7, sp, #0
 8085882:	6078      	str	r0, [r7, #4]
 8085884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8085886:	683b      	ldr	r3, [r7, #0]
 8085888:	2b00      	cmp	r3, #0
 808588a:	d114      	bne.n	80858b6 <HAL_TIM_Encoder_Stop_DMA+0x3a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 808588c:	687b      	ldr	r3, [r7, #4]
 808588e:	681b      	ldr	r3, [r3, #0]
 8085890:	2200      	movs	r2, #0
 8085892:	2100      	movs	r1, #0
 8085894:	4618      	mov	r0, r3
 8085896:	f002 f863 	bl	8087960 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 808589a:	687b      	ldr	r3, [r7, #4]
 808589c:	681b      	ldr	r3, [r3, #0]
 808589e:	68da      	ldr	r2, [r3, #12]
 80858a0:	687b      	ldr	r3, [r7, #4]
 80858a2:	681b      	ldr	r3, [r3, #0]
 80858a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80858a8:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80858aa:	687b      	ldr	r3, [r7, #4]
 80858ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80858ae:	4618      	mov	r0, r3
 80858b0:	f7fc f99f 	bl	8081bf2 <HAL_DMA_Abort_IT>
 80858b4:	e03f      	b.n	8085936 <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else if (Channel == TIM_CHANNEL_2)
 80858b6:	683b      	ldr	r3, [r7, #0]
 80858b8:	2b04      	cmp	r3, #4
 80858ba:	d114      	bne.n	80858e6 <HAL_TIM_Encoder_Stop_DMA+0x6a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80858bc:	687b      	ldr	r3, [r7, #4]
 80858be:	681b      	ldr	r3, [r3, #0]
 80858c0:	2200      	movs	r2, #0
 80858c2:	2104      	movs	r1, #4
 80858c4:	4618      	mov	r0, r3
 80858c6:	f002 f84b 	bl	8087960 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80858ca:	687b      	ldr	r3, [r7, #4]
 80858cc:	681b      	ldr	r3, [r3, #0]
 80858ce:	68da      	ldr	r2, [r3, #12]
 80858d0:	687b      	ldr	r3, [r7, #4]
 80858d2:	681b      	ldr	r3, [r3, #0]
 80858d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80858d8:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80858da:	687b      	ldr	r3, [r7, #4]
 80858dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80858de:	4618      	mov	r0, r3
 80858e0:	f7fc f987 	bl	8081bf2 <HAL_DMA_Abort_IT>
 80858e4:	e027      	b.n	8085936 <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80858e6:	687b      	ldr	r3, [r7, #4]
 80858e8:	681b      	ldr	r3, [r3, #0]
 80858ea:	2200      	movs	r2, #0
 80858ec:	2100      	movs	r1, #0
 80858ee:	4618      	mov	r0, r3
 80858f0:	f002 f836 	bl	8087960 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80858f4:	687b      	ldr	r3, [r7, #4]
 80858f6:	681b      	ldr	r3, [r3, #0]
 80858f8:	2200      	movs	r2, #0
 80858fa:	2104      	movs	r1, #4
 80858fc:	4618      	mov	r0, r3
 80858fe:	f002 f82f 	bl	8087960 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8085902:	687b      	ldr	r3, [r7, #4]
 8085904:	681b      	ldr	r3, [r3, #0]
 8085906:	68da      	ldr	r2, [r3, #12]
 8085908:	687b      	ldr	r3, [r7, #4]
 808590a:	681b      	ldr	r3, [r3, #0]
 808590c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8085910:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8085912:	687b      	ldr	r3, [r7, #4]
 8085914:	681b      	ldr	r3, [r3, #0]
 8085916:	68da      	ldr	r2, [r3, #12]
 8085918:	687b      	ldr	r3, [r7, #4]
 808591a:	681b      	ldr	r3, [r3, #0]
 808591c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8085920:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8085922:	687b      	ldr	r3, [r7, #4]
 8085924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085926:	4618      	mov	r0, r3
 8085928:	f7fc f963 	bl	8081bf2 <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 808592c:	687b      	ldr	r3, [r7, #4]
 808592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085930:	4618      	mov	r0, r3
 8085932:	f7fc f95e 	bl	8081bf2 <HAL_DMA_Abort_IT>
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8085936:	687b      	ldr	r3, [r7, #4]
 8085938:	681b      	ldr	r3, [r3, #0]
 808593a:	6a1a      	ldr	r2, [r3, #32]
 808593c:	f241 1311 	movw	r3, #4369	; 0x1111
 8085940:	4013      	ands	r3, r2
 8085942:	2b00      	cmp	r3, #0
 8085944:	d10f      	bne.n	8085966 <HAL_TIM_Encoder_Stop_DMA+0xea>
 8085946:	687b      	ldr	r3, [r7, #4]
 8085948:	681b      	ldr	r3, [r3, #0]
 808594a:	6a1a      	ldr	r2, [r3, #32]
 808594c:	f240 4344 	movw	r3, #1092	; 0x444
 8085950:	4013      	ands	r3, r2
 8085952:	2b00      	cmp	r3, #0
 8085954:	d107      	bne.n	8085966 <HAL_TIM_Encoder_Stop_DMA+0xea>
 8085956:	687b      	ldr	r3, [r7, #4]
 8085958:	681b      	ldr	r3, [r3, #0]
 808595a:	681a      	ldr	r2, [r3, #0]
 808595c:	687b      	ldr	r3, [r7, #4]
 808595e:	681b      	ldr	r3, [r3, #0]
 8085960:	f022 0201 	bic.w	r2, r2, #1
 8085964:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8085966:	687b      	ldr	r3, [r7, #4]
 8085968:	2201      	movs	r2, #1
 808596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 808596e:	2300      	movs	r3, #0
}
 8085970:	4618      	mov	r0, r3
 8085972:	3708      	adds	r7, #8
 8085974:	46bd      	mov	sp, r7
 8085976:	bd80      	pop	{r7, pc}

08085978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8085978:	b580      	push	{r7, lr}
 808597a:	b082      	sub	sp, #8
 808597c:	af00      	add	r7, sp, #0
 808597e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8085980:	687b      	ldr	r3, [r7, #4]
 8085982:	681b      	ldr	r3, [r3, #0]
 8085984:	691b      	ldr	r3, [r3, #16]
 8085986:	f003 0302 	and.w	r3, r3, #2
 808598a:	2b02      	cmp	r3, #2
 808598c:	d122      	bne.n	80859d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 808598e:	687b      	ldr	r3, [r7, #4]
 8085990:	681b      	ldr	r3, [r3, #0]
 8085992:	68db      	ldr	r3, [r3, #12]
 8085994:	f003 0302 	and.w	r3, r3, #2
 8085998:	2b02      	cmp	r3, #2
 808599a:	d11b      	bne.n	80859d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 808599c:	687b      	ldr	r3, [r7, #4]
 808599e:	681b      	ldr	r3, [r3, #0]
 80859a0:	f06f 0202 	mvn.w	r2, #2
 80859a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80859a6:	687b      	ldr	r3, [r7, #4]
 80859a8:	2201      	movs	r2, #1
 80859aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80859ac:	687b      	ldr	r3, [r7, #4]
 80859ae:	681b      	ldr	r3, [r3, #0]
 80859b0:	699b      	ldr	r3, [r3, #24]
 80859b2:	f003 0303 	and.w	r3, r3, #3
 80859b6:	2b00      	cmp	r3, #0
 80859b8:	d003      	beq.n	80859c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80859ba:	6878      	ldr	r0, [r7, #4]
 80859bc:	f001 f962 	bl	8086c84 <HAL_TIM_IC_CaptureCallback>
 80859c0:	e005      	b.n	80859ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80859c2:	6878      	ldr	r0, [r7, #4]
 80859c4:	f001 f954 	bl	8086c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80859c8:	6878      	ldr	r0, [r7, #4]
 80859ca:	f001 f96f 	bl	8086cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80859ce:	687b      	ldr	r3, [r7, #4]
 80859d0:	2200      	movs	r2, #0
 80859d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80859d4:	687b      	ldr	r3, [r7, #4]
 80859d6:	681b      	ldr	r3, [r3, #0]
 80859d8:	691b      	ldr	r3, [r3, #16]
 80859da:	f003 0304 	and.w	r3, r3, #4
 80859de:	2b04      	cmp	r3, #4
 80859e0:	d122      	bne.n	8085a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80859e2:	687b      	ldr	r3, [r7, #4]
 80859e4:	681b      	ldr	r3, [r3, #0]
 80859e6:	68db      	ldr	r3, [r3, #12]
 80859e8:	f003 0304 	and.w	r3, r3, #4
 80859ec:	2b04      	cmp	r3, #4
 80859ee:	d11b      	bne.n	8085a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80859f0:	687b      	ldr	r3, [r7, #4]
 80859f2:	681b      	ldr	r3, [r3, #0]
 80859f4:	f06f 0204 	mvn.w	r2, #4
 80859f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80859fa:	687b      	ldr	r3, [r7, #4]
 80859fc:	2202      	movs	r2, #2
 80859fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8085a00:	687b      	ldr	r3, [r7, #4]
 8085a02:	681b      	ldr	r3, [r3, #0]
 8085a04:	699b      	ldr	r3, [r3, #24]
 8085a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8085a0a:	2b00      	cmp	r3, #0
 8085a0c:	d003      	beq.n	8085a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8085a0e:	6878      	ldr	r0, [r7, #4]
 8085a10:	f001 f938 	bl	8086c84 <HAL_TIM_IC_CaptureCallback>
 8085a14:	e005      	b.n	8085a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8085a16:	6878      	ldr	r0, [r7, #4]
 8085a18:	f001 f92a 	bl	8086c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8085a1c:	6878      	ldr	r0, [r7, #4]
 8085a1e:	f001 f945 	bl	8086cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8085a22:	687b      	ldr	r3, [r7, #4]
 8085a24:	2200      	movs	r2, #0
 8085a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8085a28:	687b      	ldr	r3, [r7, #4]
 8085a2a:	681b      	ldr	r3, [r3, #0]
 8085a2c:	691b      	ldr	r3, [r3, #16]
 8085a2e:	f003 0308 	and.w	r3, r3, #8
 8085a32:	2b08      	cmp	r3, #8
 8085a34:	d122      	bne.n	8085a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8085a36:	687b      	ldr	r3, [r7, #4]
 8085a38:	681b      	ldr	r3, [r3, #0]
 8085a3a:	68db      	ldr	r3, [r3, #12]
 8085a3c:	f003 0308 	and.w	r3, r3, #8
 8085a40:	2b08      	cmp	r3, #8
 8085a42:	d11b      	bne.n	8085a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8085a44:	687b      	ldr	r3, [r7, #4]
 8085a46:	681b      	ldr	r3, [r3, #0]
 8085a48:	f06f 0208 	mvn.w	r2, #8
 8085a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8085a4e:	687b      	ldr	r3, [r7, #4]
 8085a50:	2204      	movs	r2, #4
 8085a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8085a54:	687b      	ldr	r3, [r7, #4]
 8085a56:	681b      	ldr	r3, [r3, #0]
 8085a58:	69db      	ldr	r3, [r3, #28]
 8085a5a:	f003 0303 	and.w	r3, r3, #3
 8085a5e:	2b00      	cmp	r3, #0
 8085a60:	d003      	beq.n	8085a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8085a62:	6878      	ldr	r0, [r7, #4]
 8085a64:	f001 f90e 	bl	8086c84 <HAL_TIM_IC_CaptureCallback>
 8085a68:	e005      	b.n	8085a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8085a6a:	6878      	ldr	r0, [r7, #4]
 8085a6c:	f001 f900 	bl	8086c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8085a70:	6878      	ldr	r0, [r7, #4]
 8085a72:	f001 f91b 	bl	8086cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8085a76:	687b      	ldr	r3, [r7, #4]
 8085a78:	2200      	movs	r2, #0
 8085a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8085a7c:	687b      	ldr	r3, [r7, #4]
 8085a7e:	681b      	ldr	r3, [r3, #0]
 8085a80:	691b      	ldr	r3, [r3, #16]
 8085a82:	f003 0310 	and.w	r3, r3, #16
 8085a86:	2b10      	cmp	r3, #16
 8085a88:	d122      	bne.n	8085ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8085a8a:	687b      	ldr	r3, [r7, #4]
 8085a8c:	681b      	ldr	r3, [r3, #0]
 8085a8e:	68db      	ldr	r3, [r3, #12]
 8085a90:	f003 0310 	and.w	r3, r3, #16
 8085a94:	2b10      	cmp	r3, #16
 8085a96:	d11b      	bne.n	8085ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8085a98:	687b      	ldr	r3, [r7, #4]
 8085a9a:	681b      	ldr	r3, [r3, #0]
 8085a9c:	f06f 0210 	mvn.w	r2, #16
 8085aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8085aa2:	687b      	ldr	r3, [r7, #4]
 8085aa4:	2208      	movs	r2, #8
 8085aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8085aa8:	687b      	ldr	r3, [r7, #4]
 8085aaa:	681b      	ldr	r3, [r3, #0]
 8085aac:	69db      	ldr	r3, [r3, #28]
 8085aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8085ab2:	2b00      	cmp	r3, #0
 8085ab4:	d003      	beq.n	8085abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8085ab6:	6878      	ldr	r0, [r7, #4]
 8085ab8:	f001 f8e4 	bl	8086c84 <HAL_TIM_IC_CaptureCallback>
 8085abc:	e005      	b.n	8085aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8085abe:	6878      	ldr	r0, [r7, #4]
 8085ac0:	f001 f8d6 	bl	8086c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8085ac4:	6878      	ldr	r0, [r7, #4]
 8085ac6:	f001 f8f1 	bl	8086cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8085aca:	687b      	ldr	r3, [r7, #4]
 8085acc:	2200      	movs	r2, #0
 8085ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8085ad0:	687b      	ldr	r3, [r7, #4]
 8085ad2:	681b      	ldr	r3, [r3, #0]
 8085ad4:	691b      	ldr	r3, [r3, #16]
 8085ad6:	f003 0301 	and.w	r3, r3, #1
 8085ada:	2b01      	cmp	r3, #1
 8085adc:	d10e      	bne.n	8085afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8085ade:	687b      	ldr	r3, [r7, #4]
 8085ae0:	681b      	ldr	r3, [r3, #0]
 8085ae2:	68db      	ldr	r3, [r3, #12]
 8085ae4:	f003 0301 	and.w	r3, r3, #1
 8085ae8:	2b01      	cmp	r3, #1
 8085aea:	d107      	bne.n	8085afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8085aec:	687b      	ldr	r3, [r7, #4]
 8085aee:	681b      	ldr	r3, [r3, #0]
 8085af0:	f06f 0201 	mvn.w	r2, #1
 8085af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8085af6:	6878      	ldr	r0, [r7, #4]
 8085af8:	f001 f8a6 	bl	8086c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8085afc:	687b      	ldr	r3, [r7, #4]
 8085afe:	681b      	ldr	r3, [r3, #0]
 8085b00:	691b      	ldr	r3, [r3, #16]
 8085b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8085b06:	2b80      	cmp	r3, #128	; 0x80
 8085b08:	d10e      	bne.n	8085b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8085b0a:	687b      	ldr	r3, [r7, #4]
 8085b0c:	681b      	ldr	r3, [r3, #0]
 8085b0e:	68db      	ldr	r3, [r3, #12]
 8085b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8085b14:	2b80      	cmp	r3, #128	; 0x80
 8085b16:	d107      	bne.n	8085b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8085b18:	687b      	ldr	r3, [r7, #4]
 8085b1a:	681b      	ldr	r3, [r3, #0]
 8085b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8085b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8085b22:	6878      	ldr	r0, [r7, #4]
 8085b24:	f003 f906 	bl	8088d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8085b28:	687b      	ldr	r3, [r7, #4]
 8085b2a:	681b      	ldr	r3, [r3, #0]
 8085b2c:	691b      	ldr	r3, [r3, #16]
 8085b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8085b32:	2b40      	cmp	r3, #64	; 0x40
 8085b34:	d10e      	bne.n	8085b54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8085b36:	687b      	ldr	r3, [r7, #4]
 8085b38:	681b      	ldr	r3, [r3, #0]
 8085b3a:	68db      	ldr	r3, [r3, #12]
 8085b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8085b40:	2b40      	cmp	r3, #64	; 0x40
 8085b42:	d107      	bne.n	8085b54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8085b44:	687b      	ldr	r3, [r7, #4]
 8085b46:	681b      	ldr	r3, [r3, #0]
 8085b48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8085b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8085b4e:	6878      	ldr	r0, [r7, #4]
 8085b50:	f001 f8c0 	bl	8086cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8085b54:	687b      	ldr	r3, [r7, #4]
 8085b56:	681b      	ldr	r3, [r3, #0]
 8085b58:	691b      	ldr	r3, [r3, #16]
 8085b5a:	f003 0320 	and.w	r3, r3, #32
 8085b5e:	2b20      	cmp	r3, #32
 8085b60:	d10e      	bne.n	8085b80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8085b62:	687b      	ldr	r3, [r7, #4]
 8085b64:	681b      	ldr	r3, [r3, #0]
 8085b66:	68db      	ldr	r3, [r3, #12]
 8085b68:	f003 0320 	and.w	r3, r3, #32
 8085b6c:	2b20      	cmp	r3, #32
 8085b6e:	d107      	bne.n	8085b80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8085b70:	687b      	ldr	r3, [r7, #4]
 8085b72:	681b      	ldr	r3, [r3, #0]
 8085b74:	f06f 0220 	mvn.w	r2, #32
 8085b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8085b7a:	6878      	ldr	r0, [r7, #4]
 8085b7c:	f003 f8c6 	bl	8088d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8085b80:	bf00      	nop
 8085b82:	3708      	adds	r7, #8
 8085b84:	46bd      	mov	sp, r7
 8085b86:	bd80      	pop	{r7, pc}

08085b88 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8085b88:	b580      	push	{r7, lr}
 8085b8a:	b084      	sub	sp, #16
 8085b8c:	af00      	add	r7, sp, #0
 8085b8e:	60f8      	str	r0, [r7, #12]
 8085b90:	60b9      	str	r1, [r7, #8]
 8085b92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8085b94:	68fb      	ldr	r3, [r7, #12]
 8085b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8085b9a:	2b01      	cmp	r3, #1
 8085b9c:	d101      	bne.n	8085ba2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8085b9e:	2302      	movs	r3, #2
 8085ba0:	e04e      	b.n	8085c40 <HAL_TIM_OC_ConfigChannel+0xb8>
 8085ba2:	68fb      	ldr	r3, [r7, #12]
 8085ba4:	2201      	movs	r2, #1
 8085ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8085baa:	68fb      	ldr	r3, [r7, #12]
 8085bac:	2202      	movs	r2, #2
 8085bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8085bb2:	687b      	ldr	r3, [r7, #4]
 8085bb4:	2b0c      	cmp	r3, #12
 8085bb6:	d839      	bhi.n	8085c2c <HAL_TIM_OC_ConfigChannel+0xa4>
 8085bb8:	a201      	add	r2, pc, #4	; (adr r2, 8085bc0 <HAL_TIM_OC_ConfigChannel+0x38>)
 8085bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8085bbe:	bf00      	nop
 8085bc0:	08085bf5 	.word	0x08085bf5
 8085bc4:	08085c2d 	.word	0x08085c2d
 8085bc8:	08085c2d 	.word	0x08085c2d
 8085bcc:	08085c2d 	.word	0x08085c2d
 8085bd0:	08085c03 	.word	0x08085c03
 8085bd4:	08085c2d 	.word	0x08085c2d
 8085bd8:	08085c2d 	.word	0x08085c2d
 8085bdc:	08085c2d 	.word	0x08085c2d
 8085be0:	08085c11 	.word	0x08085c11
 8085be4:	08085c2d 	.word	0x08085c2d
 8085be8:	08085c2d 	.word	0x08085c2d
 8085bec:	08085c2d 	.word	0x08085c2d
 8085bf0:	08085c1f 	.word	0x08085c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8085bf4:	68fb      	ldr	r3, [r7, #12]
 8085bf6:	681b      	ldr	r3, [r3, #0]
 8085bf8:	68b9      	ldr	r1, [r7, #8]
 8085bfa:	4618      	mov	r0, r3
 8085bfc:	f001 fab6 	bl	808716c <TIM_OC1_SetConfig>
      break;
 8085c00:	e015      	b.n	8085c2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8085c02:	68fb      	ldr	r3, [r7, #12]
 8085c04:	681b      	ldr	r3, [r3, #0]
 8085c06:	68b9      	ldr	r1, [r7, #8]
 8085c08:	4618      	mov	r0, r3
 8085c0a:	f001 fb1f 	bl	808724c <TIM_OC2_SetConfig>
      break;
 8085c0e:	e00e      	b.n	8085c2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8085c10:	68fb      	ldr	r3, [r7, #12]
 8085c12:	681b      	ldr	r3, [r3, #0]
 8085c14:	68b9      	ldr	r1, [r7, #8]
 8085c16:	4618      	mov	r0, r3
 8085c18:	f001 fb8e 	bl	8087338 <TIM_OC3_SetConfig>
      break;
 8085c1c:	e007      	b.n	8085c2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8085c1e:	68fb      	ldr	r3, [r7, #12]
 8085c20:	681b      	ldr	r3, [r3, #0]
 8085c22:	68b9      	ldr	r1, [r7, #8]
 8085c24:	4618      	mov	r0, r3
 8085c26:	f001 fbfb 	bl	8087420 <TIM_OC4_SetConfig>
      break;
 8085c2a:	e000      	b.n	8085c2e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8085c2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8085c2e:	68fb      	ldr	r3, [r7, #12]
 8085c30:	2201      	movs	r2, #1
 8085c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8085c36:	68fb      	ldr	r3, [r7, #12]
 8085c38:	2200      	movs	r2, #0
 8085c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8085c3e:	2300      	movs	r3, #0
}
 8085c40:	4618      	mov	r0, r3
 8085c42:	3710      	adds	r7, #16
 8085c44:	46bd      	mov	sp, r7
 8085c46:	bd80      	pop	{r7, pc}

08085c48 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8085c48:	b580      	push	{r7, lr}
 8085c4a:	b084      	sub	sp, #16
 8085c4c:	af00      	add	r7, sp, #0
 8085c4e:	60f8      	str	r0, [r7, #12]
 8085c50:	60b9      	str	r1, [r7, #8]
 8085c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8085c54:	68fb      	ldr	r3, [r7, #12]
 8085c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8085c5a:	2b01      	cmp	r3, #1
 8085c5c:	d101      	bne.n	8085c62 <HAL_TIM_IC_ConfigChannel+0x1a>
 8085c5e:	2302      	movs	r3, #2
 8085c60:	e08a      	b.n	8085d78 <HAL_TIM_IC_ConfigChannel+0x130>
 8085c62:	68fb      	ldr	r3, [r7, #12]
 8085c64:	2201      	movs	r2, #1
 8085c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8085c6a:	68fb      	ldr	r3, [r7, #12]
 8085c6c:	2202      	movs	r2, #2
 8085c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8085c72:	687b      	ldr	r3, [r7, #4]
 8085c74:	2b00      	cmp	r3, #0
 8085c76:	d11b      	bne.n	8085cb0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8085c78:	68fb      	ldr	r3, [r7, #12]
 8085c7a:	6818      	ldr	r0, [r3, #0]
 8085c7c:	68bb      	ldr	r3, [r7, #8]
 8085c7e:	6819      	ldr	r1, [r3, #0]
 8085c80:	68bb      	ldr	r3, [r7, #8]
 8085c82:	685a      	ldr	r2, [r3, #4]
 8085c84:	68bb      	ldr	r3, [r7, #8]
 8085c86:	68db      	ldr	r3, [r3, #12]
 8085c88:	f001 fca6 	bl	80875d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8085c8c:	68fb      	ldr	r3, [r7, #12]
 8085c8e:	681b      	ldr	r3, [r3, #0]
 8085c90:	699a      	ldr	r2, [r3, #24]
 8085c92:	68fb      	ldr	r3, [r7, #12]
 8085c94:	681b      	ldr	r3, [r3, #0]
 8085c96:	f022 020c 	bic.w	r2, r2, #12
 8085c9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8085c9c:	68fb      	ldr	r3, [r7, #12]
 8085c9e:	681b      	ldr	r3, [r3, #0]
 8085ca0:	6999      	ldr	r1, [r3, #24]
 8085ca2:	68bb      	ldr	r3, [r7, #8]
 8085ca4:	689a      	ldr	r2, [r3, #8]
 8085ca6:	68fb      	ldr	r3, [r7, #12]
 8085ca8:	681b      	ldr	r3, [r3, #0]
 8085caa:	430a      	orrs	r2, r1
 8085cac:	619a      	str	r2, [r3, #24]
 8085cae:	e05a      	b.n	8085d66 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8085cb0:	687b      	ldr	r3, [r7, #4]
 8085cb2:	2b04      	cmp	r3, #4
 8085cb4:	d11c      	bne.n	8085cf0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8085cb6:	68fb      	ldr	r3, [r7, #12]
 8085cb8:	6818      	ldr	r0, [r3, #0]
 8085cba:	68bb      	ldr	r3, [r7, #8]
 8085cbc:	6819      	ldr	r1, [r3, #0]
 8085cbe:	68bb      	ldr	r3, [r7, #8]
 8085cc0:	685a      	ldr	r2, [r3, #4]
 8085cc2:	68bb      	ldr	r3, [r7, #8]
 8085cc4:	68db      	ldr	r3, [r3, #12]
 8085cc6:	f001 fd2a 	bl	808771e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8085cca:	68fb      	ldr	r3, [r7, #12]
 8085ccc:	681b      	ldr	r3, [r3, #0]
 8085cce:	699a      	ldr	r2, [r3, #24]
 8085cd0:	68fb      	ldr	r3, [r7, #12]
 8085cd2:	681b      	ldr	r3, [r3, #0]
 8085cd4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8085cd8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8085cda:	68fb      	ldr	r3, [r7, #12]
 8085cdc:	681b      	ldr	r3, [r3, #0]
 8085cde:	6999      	ldr	r1, [r3, #24]
 8085ce0:	68bb      	ldr	r3, [r7, #8]
 8085ce2:	689b      	ldr	r3, [r3, #8]
 8085ce4:	021a      	lsls	r2, r3, #8
 8085ce6:	68fb      	ldr	r3, [r7, #12]
 8085ce8:	681b      	ldr	r3, [r3, #0]
 8085cea:	430a      	orrs	r2, r1
 8085cec:	619a      	str	r2, [r3, #24]
 8085cee:	e03a      	b.n	8085d66 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8085cf0:	687b      	ldr	r3, [r7, #4]
 8085cf2:	2b08      	cmp	r3, #8
 8085cf4:	d11b      	bne.n	8085d2e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8085cf6:	68fb      	ldr	r3, [r7, #12]
 8085cf8:	6818      	ldr	r0, [r3, #0]
 8085cfa:	68bb      	ldr	r3, [r7, #8]
 8085cfc:	6819      	ldr	r1, [r3, #0]
 8085cfe:	68bb      	ldr	r3, [r7, #8]
 8085d00:	685a      	ldr	r2, [r3, #4]
 8085d02:	68bb      	ldr	r3, [r7, #8]
 8085d04:	68db      	ldr	r3, [r3, #12]
 8085d06:	f001 fd77 	bl	80877f8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8085d0a:	68fb      	ldr	r3, [r7, #12]
 8085d0c:	681b      	ldr	r3, [r3, #0]
 8085d0e:	69da      	ldr	r2, [r3, #28]
 8085d10:	68fb      	ldr	r3, [r7, #12]
 8085d12:	681b      	ldr	r3, [r3, #0]
 8085d14:	f022 020c 	bic.w	r2, r2, #12
 8085d18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8085d1a:	68fb      	ldr	r3, [r7, #12]
 8085d1c:	681b      	ldr	r3, [r3, #0]
 8085d1e:	69d9      	ldr	r1, [r3, #28]
 8085d20:	68bb      	ldr	r3, [r7, #8]
 8085d22:	689a      	ldr	r2, [r3, #8]
 8085d24:	68fb      	ldr	r3, [r7, #12]
 8085d26:	681b      	ldr	r3, [r3, #0]
 8085d28:	430a      	orrs	r2, r1
 8085d2a:	61da      	str	r2, [r3, #28]
 8085d2c:	e01b      	b.n	8085d66 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8085d2e:	68fb      	ldr	r3, [r7, #12]
 8085d30:	6818      	ldr	r0, [r3, #0]
 8085d32:	68bb      	ldr	r3, [r7, #8]
 8085d34:	6819      	ldr	r1, [r3, #0]
 8085d36:	68bb      	ldr	r3, [r7, #8]
 8085d38:	685a      	ldr	r2, [r3, #4]
 8085d3a:	68bb      	ldr	r3, [r7, #8]
 8085d3c:	68db      	ldr	r3, [r3, #12]
 8085d3e:	f001 fd97 	bl	8087870 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8085d42:	68fb      	ldr	r3, [r7, #12]
 8085d44:	681b      	ldr	r3, [r3, #0]
 8085d46:	69da      	ldr	r2, [r3, #28]
 8085d48:	68fb      	ldr	r3, [r7, #12]
 8085d4a:	681b      	ldr	r3, [r3, #0]
 8085d4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8085d50:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8085d52:	68fb      	ldr	r3, [r7, #12]
 8085d54:	681b      	ldr	r3, [r3, #0]
 8085d56:	69d9      	ldr	r1, [r3, #28]
 8085d58:	68bb      	ldr	r3, [r7, #8]
 8085d5a:	689b      	ldr	r3, [r3, #8]
 8085d5c:	021a      	lsls	r2, r3, #8
 8085d5e:	68fb      	ldr	r3, [r7, #12]
 8085d60:	681b      	ldr	r3, [r3, #0]
 8085d62:	430a      	orrs	r2, r1
 8085d64:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8085d66:	68fb      	ldr	r3, [r7, #12]
 8085d68:	2201      	movs	r2, #1
 8085d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8085d6e:	68fb      	ldr	r3, [r7, #12]
 8085d70:	2200      	movs	r2, #0
 8085d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8085d76:	2300      	movs	r3, #0
}
 8085d78:	4618      	mov	r0, r3
 8085d7a:	3710      	adds	r7, #16
 8085d7c:	46bd      	mov	sp, r7
 8085d7e:	bd80      	pop	{r7, pc}

08085d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8085d80:	b580      	push	{r7, lr}
 8085d82:	b084      	sub	sp, #16
 8085d84:	af00      	add	r7, sp, #0
 8085d86:	60f8      	str	r0, [r7, #12]
 8085d88:	60b9      	str	r1, [r7, #8]
 8085d8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8085d8c:	68fb      	ldr	r3, [r7, #12]
 8085d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8085d92:	2b01      	cmp	r3, #1
 8085d94:	d101      	bne.n	8085d9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8085d96:	2302      	movs	r3, #2
 8085d98:	e0b4      	b.n	8085f04 <HAL_TIM_PWM_ConfigChannel+0x184>
 8085d9a:	68fb      	ldr	r3, [r7, #12]
 8085d9c:	2201      	movs	r2, #1
 8085d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8085da2:	68fb      	ldr	r3, [r7, #12]
 8085da4:	2202      	movs	r2, #2
 8085da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8085daa:	687b      	ldr	r3, [r7, #4]
 8085dac:	2b0c      	cmp	r3, #12
 8085dae:	f200 809f 	bhi.w	8085ef0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8085db2:	a201      	add	r2, pc, #4	; (adr r2, 8085db8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8085db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8085db8:	08085ded 	.word	0x08085ded
 8085dbc:	08085ef1 	.word	0x08085ef1
 8085dc0:	08085ef1 	.word	0x08085ef1
 8085dc4:	08085ef1 	.word	0x08085ef1
 8085dc8:	08085e2d 	.word	0x08085e2d
 8085dcc:	08085ef1 	.word	0x08085ef1
 8085dd0:	08085ef1 	.word	0x08085ef1
 8085dd4:	08085ef1 	.word	0x08085ef1
 8085dd8:	08085e6f 	.word	0x08085e6f
 8085ddc:	08085ef1 	.word	0x08085ef1
 8085de0:	08085ef1 	.word	0x08085ef1
 8085de4:	08085ef1 	.word	0x08085ef1
 8085de8:	08085eaf 	.word	0x08085eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8085dec:	68fb      	ldr	r3, [r7, #12]
 8085dee:	681b      	ldr	r3, [r3, #0]
 8085df0:	68b9      	ldr	r1, [r7, #8]
 8085df2:	4618      	mov	r0, r3
 8085df4:	f001 f9ba 	bl	808716c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8085df8:	68fb      	ldr	r3, [r7, #12]
 8085dfa:	681b      	ldr	r3, [r3, #0]
 8085dfc:	699a      	ldr	r2, [r3, #24]
 8085dfe:	68fb      	ldr	r3, [r7, #12]
 8085e00:	681b      	ldr	r3, [r3, #0]
 8085e02:	f042 0208 	orr.w	r2, r2, #8
 8085e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8085e08:	68fb      	ldr	r3, [r7, #12]
 8085e0a:	681b      	ldr	r3, [r3, #0]
 8085e0c:	699a      	ldr	r2, [r3, #24]
 8085e0e:	68fb      	ldr	r3, [r7, #12]
 8085e10:	681b      	ldr	r3, [r3, #0]
 8085e12:	f022 0204 	bic.w	r2, r2, #4
 8085e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8085e18:	68fb      	ldr	r3, [r7, #12]
 8085e1a:	681b      	ldr	r3, [r3, #0]
 8085e1c:	6999      	ldr	r1, [r3, #24]
 8085e1e:	68bb      	ldr	r3, [r7, #8]
 8085e20:	691a      	ldr	r2, [r3, #16]
 8085e22:	68fb      	ldr	r3, [r7, #12]
 8085e24:	681b      	ldr	r3, [r3, #0]
 8085e26:	430a      	orrs	r2, r1
 8085e28:	619a      	str	r2, [r3, #24]
      break;
 8085e2a:	e062      	b.n	8085ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8085e2c:	68fb      	ldr	r3, [r7, #12]
 8085e2e:	681b      	ldr	r3, [r3, #0]
 8085e30:	68b9      	ldr	r1, [r7, #8]
 8085e32:	4618      	mov	r0, r3
 8085e34:	f001 fa0a 	bl	808724c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8085e38:	68fb      	ldr	r3, [r7, #12]
 8085e3a:	681b      	ldr	r3, [r3, #0]
 8085e3c:	699a      	ldr	r2, [r3, #24]
 8085e3e:	68fb      	ldr	r3, [r7, #12]
 8085e40:	681b      	ldr	r3, [r3, #0]
 8085e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8085e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8085e48:	68fb      	ldr	r3, [r7, #12]
 8085e4a:	681b      	ldr	r3, [r3, #0]
 8085e4c:	699a      	ldr	r2, [r3, #24]
 8085e4e:	68fb      	ldr	r3, [r7, #12]
 8085e50:	681b      	ldr	r3, [r3, #0]
 8085e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8085e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8085e58:	68fb      	ldr	r3, [r7, #12]
 8085e5a:	681b      	ldr	r3, [r3, #0]
 8085e5c:	6999      	ldr	r1, [r3, #24]
 8085e5e:	68bb      	ldr	r3, [r7, #8]
 8085e60:	691b      	ldr	r3, [r3, #16]
 8085e62:	021a      	lsls	r2, r3, #8
 8085e64:	68fb      	ldr	r3, [r7, #12]
 8085e66:	681b      	ldr	r3, [r3, #0]
 8085e68:	430a      	orrs	r2, r1
 8085e6a:	619a      	str	r2, [r3, #24]
      break;
 8085e6c:	e041      	b.n	8085ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8085e6e:	68fb      	ldr	r3, [r7, #12]
 8085e70:	681b      	ldr	r3, [r3, #0]
 8085e72:	68b9      	ldr	r1, [r7, #8]
 8085e74:	4618      	mov	r0, r3
 8085e76:	f001 fa5f 	bl	8087338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8085e7a:	68fb      	ldr	r3, [r7, #12]
 8085e7c:	681b      	ldr	r3, [r3, #0]
 8085e7e:	69da      	ldr	r2, [r3, #28]
 8085e80:	68fb      	ldr	r3, [r7, #12]
 8085e82:	681b      	ldr	r3, [r3, #0]
 8085e84:	f042 0208 	orr.w	r2, r2, #8
 8085e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8085e8a:	68fb      	ldr	r3, [r7, #12]
 8085e8c:	681b      	ldr	r3, [r3, #0]
 8085e8e:	69da      	ldr	r2, [r3, #28]
 8085e90:	68fb      	ldr	r3, [r7, #12]
 8085e92:	681b      	ldr	r3, [r3, #0]
 8085e94:	f022 0204 	bic.w	r2, r2, #4
 8085e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8085e9a:	68fb      	ldr	r3, [r7, #12]
 8085e9c:	681b      	ldr	r3, [r3, #0]
 8085e9e:	69d9      	ldr	r1, [r3, #28]
 8085ea0:	68bb      	ldr	r3, [r7, #8]
 8085ea2:	691a      	ldr	r2, [r3, #16]
 8085ea4:	68fb      	ldr	r3, [r7, #12]
 8085ea6:	681b      	ldr	r3, [r3, #0]
 8085ea8:	430a      	orrs	r2, r1
 8085eaa:	61da      	str	r2, [r3, #28]
      break;
 8085eac:	e021      	b.n	8085ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8085eae:	68fb      	ldr	r3, [r7, #12]
 8085eb0:	681b      	ldr	r3, [r3, #0]
 8085eb2:	68b9      	ldr	r1, [r7, #8]
 8085eb4:	4618      	mov	r0, r3
 8085eb6:	f001 fab3 	bl	8087420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8085eba:	68fb      	ldr	r3, [r7, #12]
 8085ebc:	681b      	ldr	r3, [r3, #0]
 8085ebe:	69da      	ldr	r2, [r3, #28]
 8085ec0:	68fb      	ldr	r3, [r7, #12]
 8085ec2:	681b      	ldr	r3, [r3, #0]
 8085ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8085ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8085eca:	68fb      	ldr	r3, [r7, #12]
 8085ecc:	681b      	ldr	r3, [r3, #0]
 8085ece:	69da      	ldr	r2, [r3, #28]
 8085ed0:	68fb      	ldr	r3, [r7, #12]
 8085ed2:	681b      	ldr	r3, [r3, #0]
 8085ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8085ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8085eda:	68fb      	ldr	r3, [r7, #12]
 8085edc:	681b      	ldr	r3, [r3, #0]
 8085ede:	69d9      	ldr	r1, [r3, #28]
 8085ee0:	68bb      	ldr	r3, [r7, #8]
 8085ee2:	691b      	ldr	r3, [r3, #16]
 8085ee4:	021a      	lsls	r2, r3, #8
 8085ee6:	68fb      	ldr	r3, [r7, #12]
 8085ee8:	681b      	ldr	r3, [r3, #0]
 8085eea:	430a      	orrs	r2, r1
 8085eec:	61da      	str	r2, [r3, #28]
      break;
 8085eee:	e000      	b.n	8085ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8085ef0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8085ef2:	68fb      	ldr	r3, [r7, #12]
 8085ef4:	2201      	movs	r2, #1
 8085ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8085efa:	68fb      	ldr	r3, [r7, #12]
 8085efc:	2200      	movs	r2, #0
 8085efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8085f02:	2300      	movs	r3, #0
}
 8085f04:	4618      	mov	r0, r3
 8085f06:	3710      	adds	r7, #16
 8085f08:	46bd      	mov	sp, r7
 8085f0a:	bd80      	pop	{r7, pc}

08085f0c <HAL_TIM_OnePulse_ConfigChannel>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
{
 8085f0c:	b580      	push	{r7, lr}
 8085f0e:	b08c      	sub	sp, #48	; 0x30
 8085f10:	af00      	add	r7, sp, #0
 8085f12:	60f8      	str	r0, [r7, #12]
 8085f14:	60b9      	str	r1, [r7, #8]
 8085f16:	607a      	str	r2, [r7, #4]
 8085f18:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 8085f1a:	687a      	ldr	r2, [r7, #4]
 8085f1c:	683b      	ldr	r3, [r7, #0]
 8085f1e:	429a      	cmp	r2, r3
 8085f20:	f000 80af 	beq.w	8086082 <HAL_TIM_OnePulse_ConfigChannel+0x176>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8085f24:	68fb      	ldr	r3, [r7, #12]
 8085f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8085f2a:	2b01      	cmp	r3, #1
 8085f2c:	d101      	bne.n	8085f32 <HAL_TIM_OnePulse_ConfigChannel+0x26>
 8085f2e:	2302      	movs	r3, #2
 8085f30:	e0a8      	b.n	8086084 <HAL_TIM_OnePulse_ConfigChannel+0x178>
 8085f32:	68fb      	ldr	r3, [r7, #12]
 8085f34:	2201      	movs	r2, #1
 8085f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8085f3a:	68fb      	ldr	r3, [r7, #12]
 8085f3c:	2202      	movs	r2, #2
 8085f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8085f42:	68bb      	ldr	r3, [r7, #8]
 8085f44:	681b      	ldr	r3, [r3, #0]
 8085f46:	617b      	str	r3, [r7, #20]
    temp1.Pulse = sConfig->Pulse;
 8085f48:	68bb      	ldr	r3, [r7, #8]
 8085f4a:	685b      	ldr	r3, [r3, #4]
 8085f4c:	61bb      	str	r3, [r7, #24]
    temp1.OCPolarity = sConfig->OCPolarity;
 8085f4e:	68bb      	ldr	r3, [r7, #8]
 8085f50:	689b      	ldr	r3, [r3, #8]
 8085f52:	61fb      	str	r3, [r7, #28]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8085f54:	68bb      	ldr	r3, [r7, #8]
 8085f56:	68db      	ldr	r3, [r3, #12]
 8085f58:	623b      	str	r3, [r7, #32]
    temp1.OCIdleState = sConfig->OCIdleState;
 8085f5a:	68bb      	ldr	r3, [r7, #8]
 8085f5c:	691b      	ldr	r3, [r3, #16]
 8085f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    temp1.OCNIdleState = sConfig->OCNIdleState;
 8085f60:	68bb      	ldr	r3, [r7, #8]
 8085f62:	695b      	ldr	r3, [r3, #20]
 8085f64:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (OutputChannel)
 8085f66:	687b      	ldr	r3, [r7, #4]
 8085f68:	2b00      	cmp	r3, #0
 8085f6a:	d002      	beq.n	8085f72 <HAL_TIM_OnePulse_ConfigChannel+0x66>
 8085f6c:	2b04      	cmp	r3, #4
 8085f6e:	d009      	beq.n	8085f84 <HAL_TIM_OnePulse_ConfigChannel+0x78>

        TIM_OC2_SetConfig(htim->Instance, &temp1);
        break;
      }
      default:
        break;
 8085f70:	e011      	b.n	8085f96 <HAL_TIM_OnePulse_ConfigChannel+0x8a>
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 8085f72:	68fb      	ldr	r3, [r7, #12]
 8085f74:	681b      	ldr	r3, [r3, #0]
 8085f76:	f107 0214 	add.w	r2, r7, #20
 8085f7a:	4611      	mov	r1, r2
 8085f7c:	4618      	mov	r0, r3
 8085f7e:	f001 f8f5 	bl	808716c <TIM_OC1_SetConfig>
        break;
 8085f82:	e008      	b.n	8085f96 <HAL_TIM_OnePulse_ConfigChannel+0x8a>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8085f84:	68fb      	ldr	r3, [r7, #12]
 8085f86:	681b      	ldr	r3, [r3, #0]
 8085f88:	f107 0214 	add.w	r2, r7, #20
 8085f8c:	4611      	mov	r1, r2
 8085f8e:	4618      	mov	r0, r3
 8085f90:	f001 f95c 	bl	808724c <TIM_OC2_SetConfig>
        break;
 8085f94:	bf00      	nop
    }

    switch (InputChannel)
 8085f96:	683b      	ldr	r3, [r7, #0]
 8085f98:	2b00      	cmp	r3, #0
 8085f9a:	d002      	beq.n	8085fa2 <HAL_TIM_OnePulse_ConfigChannel+0x96>
 8085f9c:	2b04      	cmp	r3, #4
 8085f9e:	d033      	beq.n	8086008 <HAL_TIM_OnePulse_ConfigChannel+0xfc>
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
        break;
      }

      default:
        break;
 8085fa0:	e065      	b.n	808606e <HAL_TIM_OnePulse_ConfigChannel+0x162>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8085fa2:	68fb      	ldr	r3, [r7, #12]
 8085fa4:	6818      	ldr	r0, [r3, #0]
 8085fa6:	68bb      	ldr	r3, [r7, #8]
 8085fa8:	6999      	ldr	r1, [r3, #24]
 8085faa:	68bb      	ldr	r3, [r7, #8]
 8085fac:	69da      	ldr	r2, [r3, #28]
 8085fae:	68bb      	ldr	r3, [r7, #8]
 8085fb0:	6a1b      	ldr	r3, [r3, #32]
 8085fb2:	f001 fb11 	bl	80875d8 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8085fb6:	68fb      	ldr	r3, [r7, #12]
 8085fb8:	681b      	ldr	r3, [r3, #0]
 8085fba:	699a      	ldr	r2, [r3, #24]
 8085fbc:	68fb      	ldr	r3, [r7, #12]
 8085fbe:	681b      	ldr	r3, [r3, #0]
 8085fc0:	f022 020c 	bic.w	r2, r2, #12
 8085fc4:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8085fc6:	68fb      	ldr	r3, [r7, #12]
 8085fc8:	681b      	ldr	r3, [r3, #0]
 8085fca:	689a      	ldr	r2, [r3, #8]
 8085fcc:	68fb      	ldr	r3, [r7, #12]
 8085fce:	681b      	ldr	r3, [r3, #0]
 8085fd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8085fd4:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8085fd6:	68fb      	ldr	r3, [r7, #12]
 8085fd8:	681b      	ldr	r3, [r3, #0]
 8085fda:	689a      	ldr	r2, [r3, #8]
 8085fdc:	68fb      	ldr	r3, [r7, #12]
 8085fde:	681b      	ldr	r3, [r3, #0]
 8085fe0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8085fe4:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8085fe6:	68fb      	ldr	r3, [r7, #12]
 8085fe8:	681b      	ldr	r3, [r3, #0]
 8085fea:	689a      	ldr	r2, [r3, #8]
 8085fec:	68fb      	ldr	r3, [r7, #12]
 8085fee:	681b      	ldr	r3, [r3, #0]
 8085ff0:	f022 0207 	bic.w	r2, r2, #7
 8085ff4:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8085ff6:	68fb      	ldr	r3, [r7, #12]
 8085ff8:	681b      	ldr	r3, [r3, #0]
 8085ffa:	689a      	ldr	r2, [r3, #8]
 8085ffc:	68fb      	ldr	r3, [r7, #12]
 8085ffe:	681b      	ldr	r3, [r3, #0]
 8086000:	f042 0206 	orr.w	r2, r2, #6
 8086004:	609a      	str	r2, [r3, #8]
        break;
 8086006:	e032      	b.n	808606e <HAL_TIM_OnePulse_ConfigChannel+0x162>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8086008:	68fb      	ldr	r3, [r7, #12]
 808600a:	6818      	ldr	r0, [r3, #0]
 808600c:	68bb      	ldr	r3, [r7, #8]
 808600e:	6999      	ldr	r1, [r3, #24]
 8086010:	68bb      	ldr	r3, [r7, #8]
 8086012:	69da      	ldr	r2, [r3, #28]
 8086014:	68bb      	ldr	r3, [r7, #8]
 8086016:	6a1b      	ldr	r3, [r3, #32]
 8086018:	f001 fb81 	bl	808771e <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 808601c:	68fb      	ldr	r3, [r7, #12]
 808601e:	681b      	ldr	r3, [r3, #0]
 8086020:	699a      	ldr	r2, [r3, #24]
 8086022:	68fb      	ldr	r3, [r7, #12]
 8086024:	681b      	ldr	r3, [r3, #0]
 8086026:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 808602a:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 808602c:	68fb      	ldr	r3, [r7, #12]
 808602e:	681b      	ldr	r3, [r3, #0]
 8086030:	689a      	ldr	r2, [r3, #8]
 8086032:	68fb      	ldr	r3, [r7, #12]
 8086034:	681b      	ldr	r3, [r3, #0]
 8086036:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 808603a:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 808603c:	68fb      	ldr	r3, [r7, #12]
 808603e:	681b      	ldr	r3, [r3, #0]
 8086040:	689a      	ldr	r2, [r3, #8]
 8086042:	68fb      	ldr	r3, [r7, #12]
 8086044:	681b      	ldr	r3, [r3, #0]
 8086046:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 808604a:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 808604c:	68fb      	ldr	r3, [r7, #12]
 808604e:	681b      	ldr	r3, [r3, #0]
 8086050:	689a      	ldr	r2, [r3, #8]
 8086052:	68fb      	ldr	r3, [r7, #12]
 8086054:	681b      	ldr	r3, [r3, #0]
 8086056:	f022 0207 	bic.w	r2, r2, #7
 808605a:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 808605c:	68fb      	ldr	r3, [r7, #12]
 808605e:	681b      	ldr	r3, [r3, #0]
 8086060:	689a      	ldr	r2, [r3, #8]
 8086062:	68fb      	ldr	r3, [r7, #12]
 8086064:	681b      	ldr	r3, [r3, #0]
 8086066:	f042 0206 	orr.w	r2, r2, #6
 808606a:	609a      	str	r2, [r3, #8]
        break;
 808606c:	bf00      	nop
    }

    htim->State = HAL_TIM_STATE_READY;
 808606e:	68fb      	ldr	r3, [r7, #12]
 8086070:	2201      	movs	r2, #1
 8086072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 8086076:	68fb      	ldr	r3, [r7, #12]
 8086078:	2200      	movs	r2, #0
 808607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 808607e:	2300      	movs	r3, #0
 8086080:	e000      	b.n	8086084 <HAL_TIM_OnePulse_ConfigChannel+0x178>
  }
  else
  {
    return HAL_ERROR;
 8086082:	2301      	movs	r3, #1
  }
}
 8086084:	4618      	mov	r0, r3
 8086086:	3730      	adds	r7, #48	; 0x30
 8086088:	46bd      	mov	sp, r7
 808608a:	bd80      	pop	{r7, pc}

0808608c <HAL_TIM_DMABurst_WriteStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t *BurstBuffer, uint32_t  BurstLength)
{
 808608c:	b580      	push	{r7, lr}
 808608e:	b084      	sub	sp, #16
 8086090:	af00      	add	r7, sp, #0
 8086092:	60f8      	str	r0, [r7, #12]
 8086094:	60b9      	str	r1, [r7, #8]
 8086096:	607a      	str	r2, [r7, #4]
 8086098:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 808609a:	68fb      	ldr	r3, [r7, #12]
 808609c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80860a0:	b2db      	uxtb	r3, r3
 80860a2:	2b02      	cmp	r3, #2
 80860a4:	d101      	bne.n	80860aa <HAL_TIM_DMABurst_WriteStart+0x1e>
  {
    return HAL_BUSY;
 80860a6:	2302      	movs	r3, #2
 80860a8:	e11b      	b.n	80862e2 <HAL_TIM_DMABurst_WriteStart+0x256>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 80860aa:	68fb      	ldr	r3, [r7, #12]
 80860ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80860b0:	b2db      	uxtb	r3, r3
 80860b2:	2b01      	cmp	r3, #1
 80860b4:	d10b      	bne.n	80860ce <HAL_TIM_DMABurst_WriteStart+0x42>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 80860b6:	683b      	ldr	r3, [r7, #0]
 80860b8:	2b00      	cmp	r3, #0
 80860ba:	d104      	bne.n	80860c6 <HAL_TIM_DMABurst_WriteStart+0x3a>
 80860bc:	69bb      	ldr	r3, [r7, #24]
 80860be:	2b00      	cmp	r3, #0
 80860c0:	d001      	beq.n	80860c6 <HAL_TIM_DMABurst_WriteStart+0x3a>
    {
      return HAL_ERROR;
 80860c2:	2301      	movs	r3, #1
 80860c4:	e10d      	b.n	80862e2 <HAL_TIM_DMABurst_WriteStart+0x256>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80860c6:	68fb      	ldr	r3, [r7, #12]
 80860c8:	2202      	movs	r2, #2
 80860ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 80860ce:	687b      	ldr	r3, [r7, #4]
 80860d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80860d4:	d071      	beq.n	80861ba <HAL_TIM_DMABurst_WriteStart+0x12e>
 80860d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80860da:	d809      	bhi.n	80860f0 <HAL_TIM_DMABurst_WriteStart+0x64>
 80860dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80860e0:	d030      	beq.n	8086144 <HAL_TIM_DMABurst_WriteStart+0xb8>
 80860e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80860e6:	d04b      	beq.n	8086180 <HAL_TIM_DMABurst_WriteStart+0xf4>
 80860e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80860ec:	d00c      	beq.n	8086108 <HAL_TIM_DMABurst_WriteStart+0x7c>
        return HAL_ERROR;
      }
      break;
    }
    default:
      break;
 80860ee:	e0e5      	b.n	80862bc <HAL_TIM_DMABurst_WriteStart+0x230>
  switch (BurstRequestSrc)
 80860f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80860f4:	f000 809b 	beq.w	808622e <HAL_TIM_DMABurst_WriteStart+0x1a2>
 80860f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80860fc:	f000 80b4 	beq.w	8086268 <HAL_TIM_DMABurst_WriteStart+0x1dc>
 8086100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8086104:	d076      	beq.n	80861f4 <HAL_TIM_DMABurst_WriteStart+0x168>
      break;
 8086106:	e0d9      	b.n	80862bc <HAL_TIM_DMABurst_WriteStart+0x230>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8086108:	68fb      	ldr	r3, [r7, #12]
 808610a:	6a1b      	ldr	r3, [r3, #32]
 808610c:	4a77      	ldr	r2, [pc, #476]	; (80862ec <HAL_TIM_DMABurst_WriteStart+0x260>)
 808610e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8086110:	68fb      	ldr	r3, [r7, #12]
 8086112:	6a1b      	ldr	r3, [r3, #32]
 8086114:	4a76      	ldr	r2, [pc, #472]	; (80862f0 <HAL_TIM_DMABurst_WriteStart+0x264>)
 8086116:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8086118:	68fb      	ldr	r3, [r7, #12]
 808611a:	6a1b      	ldr	r3, [r3, #32]
 808611c:	4a75      	ldr	r2, [pc, #468]	; (80862f4 <HAL_TIM_DMABurst_WriteStart+0x268>)
 808611e:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8086120:	68fb      	ldr	r3, [r7, #12]
 8086122:	6a18      	ldr	r0, [r3, #32]
 8086124:	6839      	ldr	r1, [r7, #0]
 8086126:	68fb      	ldr	r3, [r7, #12]
 8086128:	681b      	ldr	r3, [r3, #0]
 808612a:	334c      	adds	r3, #76	; 0x4c
 808612c:	461a      	mov	r2, r3
 808612e:	69bb      	ldr	r3, [r7, #24]
 8086130:	0a1b      	lsrs	r3, r3, #8
 8086132:	3301      	adds	r3, #1
 8086134:	f7fb fc8d 	bl	8081a52 <HAL_DMA_Start_IT>
 8086138:	4603      	mov	r3, r0
 808613a:	2b00      	cmp	r3, #0
 808613c:	f000 80b1 	beq.w	80862a2 <HAL_TIM_DMABurst_WriteStart+0x216>
        return HAL_ERROR;
 8086140:	2301      	movs	r3, #1
 8086142:	e0ce      	b.n	80862e2 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8086144:	68fb      	ldr	r3, [r7, #12]
 8086146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086148:	4a6b      	ldr	r2, [pc, #428]	; (80862f8 <HAL_TIM_DMABurst_WriteStart+0x26c>)
 808614a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 808614c:	68fb      	ldr	r3, [r7, #12]
 808614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086150:	4a6a      	ldr	r2, [pc, #424]	; (80862fc <HAL_TIM_DMABurst_WriteStart+0x270>)
 8086152:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8086154:	68fb      	ldr	r3, [r7, #12]
 8086156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086158:	4a66      	ldr	r2, [pc, #408]	; (80862f4 <HAL_TIM_DMABurst_WriteStart+0x268>)
 808615a:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 808615c:	68fb      	ldr	r3, [r7, #12]
 808615e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8086160:	6839      	ldr	r1, [r7, #0]
 8086162:	68fb      	ldr	r3, [r7, #12]
 8086164:	681b      	ldr	r3, [r3, #0]
 8086166:	334c      	adds	r3, #76	; 0x4c
 8086168:	461a      	mov	r2, r3
 808616a:	69bb      	ldr	r3, [r7, #24]
 808616c:	0a1b      	lsrs	r3, r3, #8
 808616e:	3301      	adds	r3, #1
 8086170:	f7fb fc6f 	bl	8081a52 <HAL_DMA_Start_IT>
 8086174:	4603      	mov	r3, r0
 8086176:	2b00      	cmp	r3, #0
 8086178:	f000 8095 	beq.w	80862a6 <HAL_TIM_DMABurst_WriteStart+0x21a>
        return HAL_ERROR;
 808617c:	2301      	movs	r3, #1
 808617e:	e0b0      	b.n	80862e2 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8086180:	68fb      	ldr	r3, [r7, #12]
 8086182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086184:	4a5c      	ldr	r2, [pc, #368]	; (80862f8 <HAL_TIM_DMABurst_WriteStart+0x26c>)
 8086186:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8086188:	68fb      	ldr	r3, [r7, #12]
 808618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808618c:	4a5b      	ldr	r2, [pc, #364]	; (80862fc <HAL_TIM_DMABurst_WriteStart+0x270>)
 808618e:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8086190:	68fb      	ldr	r3, [r7, #12]
 8086192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086194:	4a57      	ldr	r2, [pc, #348]	; (80862f4 <HAL_TIM_DMABurst_WriteStart+0x268>)
 8086196:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8086198:	68fb      	ldr	r3, [r7, #12]
 808619a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 808619c:	6839      	ldr	r1, [r7, #0]
 808619e:	68fb      	ldr	r3, [r7, #12]
 80861a0:	681b      	ldr	r3, [r3, #0]
 80861a2:	334c      	adds	r3, #76	; 0x4c
 80861a4:	461a      	mov	r2, r3
 80861a6:	69bb      	ldr	r3, [r7, #24]
 80861a8:	0a1b      	lsrs	r3, r3, #8
 80861aa:	3301      	adds	r3, #1
 80861ac:	f7fb fc51 	bl	8081a52 <HAL_DMA_Start_IT>
 80861b0:	4603      	mov	r3, r0
 80861b2:	2b00      	cmp	r3, #0
 80861b4:	d079      	beq.n	80862aa <HAL_TIM_DMABurst_WriteStart+0x21e>
        return HAL_ERROR;
 80861b6:	2301      	movs	r3, #1
 80861b8:	e093      	b.n	80862e2 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80861ba:	68fb      	ldr	r3, [r7, #12]
 80861bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80861be:	4a4e      	ldr	r2, [pc, #312]	; (80862f8 <HAL_TIM_DMABurst_WriteStart+0x26c>)
 80861c0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80861c2:	68fb      	ldr	r3, [r7, #12]
 80861c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80861c6:	4a4d      	ldr	r2, [pc, #308]	; (80862fc <HAL_TIM_DMABurst_WriteStart+0x270>)
 80861c8:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80861ca:	68fb      	ldr	r3, [r7, #12]
 80861cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80861ce:	4a49      	ldr	r2, [pc, #292]	; (80862f4 <HAL_TIM_DMABurst_WriteStart+0x268>)
 80861d0:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80861d2:	68fb      	ldr	r3, [r7, #12]
 80861d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80861d6:	6839      	ldr	r1, [r7, #0]
 80861d8:	68fb      	ldr	r3, [r7, #12]
 80861da:	681b      	ldr	r3, [r3, #0]
 80861dc:	334c      	adds	r3, #76	; 0x4c
 80861de:	461a      	mov	r2, r3
 80861e0:	69bb      	ldr	r3, [r7, #24]
 80861e2:	0a1b      	lsrs	r3, r3, #8
 80861e4:	3301      	adds	r3, #1
 80861e6:	f7fb fc34 	bl	8081a52 <HAL_DMA_Start_IT>
 80861ea:	4603      	mov	r3, r0
 80861ec:	2b00      	cmp	r3, #0
 80861ee:	d05e      	beq.n	80862ae <HAL_TIM_DMABurst_WriteStart+0x222>
        return HAL_ERROR;
 80861f0:	2301      	movs	r3, #1
 80861f2:	e076      	b.n	80862e2 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80861f4:	68fb      	ldr	r3, [r7, #12]
 80861f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80861f8:	4a3f      	ldr	r2, [pc, #252]	; (80862f8 <HAL_TIM_DMABurst_WriteStart+0x26c>)
 80861fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80861fc:	68fb      	ldr	r3, [r7, #12]
 80861fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086200:	4a3e      	ldr	r2, [pc, #248]	; (80862fc <HAL_TIM_DMABurst_WriteStart+0x270>)
 8086202:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8086204:	68fb      	ldr	r3, [r7, #12]
 8086206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086208:	4a3a      	ldr	r2, [pc, #232]	; (80862f4 <HAL_TIM_DMABurst_WriteStart+0x268>)
 808620a:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 808620c:	68fb      	ldr	r3, [r7, #12]
 808620e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8086210:	6839      	ldr	r1, [r7, #0]
 8086212:	68fb      	ldr	r3, [r7, #12]
 8086214:	681b      	ldr	r3, [r3, #0]
 8086216:	334c      	adds	r3, #76	; 0x4c
 8086218:	461a      	mov	r2, r3
 808621a:	69bb      	ldr	r3, [r7, #24]
 808621c:	0a1b      	lsrs	r3, r3, #8
 808621e:	3301      	adds	r3, #1
 8086220:	f7fb fc17 	bl	8081a52 <HAL_DMA_Start_IT>
 8086224:	4603      	mov	r3, r0
 8086226:	2b00      	cmp	r3, #0
 8086228:	d043      	beq.n	80862b2 <HAL_TIM_DMABurst_WriteStart+0x226>
        return HAL_ERROR;
 808622a:	2301      	movs	r3, #1
 808622c:	e059      	b.n	80862e2 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 808622e:	68fb      	ldr	r3, [r7, #12]
 8086230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8086232:	4a33      	ldr	r2, [pc, #204]	; (8086300 <HAL_TIM_DMABurst_WriteStart+0x274>)
 8086234:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8086236:	68fb      	ldr	r3, [r7, #12]
 8086238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808623a:	4a32      	ldr	r2, [pc, #200]	; (8086304 <HAL_TIM_DMABurst_WriteStart+0x278>)
 808623c:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 808623e:	68fb      	ldr	r3, [r7, #12]
 8086240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8086242:	4a2c      	ldr	r2, [pc, #176]	; (80862f4 <HAL_TIM_DMABurst_WriteStart+0x268>)
 8086244:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8086246:	68fb      	ldr	r3, [r7, #12]
 8086248:	6b58      	ldr	r0, [r3, #52]	; 0x34
 808624a:	6839      	ldr	r1, [r7, #0]
 808624c:	68fb      	ldr	r3, [r7, #12]
 808624e:	681b      	ldr	r3, [r3, #0]
 8086250:	334c      	adds	r3, #76	; 0x4c
 8086252:	461a      	mov	r2, r3
 8086254:	69bb      	ldr	r3, [r7, #24]
 8086256:	0a1b      	lsrs	r3, r3, #8
 8086258:	3301      	adds	r3, #1
 808625a:	f7fb fbfa 	bl	8081a52 <HAL_DMA_Start_IT>
 808625e:	4603      	mov	r3, r0
 8086260:	2b00      	cmp	r3, #0
 8086262:	d028      	beq.n	80862b6 <HAL_TIM_DMABurst_WriteStart+0x22a>
        return HAL_ERROR;
 8086264:	2301      	movs	r3, #1
 8086266:	e03c      	b.n	80862e2 <HAL_TIM_DMABurst_WriteStart+0x256>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8086268:	68fb      	ldr	r3, [r7, #12]
 808626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808626c:	4a26      	ldr	r2, [pc, #152]	; (8086308 <HAL_TIM_DMABurst_WriteStart+0x27c>)
 808626e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8086270:	68fb      	ldr	r3, [r7, #12]
 8086272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086274:	4a25      	ldr	r2, [pc, #148]	; (808630c <HAL_TIM_DMABurst_WriteStart+0x280>)
 8086276:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8086278:	68fb      	ldr	r3, [r7, #12]
 808627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808627c:	4a1d      	ldr	r2, [pc, #116]	; (80862f4 <HAL_TIM_DMABurst_WriteStart+0x268>)
 808627e:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8086280:	68fb      	ldr	r3, [r7, #12]
 8086282:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8086284:	6839      	ldr	r1, [r7, #0]
 8086286:	68fb      	ldr	r3, [r7, #12]
 8086288:	681b      	ldr	r3, [r3, #0]
 808628a:	334c      	adds	r3, #76	; 0x4c
 808628c:	461a      	mov	r2, r3
 808628e:	69bb      	ldr	r3, [r7, #24]
 8086290:	0a1b      	lsrs	r3, r3, #8
 8086292:	3301      	adds	r3, #1
 8086294:	f7fb fbdd 	bl	8081a52 <HAL_DMA_Start_IT>
 8086298:	4603      	mov	r3, r0
 808629a:	2b00      	cmp	r3, #0
 808629c:	d00d      	beq.n	80862ba <HAL_TIM_DMABurst_WriteStart+0x22e>
        return HAL_ERROR;
 808629e:	2301      	movs	r3, #1
 80862a0:	e01f      	b.n	80862e2 <HAL_TIM_DMABurst_WriteStart+0x256>
      break;
 80862a2:	bf00      	nop
 80862a4:	e00a      	b.n	80862bc <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 80862a6:	bf00      	nop
 80862a8:	e008      	b.n	80862bc <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 80862aa:	bf00      	nop
 80862ac:	e006      	b.n	80862bc <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 80862ae:	bf00      	nop
 80862b0:	e004      	b.n	80862bc <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 80862b2:	bf00      	nop
 80862b4:	e002      	b.n	80862bc <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 80862b6:	bf00      	nop
 80862b8:	e000      	b.n	80862bc <HAL_TIM_DMABurst_WriteStart+0x230>
      break;
 80862ba:	bf00      	nop
  }
  /* configure the DMA Burst Mode */
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 80862bc:	68fb      	ldr	r3, [r7, #12]
 80862be:	681b      	ldr	r3, [r3, #0]
 80862c0:	68b9      	ldr	r1, [r7, #8]
 80862c2:	69ba      	ldr	r2, [r7, #24]
 80862c4:	430a      	orrs	r2, r1
 80862c6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 80862c8:	68fb      	ldr	r3, [r7, #12]
 80862ca:	681b      	ldr	r3, [r3, #0]
 80862cc:	68d9      	ldr	r1, [r3, #12]
 80862ce:	68fb      	ldr	r3, [r7, #12]
 80862d0:	681b      	ldr	r3, [r3, #0]
 80862d2:	687a      	ldr	r2, [r7, #4]
 80862d4:	430a      	orrs	r2, r1
 80862d6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80862d8:	68fb      	ldr	r3, [r7, #12]
 80862da:	2201      	movs	r2, #1
 80862dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80862e0:	2300      	movs	r3, #0
}
 80862e2:	4618      	mov	r0, r3
 80862e4:	3710      	adds	r7, #16
 80862e6:	46bd      	mov	sp, r7
 80862e8:	bd80      	pop	{r7, pc}
 80862ea:	bf00      	nop
 80862ec:	08086f9d 	.word	0x08086f9d
 80862f0:	08086fc1 	.word	0x08086fc1
 80862f4:	08086db9 	.word	0x08086db9
 80862f8:	08086ddd 	.word	0x08086ddd
 80862fc:	08086e4d 	.word	0x08086e4d
 8086300:	08088d65 	.word	0x08088d65
 8086304:	08088d89 	.word	0x08088d89
 8086308:	08086fe5 	.word	0x08086fe5
 808630c:	08087009 	.word	0x08087009

08086310 <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8086310:	b580      	push	{r7, lr}
 8086312:	b084      	sub	sp, #16
 8086314:	af00      	add	r7, sp, #0
 8086316:	6078      	str	r0, [r7, #4]
 8086318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 808631a:	2300      	movs	r3, #0
 808631c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA stream) */
  switch (BurstRequestSrc)
 808631e:	683b      	ldr	r3, [r7, #0]
 8086320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8086324:	d02e      	beq.n	8086384 <HAL_TIM_DMABurst_WriteStop+0x74>
 8086326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 808632a:	d809      	bhi.n	8086340 <HAL_TIM_DMABurst_WriteStop+0x30>
 808632c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8086330:	d018      	beq.n	8086364 <HAL_TIM_DMABurst_WriteStop+0x54>
 8086332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8086336:	d01d      	beq.n	8086374 <HAL_TIM_DMABurst_WriteStop+0x64>
 8086338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 808633c:	d00a      	beq.n	8086354 <HAL_TIM_DMABurst_WriteStop+0x44>
    {
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
      break;
    }
    default:
      break;
 808633e:	e041      	b.n	80863c4 <HAL_TIM_DMABurst_WriteStop+0xb4>
  switch (BurstRequestSrc)
 8086340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8086344:	d02e      	beq.n	80863a4 <HAL_TIM_DMABurst_WriteStop+0x94>
 8086346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 808634a:	d033      	beq.n	80863b4 <HAL_TIM_DMABurst_WriteStop+0xa4>
 808634c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8086350:	d020      	beq.n	8086394 <HAL_TIM_DMABurst_WriteStop+0x84>
      break;
 8086352:	e037      	b.n	80863c4 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8086354:	687b      	ldr	r3, [r7, #4]
 8086356:	6a1b      	ldr	r3, [r3, #32]
 8086358:	4618      	mov	r0, r3
 808635a:	f7fb fc4a 	bl	8081bf2 <HAL_DMA_Abort_IT>
 808635e:	4603      	mov	r3, r0
 8086360:	73fb      	strb	r3, [r7, #15]
      break;
 8086362:	e02f      	b.n	80863c4 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8086364:	687b      	ldr	r3, [r7, #4]
 8086366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086368:	4618      	mov	r0, r3
 808636a:	f7fb fc42 	bl	8081bf2 <HAL_DMA_Abort_IT>
 808636e:	4603      	mov	r3, r0
 8086370:	73fb      	strb	r3, [r7, #15]
      break;
 8086372:	e027      	b.n	80863c4 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8086374:	687b      	ldr	r3, [r7, #4]
 8086376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086378:	4618      	mov	r0, r3
 808637a:	f7fb fc3a 	bl	8081bf2 <HAL_DMA_Abort_IT>
 808637e:	4603      	mov	r3, r0
 8086380:	73fb      	strb	r3, [r7, #15]
      break;
 8086382:	e01f      	b.n	80863c4 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status =  HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8086384:	687b      	ldr	r3, [r7, #4]
 8086386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086388:	4618      	mov	r0, r3
 808638a:	f7fb fc32 	bl	8081bf2 <HAL_DMA_Abort_IT>
 808638e:	4603      	mov	r3, r0
 8086390:	73fb      	strb	r3, [r7, #15]
      break;
 8086392:	e017      	b.n	80863c4 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8086394:	687b      	ldr	r3, [r7, #4]
 8086396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086398:	4618      	mov	r0, r3
 808639a:	f7fb fc2a 	bl	8081bf2 <HAL_DMA_Abort_IT>
 808639e:	4603      	mov	r3, r0
 80863a0:	73fb      	strb	r3, [r7, #15]
      break;
 80863a2:	e00f      	b.n	80863c4 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 80863a4:	687b      	ldr	r3, [r7, #4]
 80863a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80863a8:	4618      	mov	r0, r3
 80863aa:	f7fb fc22 	bl	8081bf2 <HAL_DMA_Abort_IT>
 80863ae:	4603      	mov	r3, r0
 80863b0:	73fb      	strb	r3, [r7, #15]
      break;
 80863b2:	e007      	b.n	80863c4 <HAL_TIM_DMABurst_WriteStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 80863b4:	687b      	ldr	r3, [r7, #4]
 80863b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80863b8:	4618      	mov	r0, r3
 80863ba:	f7fb fc1a 	bl	8081bf2 <HAL_DMA_Abort_IT>
 80863be:	4603      	mov	r3, r0
 80863c0:	73fb      	strb	r3, [r7, #15]
      break;
 80863c2:	bf00      	nop
  }

  if (HAL_OK == status)
 80863c4:	7bfb      	ldrb	r3, [r7, #15]
 80863c6:	2b00      	cmp	r3, #0
 80863c8:	d108      	bne.n	80863dc <HAL_TIM_DMABurst_WriteStop+0xcc>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 80863ca:	687b      	ldr	r3, [r7, #4]
 80863cc:	681b      	ldr	r3, [r3, #0]
 80863ce:	68d9      	ldr	r1, [r3, #12]
 80863d0:	683b      	ldr	r3, [r7, #0]
 80863d2:	43da      	mvns	r2, r3
 80863d4:	687b      	ldr	r3, [r7, #4]
 80863d6:	681b      	ldr	r3, [r3, #0]
 80863d8:	400a      	ands	r2, r1
 80863da:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 80863dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80863de:	4618      	mov	r0, r3
 80863e0:	3710      	adds	r7, #16
 80863e2:	46bd      	mov	sp, r7
 80863e4:	bd80      	pop	{r7, pc}

080863e6 <HAL_TIM_DMABurst_ReadStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                             uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 80863e6:	b580      	push	{r7, lr}
 80863e8:	b084      	sub	sp, #16
 80863ea:	af00      	add	r7, sp, #0
 80863ec:	60f8      	str	r0, [r7, #12]
 80863ee:	60b9      	str	r1, [r7, #8]
 80863f0:	607a      	str	r2, [r7, #4]
 80863f2:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 80863f4:	68fb      	ldr	r3, [r7, #12]
 80863f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80863fa:	b2db      	uxtb	r3, r3
 80863fc:	2b02      	cmp	r3, #2
 80863fe:	d101      	bne.n	8086404 <HAL_TIM_DMABurst_ReadStart+0x1e>
  {
    return HAL_BUSY;
 8086400:	2302      	movs	r3, #2
 8086402:	e11b      	b.n	808663c <HAL_TIM_DMABurst_ReadStart+0x256>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8086404:	68fb      	ldr	r3, [r7, #12]
 8086406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 808640a:	b2db      	uxtb	r3, r3
 808640c:	2b01      	cmp	r3, #1
 808640e:	d10b      	bne.n	8086428 <HAL_TIM_DMABurst_ReadStart+0x42>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 8086410:	683b      	ldr	r3, [r7, #0]
 8086412:	2b00      	cmp	r3, #0
 8086414:	d104      	bne.n	8086420 <HAL_TIM_DMABurst_ReadStart+0x3a>
 8086416:	69bb      	ldr	r3, [r7, #24]
 8086418:	2b00      	cmp	r3, #0
 808641a:	d001      	beq.n	8086420 <HAL_TIM_DMABurst_ReadStart+0x3a>
    {
      return HAL_ERROR;
 808641c:	2301      	movs	r3, #1
 808641e:	e10d      	b.n	808663c <HAL_TIM_DMABurst_ReadStart+0x256>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8086420:	68fb      	ldr	r3, [r7, #12]
 8086422:	2202      	movs	r2, #2
 8086424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 8086428:	687b      	ldr	r3, [r7, #4]
 808642a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 808642e:	d071      	beq.n	8086514 <HAL_TIM_DMABurst_ReadStart+0x12e>
 8086430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8086434:	d809      	bhi.n	808644a <HAL_TIM_DMABurst_ReadStart+0x64>
 8086436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 808643a:	d030      	beq.n	808649e <HAL_TIM_DMABurst_ReadStart+0xb8>
 808643c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8086440:	d04b      	beq.n	80864da <HAL_TIM_DMABurst_ReadStart+0xf4>
 8086442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8086446:	d00c      	beq.n	8086462 <HAL_TIM_DMABurst_ReadStart+0x7c>
        return HAL_ERROR;
      }
      break;
    }
    default:
      break;
 8086448:	e0e5      	b.n	8086616 <HAL_TIM_DMABurst_ReadStart+0x230>
  switch (BurstRequestSrc)
 808644a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808644e:	f000 809b 	beq.w	8086588 <HAL_TIM_DMABurst_ReadStart+0x1a2>
 8086452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8086456:	f000 80b4 	beq.w	80865c2 <HAL_TIM_DMABurst_ReadStart+0x1dc>
 808645a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 808645e:	d076      	beq.n	808654e <HAL_TIM_DMABurst_ReadStart+0x168>
      break;
 8086460:	e0d9      	b.n	8086616 <HAL_TIM_DMABurst_ReadStart+0x230>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8086462:	68fb      	ldr	r3, [r7, #12]
 8086464:	6a1b      	ldr	r3, [r3, #32]
 8086466:	4a77      	ldr	r2, [pc, #476]	; (8086644 <HAL_TIM_DMABurst_ReadStart+0x25e>)
 8086468:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 808646a:	68fb      	ldr	r3, [r7, #12]
 808646c:	6a1b      	ldr	r3, [r3, #32]
 808646e:	4a76      	ldr	r2, [pc, #472]	; (8086648 <HAL_TIM_DMABurst_ReadStart+0x262>)
 8086470:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8086472:	68fb      	ldr	r3, [r7, #12]
 8086474:	6a1b      	ldr	r3, [r3, #32]
 8086476:	4a75      	ldr	r2, [pc, #468]	; (808664c <HAL_TIM_DMABurst_ReadStart+0x266>)
 8086478:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 808647a:	68fb      	ldr	r3, [r7, #12]
 808647c:	6a18      	ldr	r0, [r3, #32]
 808647e:	68fb      	ldr	r3, [r7, #12]
 8086480:	681b      	ldr	r3, [r3, #0]
 8086482:	334c      	adds	r3, #76	; 0x4c
 8086484:	4619      	mov	r1, r3
 8086486:	683a      	ldr	r2, [r7, #0]
 8086488:	69bb      	ldr	r3, [r7, #24]
 808648a:	0a1b      	lsrs	r3, r3, #8
 808648c:	3301      	adds	r3, #1
 808648e:	f7fb fae0 	bl	8081a52 <HAL_DMA_Start_IT>
 8086492:	4603      	mov	r3, r0
 8086494:	2b00      	cmp	r3, #0
 8086496:	f000 80b1 	beq.w	80865fc <HAL_TIM_DMABurst_ReadStart+0x216>
        return HAL_ERROR;
 808649a:	2301      	movs	r3, #1
 808649c:	e0ce      	b.n	808663c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 808649e:	68fb      	ldr	r3, [r7, #12]
 80864a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80864a2:	4a6b      	ldr	r2, [pc, #428]	; (8086650 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 80864a4:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80864a6:	68fb      	ldr	r3, [r7, #12]
 80864a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80864aa:	4a6a      	ldr	r2, [pc, #424]	; (8086654 <HAL_TIM_DMABurst_ReadStart+0x26e>)
 80864ac:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80864ae:	68fb      	ldr	r3, [r7, #12]
 80864b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80864b2:	4a66      	ldr	r2, [pc, #408]	; (808664c <HAL_TIM_DMABurst_ReadStart+0x266>)
 80864b4:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80864b6:	68fb      	ldr	r3, [r7, #12]
 80864b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80864ba:	68fb      	ldr	r3, [r7, #12]
 80864bc:	681b      	ldr	r3, [r3, #0]
 80864be:	334c      	adds	r3, #76	; 0x4c
 80864c0:	4619      	mov	r1, r3
 80864c2:	683a      	ldr	r2, [r7, #0]
 80864c4:	69bb      	ldr	r3, [r7, #24]
 80864c6:	0a1b      	lsrs	r3, r3, #8
 80864c8:	3301      	adds	r3, #1
 80864ca:	f7fb fac2 	bl	8081a52 <HAL_DMA_Start_IT>
 80864ce:	4603      	mov	r3, r0
 80864d0:	2b00      	cmp	r3, #0
 80864d2:	f000 8095 	beq.w	8086600 <HAL_TIM_DMABurst_ReadStart+0x21a>
        return HAL_ERROR;
 80864d6:	2301      	movs	r3, #1
 80864d8:	e0b0      	b.n	808663c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80864da:	68fb      	ldr	r3, [r7, #12]
 80864dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80864de:	4a5c      	ldr	r2, [pc, #368]	; (8086650 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 80864e0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80864e2:	68fb      	ldr	r3, [r7, #12]
 80864e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80864e6:	4a5b      	ldr	r2, [pc, #364]	; (8086654 <HAL_TIM_DMABurst_ReadStart+0x26e>)
 80864e8:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80864ea:	68fb      	ldr	r3, [r7, #12]
 80864ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80864ee:	4a57      	ldr	r2, [pc, #348]	; (808664c <HAL_TIM_DMABurst_ReadStart+0x266>)
 80864f0:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80864f2:	68fb      	ldr	r3, [r7, #12]
 80864f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80864f6:	68fb      	ldr	r3, [r7, #12]
 80864f8:	681b      	ldr	r3, [r3, #0]
 80864fa:	334c      	adds	r3, #76	; 0x4c
 80864fc:	4619      	mov	r1, r3
 80864fe:	683a      	ldr	r2, [r7, #0]
 8086500:	69bb      	ldr	r3, [r7, #24]
 8086502:	0a1b      	lsrs	r3, r3, #8
 8086504:	3301      	adds	r3, #1
 8086506:	f7fb faa4 	bl	8081a52 <HAL_DMA_Start_IT>
 808650a:	4603      	mov	r3, r0
 808650c:	2b00      	cmp	r3, #0
 808650e:	d079      	beq.n	8086604 <HAL_TIM_DMABurst_ReadStart+0x21e>
        return HAL_ERROR;
 8086510:	2301      	movs	r3, #1
 8086512:	e093      	b.n	808663c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8086514:	68fb      	ldr	r3, [r7, #12]
 8086516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086518:	4a4d      	ldr	r2, [pc, #308]	; (8086650 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 808651a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 808651c:	68fb      	ldr	r3, [r7, #12]
 808651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086520:	4a4c      	ldr	r2, [pc, #304]	; (8086654 <HAL_TIM_DMABurst_ReadStart+0x26e>)
 8086522:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8086524:	68fb      	ldr	r3, [r7, #12]
 8086526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086528:	4a48      	ldr	r2, [pc, #288]	; (808664c <HAL_TIM_DMABurst_ReadStart+0x266>)
 808652a:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 808652c:	68fb      	ldr	r3, [r7, #12]
 808652e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8086530:	68fb      	ldr	r3, [r7, #12]
 8086532:	681b      	ldr	r3, [r3, #0]
 8086534:	334c      	adds	r3, #76	; 0x4c
 8086536:	4619      	mov	r1, r3
 8086538:	683a      	ldr	r2, [r7, #0]
 808653a:	69bb      	ldr	r3, [r7, #24]
 808653c:	0a1b      	lsrs	r3, r3, #8
 808653e:	3301      	adds	r3, #1
 8086540:	f7fb fa87 	bl	8081a52 <HAL_DMA_Start_IT>
 8086544:	4603      	mov	r3, r0
 8086546:	2b00      	cmp	r3, #0
 8086548:	d05e      	beq.n	8086608 <HAL_TIM_DMABurst_ReadStart+0x222>
        return HAL_ERROR;
 808654a:	2301      	movs	r3, #1
 808654c:	e076      	b.n	808663c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 808654e:	68fb      	ldr	r3, [r7, #12]
 8086550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086552:	4a3f      	ldr	r2, [pc, #252]	; (8086650 <HAL_TIM_DMABurst_ReadStart+0x26a>)
 8086554:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8086556:	68fb      	ldr	r3, [r7, #12]
 8086558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808655a:	4a3e      	ldr	r2, [pc, #248]	; (8086654 <HAL_TIM_DMABurst_ReadStart+0x26e>)
 808655c:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 808655e:	68fb      	ldr	r3, [r7, #12]
 8086560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086562:	4a3a      	ldr	r2, [pc, #232]	; (808664c <HAL_TIM_DMABurst_ReadStart+0x266>)
 8086564:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 8086566:	68fb      	ldr	r3, [r7, #12]
 8086568:	6b18      	ldr	r0, [r3, #48]	; 0x30
 808656a:	68fb      	ldr	r3, [r7, #12]
 808656c:	681b      	ldr	r3, [r3, #0]
 808656e:	334c      	adds	r3, #76	; 0x4c
 8086570:	4619      	mov	r1, r3
 8086572:	683a      	ldr	r2, [r7, #0]
 8086574:	69bb      	ldr	r3, [r7, #24]
 8086576:	0a1b      	lsrs	r3, r3, #8
 8086578:	3301      	adds	r3, #1
 808657a:	f7fb fa6a 	bl	8081a52 <HAL_DMA_Start_IT>
 808657e:	4603      	mov	r3, r0
 8086580:	2b00      	cmp	r3, #0
 8086582:	d043      	beq.n	808660c <HAL_TIM_DMABurst_ReadStart+0x226>
        return HAL_ERROR;
 8086584:	2301      	movs	r3, #1
 8086586:	e059      	b.n	808663c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8086588:	68fb      	ldr	r3, [r7, #12]
 808658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808658c:	4a32      	ldr	r2, [pc, #200]	; (8086658 <HAL_TIM_DMABurst_ReadStart+0x272>)
 808658e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8086590:	68fb      	ldr	r3, [r7, #12]
 8086592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8086594:	4a31      	ldr	r2, [pc, #196]	; (808665c <HAL_TIM_DMABurst_ReadStart+0x276>)
 8086596:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8086598:	68fb      	ldr	r3, [r7, #12]
 808659a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808659c:	4a2b      	ldr	r2, [pc, #172]	; (808664c <HAL_TIM_DMABurst_ReadStart+0x266>)
 808659e:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80865a0:	68fb      	ldr	r3, [r7, #12]
 80865a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80865a4:	68fb      	ldr	r3, [r7, #12]
 80865a6:	681b      	ldr	r3, [r3, #0]
 80865a8:	334c      	adds	r3, #76	; 0x4c
 80865aa:	4619      	mov	r1, r3
 80865ac:	683a      	ldr	r2, [r7, #0]
 80865ae:	69bb      	ldr	r3, [r7, #24]
 80865b0:	0a1b      	lsrs	r3, r3, #8
 80865b2:	3301      	adds	r3, #1
 80865b4:	f7fb fa4d 	bl	8081a52 <HAL_DMA_Start_IT>
 80865b8:	4603      	mov	r3, r0
 80865ba:	2b00      	cmp	r3, #0
 80865bc:	d028      	beq.n	8086610 <HAL_TIM_DMABurst_ReadStart+0x22a>
        return HAL_ERROR;
 80865be:	2301      	movs	r3, #1
 80865c0:	e03c      	b.n	808663c <HAL_TIM_DMABurst_ReadStart+0x256>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 80865c2:	68fb      	ldr	r3, [r7, #12]
 80865c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80865c6:	4a26      	ldr	r2, [pc, #152]	; (8086660 <HAL_TIM_DMABurst_ReadStart+0x27a>)
 80865c8:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 80865ca:	68fb      	ldr	r3, [r7, #12]
 80865cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80865ce:	4a25      	ldr	r2, [pc, #148]	; (8086664 <HAL_TIM_DMABurst_ReadStart+0x27e>)
 80865d0:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 80865d2:	68fb      	ldr	r3, [r7, #12]
 80865d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80865d6:	4a1d      	ldr	r2, [pc, #116]	; (808664c <HAL_TIM_DMABurst_ReadStart+0x266>)
 80865d8:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U) != HAL_OK)
 80865da:	68fb      	ldr	r3, [r7, #12]
 80865dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80865de:	68fb      	ldr	r3, [r7, #12]
 80865e0:	681b      	ldr	r3, [r3, #0]
 80865e2:	334c      	adds	r3, #76	; 0x4c
 80865e4:	4619      	mov	r1, r3
 80865e6:	683a      	ldr	r2, [r7, #0]
 80865e8:	69bb      	ldr	r3, [r7, #24]
 80865ea:	0a1b      	lsrs	r3, r3, #8
 80865ec:	3301      	adds	r3, #1
 80865ee:	f7fb fa30 	bl	8081a52 <HAL_DMA_Start_IT>
 80865f2:	4603      	mov	r3, r0
 80865f4:	2b00      	cmp	r3, #0
 80865f6:	d00d      	beq.n	8086614 <HAL_TIM_DMABurst_ReadStart+0x22e>
        return HAL_ERROR;
 80865f8:	2301      	movs	r3, #1
 80865fa:	e01f      	b.n	808663c <HAL_TIM_DMABurst_ReadStart+0x256>
      break;
 80865fc:	bf00      	nop
 80865fe:	e00a      	b.n	8086616 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8086600:	bf00      	nop
 8086602:	e008      	b.n	8086616 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8086604:	bf00      	nop
 8086606:	e006      	b.n	8086616 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8086608:	bf00      	nop
 808660a:	e004      	b.n	8086616 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 808660c:	bf00      	nop
 808660e:	e002      	b.n	8086616 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8086610:	bf00      	nop
 8086612:	e000      	b.n	8086616 <HAL_TIM_DMABurst_ReadStart+0x230>
      break;
 8086614:	bf00      	nop
  }

  /* configure the DMA Burst Mode */
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 8086616:	68fb      	ldr	r3, [r7, #12]
 8086618:	681b      	ldr	r3, [r3, #0]
 808661a:	68b9      	ldr	r1, [r7, #8]
 808661c:	69ba      	ldr	r2, [r7, #24]
 808661e:	430a      	orrs	r2, r1
 8086620:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8086622:	68fb      	ldr	r3, [r7, #12]
 8086624:	681b      	ldr	r3, [r3, #0]
 8086626:	68d9      	ldr	r1, [r3, #12]
 8086628:	68fb      	ldr	r3, [r7, #12]
 808662a:	681b      	ldr	r3, [r3, #0]
 808662c:	687a      	ldr	r2, [r7, #4]
 808662e:	430a      	orrs	r2, r1
 8086630:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086632:	68fb      	ldr	r3, [r7, #12]
 8086634:	2201      	movs	r2, #1
 8086636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 808663a:	2300      	movs	r3, #0
}
 808663c:	4618      	mov	r0, r3
 808663e:	3710      	adds	r7, #16
 8086640:	46bd      	mov	sp, r7
 8086642:	bd80      	pop	{r7, pc}
 8086644:	08086f9d 	.word	0x08086f9d
 8086648:	08086fc1 	.word	0x08086fc1
 808664c:	08086db9 	.word	0x08086db9
 8086650:	08086ebd 	.word	0x08086ebd
 8086654:	08086f2d 	.word	0x08086f2d
 8086658:	08088d65 	.word	0x08088d65
 808665c:	08088d89 	.word	0x08088d89
 8086660:	08086fe5 	.word	0x08086fe5
 8086664:	08087009 	.word	0x08087009

08086668 <HAL_TIM_DMABurst_ReadStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8086668:	b580      	push	{r7, lr}
 808666a:	b084      	sub	sp, #16
 808666c:	af00      	add	r7, sp, #0
 808666e:	6078      	str	r0, [r7, #4]
 8086670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8086672:	2300      	movs	r3, #0
 8086674:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA stream) */
  switch (BurstRequestSrc)
 8086676:	683b      	ldr	r3, [r7, #0]
 8086678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 808667c:	d02e      	beq.n	80866dc <HAL_TIM_DMABurst_ReadStop+0x74>
 808667e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8086682:	d809      	bhi.n	8086698 <HAL_TIM_DMABurst_ReadStop+0x30>
 8086684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8086688:	d018      	beq.n	80866bc <HAL_TIM_DMABurst_ReadStop+0x54>
 808668a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 808668e:	d01d      	beq.n	80866cc <HAL_TIM_DMABurst_ReadStop+0x64>
 8086690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8086694:	d00a      	beq.n	80866ac <HAL_TIM_DMABurst_ReadStop+0x44>
    {
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
      break;
    }
    default:
      break;
 8086696:	e041      	b.n	808671c <HAL_TIM_DMABurst_ReadStop+0xb4>
  switch (BurstRequestSrc)
 8086698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808669c:	d02e      	beq.n	80866fc <HAL_TIM_DMABurst_ReadStop+0x94>
 808669e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80866a2:	d033      	beq.n	808670c <HAL_TIM_DMABurst_ReadStop+0xa4>
 80866a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80866a8:	d020      	beq.n	80866ec <HAL_TIM_DMABurst_ReadStop+0x84>
      break;
 80866aa:	e037      	b.n	808671c <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 80866ac:	687b      	ldr	r3, [r7, #4]
 80866ae:	6a1b      	ldr	r3, [r3, #32]
 80866b0:	4618      	mov	r0, r3
 80866b2:	f7fb fa9e 	bl	8081bf2 <HAL_DMA_Abort_IT>
 80866b6:	4603      	mov	r3, r0
 80866b8:	73fb      	strb	r3, [r7, #15]
      break;
 80866ba:	e02f      	b.n	808671c <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80866bc:	687b      	ldr	r3, [r7, #4]
 80866be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80866c0:	4618      	mov	r0, r3
 80866c2:	f7fb fa96 	bl	8081bf2 <HAL_DMA_Abort_IT>
 80866c6:	4603      	mov	r3, r0
 80866c8:	73fb      	strb	r3, [r7, #15]
      break;
 80866ca:	e027      	b.n	808671c <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80866cc:	687b      	ldr	r3, [r7, #4]
 80866ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80866d0:	4618      	mov	r0, r3
 80866d2:	f7fb fa8e 	bl	8081bf2 <HAL_DMA_Abort_IT>
 80866d6:	4603      	mov	r3, r0
 80866d8:	73fb      	strb	r3, [r7, #15]
      break;
 80866da:	e01f      	b.n	808671c <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80866dc:	687b      	ldr	r3, [r7, #4]
 80866de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80866e0:	4618      	mov	r0, r3
 80866e2:	f7fb fa86 	bl	8081bf2 <HAL_DMA_Abort_IT>
 80866e6:	4603      	mov	r3, r0
 80866e8:	73fb      	strb	r3, [r7, #15]
      break;
 80866ea:	e017      	b.n	808671c <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80866ec:	687b      	ldr	r3, [r7, #4]
 80866ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80866f0:	4618      	mov	r0, r3
 80866f2:	f7fb fa7e 	bl	8081bf2 <HAL_DMA_Abort_IT>
 80866f6:	4603      	mov	r3, r0
 80866f8:	73fb      	strb	r3, [r7, #15]
      break;
 80866fa:	e00f      	b.n	808671c <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 80866fc:	687b      	ldr	r3, [r7, #4]
 80866fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8086700:	4618      	mov	r0, r3
 8086702:	f7fb fa76 	bl	8081bf2 <HAL_DMA_Abort_IT>
 8086706:	4603      	mov	r3, r0
 8086708:	73fb      	strb	r3, [r7, #15]
      break;
 808670a:	e007      	b.n	808671c <HAL_TIM_DMABurst_ReadStop+0xb4>
      status = HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 808670c:	687b      	ldr	r3, [r7, #4]
 808670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086710:	4618      	mov	r0, r3
 8086712:	f7fb fa6e 	bl	8081bf2 <HAL_DMA_Abort_IT>
 8086716:	4603      	mov	r3, r0
 8086718:	73fb      	strb	r3, [r7, #15]
      break;
 808671a:	bf00      	nop
  }

  if (HAL_OK == status)
 808671c:	7bfb      	ldrb	r3, [r7, #15]
 808671e:	2b00      	cmp	r3, #0
 8086720:	d108      	bne.n	8086734 <HAL_TIM_DMABurst_ReadStop+0xcc>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8086722:	687b      	ldr	r3, [r7, #4]
 8086724:	681b      	ldr	r3, [r3, #0]
 8086726:	68d9      	ldr	r1, [r3, #12]
 8086728:	683b      	ldr	r3, [r7, #0]
 808672a:	43da      	mvns	r2, r3
 808672c:	687b      	ldr	r3, [r7, #4]
 808672e:	681b      	ldr	r3, [r3, #0]
 8086730:	400a      	ands	r2, r1
 8086732:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 8086734:	7bfb      	ldrb	r3, [r7, #15]
}
 8086736:	4618      	mov	r0, r3
 8086738:	3710      	adds	r7, #16
 808673a:	46bd      	mov	sp, r7
 808673c:	bd80      	pop	{r7, pc}

0808673e <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 808673e:	b480      	push	{r7}
 8086740:	b083      	sub	sp, #12
 8086742:	af00      	add	r7, sp, #0
 8086744:	6078      	str	r0, [r7, #4]
 8086746:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8086748:	687b      	ldr	r3, [r7, #4]
 808674a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 808674e:	2b01      	cmp	r3, #1
 8086750:	d101      	bne.n	8086756 <HAL_TIM_GenerateEvent+0x18>
 8086752:	2302      	movs	r3, #2
 8086754:	e014      	b.n	8086780 <HAL_TIM_GenerateEvent+0x42>
 8086756:	687b      	ldr	r3, [r7, #4]
 8086758:	2201      	movs	r2, #1
 808675a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 808675e:	687b      	ldr	r3, [r7, #4]
 8086760:	2202      	movs	r2, #2
 8086762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8086766:	687b      	ldr	r3, [r7, #4]
 8086768:	681b      	ldr	r3, [r3, #0]
 808676a:	683a      	ldr	r2, [r7, #0]
 808676c:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 808676e:	687b      	ldr	r3, [r7, #4]
 8086770:	2201      	movs	r2, #1
 8086772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8086776:	687b      	ldr	r3, [r7, #4]
 8086778:	2200      	movs	r2, #0
 808677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 808677e:	2300      	movs	r3, #0
}
 8086780:	4618      	mov	r0, r3
 8086782:	370c      	adds	r7, #12
 8086784:	46bd      	mov	sp, r7
 8086786:	f85d 7b04 	ldr.w	r7, [sp], #4
 808678a:	4770      	bx	lr

0808678c <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 808678c:	b580      	push	{r7, lr}
 808678e:	b084      	sub	sp, #16
 8086790:	af00      	add	r7, sp, #0
 8086792:	60f8      	str	r0, [r7, #12]
 8086794:	60b9      	str	r1, [r7, #8]
 8086796:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8086798:	68fb      	ldr	r3, [r7, #12]
 808679a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 808679e:	2b01      	cmp	r3, #1
 80867a0:	d101      	bne.n	80867a6 <HAL_TIM_ConfigOCrefClear+0x1a>
 80867a2:	2302      	movs	r3, #2
 80867a4:	e0b2      	b.n	808690c <HAL_TIM_ConfigOCrefClear+0x180>
 80867a6:	68fb      	ldr	r3, [r7, #12]
 80867a8:	2201      	movs	r2, #1
 80867aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80867ae:	68fb      	ldr	r3, [r7, #12]
 80867b0:	2202      	movs	r2, #2
 80867b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (sClearInputConfig->ClearInputSource)
 80867b6:	68bb      	ldr	r3, [r7, #8]
 80867b8:	685b      	ldr	r3, [r3, #4]
 80867ba:	2b00      	cmp	r3, #0
 80867bc:	d002      	beq.n	80867c4 <HAL_TIM_ConfigOCrefClear+0x38>
 80867be:	2b01      	cmp	r3, #1
 80867c0:	d009      	beq.n	80867d6 <HAL_TIM_ConfigOCrefClear+0x4a>
                        sClearInputConfig->ClearInputFilter);
      break;
    }

    default:
      break;
 80867c2:	e021      	b.n	8086808 <HAL_TIM_ConfigOCrefClear+0x7c>
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 80867c4:	68fb      	ldr	r3, [r7, #12]
 80867c6:	681b      	ldr	r3, [r3, #0]
 80867c8:	689a      	ldr	r2, [r3, #8]
 80867ca:	68fb      	ldr	r3, [r7, #12]
 80867cc:	681b      	ldr	r3, [r3, #0]
 80867ce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80867d2:	609a      	str	r2, [r3, #8]
      break;
 80867d4:	e018      	b.n	8086808 <HAL_TIM_ConfigOCrefClear+0x7c>
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 80867d6:	68bb      	ldr	r3, [r7, #8]
 80867d8:	68db      	ldr	r3, [r3, #12]
 80867da:	2b00      	cmp	r3, #0
 80867dc:	d009      	beq.n	80867f2 <HAL_TIM_ConfigOCrefClear+0x66>
          htim->State = HAL_TIM_STATE_READY;
 80867de:	68fb      	ldr	r3, [r7, #12]
 80867e0:	2201      	movs	r2, #1
 80867e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        __HAL_UNLOCK(htim);
 80867e6:	68fb      	ldr	r3, [r7, #12]
 80867e8:	2200      	movs	r2, #0
 80867ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80867ee:	2301      	movs	r3, #1
 80867f0:	e08c      	b.n	808690c <HAL_TIM_ConfigOCrefClear+0x180>
      TIM_ETR_SetConfig(htim->Instance,
 80867f2:	68fb      	ldr	r3, [r7, #12]
 80867f4:	6818      	ldr	r0, [r3, #0]
 80867f6:	68bb      	ldr	r3, [r7, #8]
 80867f8:	68d9      	ldr	r1, [r3, #12]
 80867fa:	68bb      	ldr	r3, [r7, #8]
 80867fc:	689a      	ldr	r2, [r3, #8]
 80867fe:	68bb      	ldr	r3, [r7, #8]
 8086800:	691b      	ldr	r3, [r3, #16]
 8086802:	f001 f88d 	bl	8087920 <TIM_ETR_SetConfig>
      break;
 8086806:	bf00      	nop
  }

  switch (Channel)
 8086808:	687b      	ldr	r3, [r7, #4]
 808680a:	2b0c      	cmp	r3, #12
 808680c:	d874      	bhi.n	80868f8 <HAL_TIM_ConfigOCrefClear+0x16c>
 808680e:	a201      	add	r2, pc, #4	; (adr r2, 8086814 <HAL_TIM_ConfigOCrefClear+0x88>)
 8086810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8086814:	08086849 	.word	0x08086849
 8086818:	080868f9 	.word	0x080868f9
 808681c:	080868f9 	.word	0x080868f9
 8086820:	080868f9 	.word	0x080868f9
 8086824:	08086875 	.word	0x08086875
 8086828:	080868f9 	.word	0x080868f9
 808682c:	080868f9 	.word	0x080868f9
 8086830:	080868f9 	.word	0x080868f9
 8086834:	080868a1 	.word	0x080868a1
 8086838:	080868f9 	.word	0x080868f9
 808683c:	080868f9 	.word	0x080868f9
 8086840:	080868f9 	.word	0x080868f9
 8086844:	080868cd 	.word	0x080868cd
  {
    case TIM_CHANNEL_1:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8086848:	68bb      	ldr	r3, [r7, #8]
 808684a:	681b      	ldr	r3, [r3, #0]
 808684c:	2b00      	cmp	r3, #0
 808684e:	d008      	beq.n	8086862 <HAL_TIM_ConfigOCrefClear+0xd6>
      {
        /* Enable the OCREF clear feature for Channel 1 */
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8086850:	68fb      	ldr	r3, [r7, #12]
 8086852:	681b      	ldr	r3, [r3, #0]
 8086854:	699a      	ldr	r2, [r3, #24]
 8086856:	68fb      	ldr	r3, [r7, #12]
 8086858:	681b      	ldr	r3, [r3, #0]
 808685a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 808685e:	619a      	str	r2, [r3, #24]
      else
      {
        /* Disable the OCREF clear feature for Channel 1 */
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
      }
      break;
 8086860:	e04b      	b.n	80868fa <HAL_TIM_ConfigOCrefClear+0x16e>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8086862:	68fb      	ldr	r3, [r7, #12]
 8086864:	681b      	ldr	r3, [r3, #0]
 8086866:	699a      	ldr	r2, [r3, #24]
 8086868:	68fb      	ldr	r3, [r7, #12]
 808686a:	681b      	ldr	r3, [r3, #0]
 808686c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8086870:	619a      	str	r2, [r3, #24]
      break;
 8086872:	e042      	b.n	80868fa <HAL_TIM_ConfigOCrefClear+0x16e>
    }
    case TIM_CHANNEL_2:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8086874:	68bb      	ldr	r3, [r7, #8]
 8086876:	681b      	ldr	r3, [r3, #0]
 8086878:	2b00      	cmp	r3, #0
 808687a:	d008      	beq.n	808688e <HAL_TIM_ConfigOCrefClear+0x102>
      {
        /* Enable the OCREF clear feature for Channel 2 */
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 808687c:	68fb      	ldr	r3, [r7, #12]
 808687e:	681b      	ldr	r3, [r3, #0]
 8086880:	699a      	ldr	r2, [r3, #24]
 8086882:	68fb      	ldr	r3, [r7, #12]
 8086884:	681b      	ldr	r3, [r3, #0]
 8086886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 808688a:	619a      	str	r2, [r3, #24]
      else
      {
        /* Disable the OCREF clear feature for Channel 2 */
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
      }
      break;
 808688c:	e035      	b.n	80868fa <HAL_TIM_ConfigOCrefClear+0x16e>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 808688e:	68fb      	ldr	r3, [r7, #12]
 8086890:	681b      	ldr	r3, [r3, #0]
 8086892:	699a      	ldr	r2, [r3, #24]
 8086894:	68fb      	ldr	r3, [r7, #12]
 8086896:	681b      	ldr	r3, [r3, #0]
 8086898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 808689c:	619a      	str	r2, [r3, #24]
      break;
 808689e:	e02c      	b.n	80868fa <HAL_TIM_ConfigOCrefClear+0x16e>
    }
    case TIM_CHANNEL_3:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80868a0:	68bb      	ldr	r3, [r7, #8]
 80868a2:	681b      	ldr	r3, [r3, #0]
 80868a4:	2b00      	cmp	r3, #0
 80868a6:	d008      	beq.n	80868ba <HAL_TIM_ConfigOCrefClear+0x12e>
      {
        /* Enable the OCREF clear feature for Channel 3 */
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 80868a8:	68fb      	ldr	r3, [r7, #12]
 80868aa:	681b      	ldr	r3, [r3, #0]
 80868ac:	69da      	ldr	r2, [r3, #28]
 80868ae:	68fb      	ldr	r3, [r7, #12]
 80868b0:	681b      	ldr	r3, [r3, #0]
 80868b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80868b6:	61da      	str	r2, [r3, #28]
      else
      {
        /* Disable the OCREF clear feature for Channel 3 */
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
      }
      break;
 80868b8:	e01f      	b.n	80868fa <HAL_TIM_ConfigOCrefClear+0x16e>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 80868ba:	68fb      	ldr	r3, [r7, #12]
 80868bc:	681b      	ldr	r3, [r3, #0]
 80868be:	69da      	ldr	r2, [r3, #28]
 80868c0:	68fb      	ldr	r3, [r7, #12]
 80868c2:	681b      	ldr	r3, [r3, #0]
 80868c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80868c8:	61da      	str	r2, [r3, #28]
      break;
 80868ca:	e016      	b.n	80868fa <HAL_TIM_ConfigOCrefClear+0x16e>
    }
    case TIM_CHANNEL_4:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80868cc:	68bb      	ldr	r3, [r7, #8]
 80868ce:	681b      	ldr	r3, [r3, #0]
 80868d0:	2b00      	cmp	r3, #0
 80868d2:	d008      	beq.n	80868e6 <HAL_TIM_ConfigOCrefClear+0x15a>
      {
        /* Enable the OCREF clear feature for Channel 4 */
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 80868d4:	68fb      	ldr	r3, [r7, #12]
 80868d6:	681b      	ldr	r3, [r3, #0]
 80868d8:	69da      	ldr	r2, [r3, #28]
 80868da:	68fb      	ldr	r3, [r7, #12]
 80868dc:	681b      	ldr	r3, [r3, #0]
 80868de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80868e2:	61da      	str	r2, [r3, #28]
      else
      {
        /* Disable the OCREF clear feature for Channel 4 */
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
      }
      break;
 80868e4:	e009      	b.n	80868fa <HAL_TIM_ConfigOCrefClear+0x16e>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 80868e6:	68fb      	ldr	r3, [r7, #12]
 80868e8:	681b      	ldr	r3, [r3, #0]
 80868ea:	69da      	ldr	r2, [r3, #28]
 80868ec:	68fb      	ldr	r3, [r7, #12]
 80868ee:	681b      	ldr	r3, [r3, #0]
 80868f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80868f4:	61da      	str	r2, [r3, #28]
      break;
 80868f6:	e000      	b.n	80868fa <HAL_TIM_ConfigOCrefClear+0x16e>
    }
    default:
      break;
 80868f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80868fa:	68fb      	ldr	r3, [r7, #12]
 80868fc:	2201      	movs	r2, #1
 80868fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8086902:	68fb      	ldr	r3, [r7, #12]
 8086904:	2200      	movs	r2, #0
 8086906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 808690a:	2300      	movs	r3, #0
}
 808690c:	4618      	mov	r0, r3
 808690e:	3710      	adds	r7, #16
 8086910:	46bd      	mov	sp, r7
 8086912:	bd80      	pop	{r7, pc}

08086914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8086914:	b580      	push	{r7, lr}
 8086916:	b084      	sub	sp, #16
 8086918:	af00      	add	r7, sp, #0
 808691a:	6078      	str	r0, [r7, #4]
 808691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 808691e:	687b      	ldr	r3, [r7, #4]
 8086920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8086924:	2b01      	cmp	r3, #1
 8086926:	d101      	bne.n	808692c <HAL_TIM_ConfigClockSource+0x18>
 8086928:	2302      	movs	r3, #2
 808692a:	e0a6      	b.n	8086a7a <HAL_TIM_ConfigClockSource+0x166>
 808692c:	687b      	ldr	r3, [r7, #4]
 808692e:	2201      	movs	r2, #1
 8086930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8086934:	687b      	ldr	r3, [r7, #4]
 8086936:	2202      	movs	r2, #2
 8086938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 808693c:	687b      	ldr	r3, [r7, #4]
 808693e:	681b      	ldr	r3, [r3, #0]
 8086940:	689b      	ldr	r3, [r3, #8]
 8086942:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8086944:	68fb      	ldr	r3, [r7, #12]
 8086946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 808694a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 808694c:	68fb      	ldr	r3, [r7, #12]
 808694e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8086952:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8086954:	687b      	ldr	r3, [r7, #4]
 8086956:	681b      	ldr	r3, [r3, #0]
 8086958:	68fa      	ldr	r2, [r7, #12]
 808695a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 808695c:	683b      	ldr	r3, [r7, #0]
 808695e:	681b      	ldr	r3, [r3, #0]
 8086960:	2b40      	cmp	r3, #64	; 0x40
 8086962:	d067      	beq.n	8086a34 <HAL_TIM_ConfigClockSource+0x120>
 8086964:	2b40      	cmp	r3, #64	; 0x40
 8086966:	d80b      	bhi.n	8086980 <HAL_TIM_ConfigClockSource+0x6c>
 8086968:	2b10      	cmp	r3, #16
 808696a:	d073      	beq.n	8086a54 <HAL_TIM_ConfigClockSource+0x140>
 808696c:	2b10      	cmp	r3, #16
 808696e:	d802      	bhi.n	8086976 <HAL_TIM_ConfigClockSource+0x62>
 8086970:	2b00      	cmp	r3, #0
 8086972:	d06f      	beq.n	8086a54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8086974:	e078      	b.n	8086a68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8086976:	2b20      	cmp	r3, #32
 8086978:	d06c      	beq.n	8086a54 <HAL_TIM_ConfigClockSource+0x140>
 808697a:	2b30      	cmp	r3, #48	; 0x30
 808697c:	d06a      	beq.n	8086a54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 808697e:	e073      	b.n	8086a68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8086980:	2b70      	cmp	r3, #112	; 0x70
 8086982:	d00d      	beq.n	80869a0 <HAL_TIM_ConfigClockSource+0x8c>
 8086984:	2b70      	cmp	r3, #112	; 0x70
 8086986:	d804      	bhi.n	8086992 <HAL_TIM_ConfigClockSource+0x7e>
 8086988:	2b50      	cmp	r3, #80	; 0x50
 808698a:	d033      	beq.n	80869f4 <HAL_TIM_ConfigClockSource+0xe0>
 808698c:	2b60      	cmp	r3, #96	; 0x60
 808698e:	d041      	beq.n	8086a14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8086990:	e06a      	b.n	8086a68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8086992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8086996:	d066      	beq.n	8086a66 <HAL_TIM_ConfigClockSource+0x152>
 8086998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808699c:	d017      	beq.n	80869ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 808699e:	e063      	b.n	8086a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80869a0:	687b      	ldr	r3, [r7, #4]
 80869a2:	6818      	ldr	r0, [r3, #0]
 80869a4:	683b      	ldr	r3, [r7, #0]
 80869a6:	6899      	ldr	r1, [r3, #8]
 80869a8:	683b      	ldr	r3, [r7, #0]
 80869aa:	685a      	ldr	r2, [r3, #4]
 80869ac:	683b      	ldr	r3, [r7, #0]
 80869ae:	68db      	ldr	r3, [r3, #12]
 80869b0:	f000 ffb6 	bl	8087920 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80869b4:	687b      	ldr	r3, [r7, #4]
 80869b6:	681b      	ldr	r3, [r3, #0]
 80869b8:	689b      	ldr	r3, [r3, #8]
 80869ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80869bc:	68fb      	ldr	r3, [r7, #12]
 80869be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80869c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80869c4:	687b      	ldr	r3, [r7, #4]
 80869c6:	681b      	ldr	r3, [r3, #0]
 80869c8:	68fa      	ldr	r2, [r7, #12]
 80869ca:	609a      	str	r2, [r3, #8]
      break;
 80869cc:	e04c      	b.n	8086a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80869ce:	687b      	ldr	r3, [r7, #4]
 80869d0:	6818      	ldr	r0, [r3, #0]
 80869d2:	683b      	ldr	r3, [r7, #0]
 80869d4:	6899      	ldr	r1, [r3, #8]
 80869d6:	683b      	ldr	r3, [r7, #0]
 80869d8:	685a      	ldr	r2, [r3, #4]
 80869da:	683b      	ldr	r3, [r7, #0]
 80869dc:	68db      	ldr	r3, [r3, #12]
 80869de:	f000 ff9f 	bl	8087920 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80869e2:	687b      	ldr	r3, [r7, #4]
 80869e4:	681b      	ldr	r3, [r3, #0]
 80869e6:	689a      	ldr	r2, [r3, #8]
 80869e8:	687b      	ldr	r3, [r7, #4]
 80869ea:	681b      	ldr	r3, [r3, #0]
 80869ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80869f0:	609a      	str	r2, [r3, #8]
      break;
 80869f2:	e039      	b.n	8086a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80869f4:	687b      	ldr	r3, [r7, #4]
 80869f6:	6818      	ldr	r0, [r3, #0]
 80869f8:	683b      	ldr	r3, [r7, #0]
 80869fa:	6859      	ldr	r1, [r3, #4]
 80869fc:	683b      	ldr	r3, [r7, #0]
 80869fe:	68db      	ldr	r3, [r3, #12]
 8086a00:	461a      	mov	r2, r3
 8086a02:	f000 fe5d 	bl	80876c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8086a06:	687b      	ldr	r3, [r7, #4]
 8086a08:	681b      	ldr	r3, [r3, #0]
 8086a0a:	2150      	movs	r1, #80	; 0x50
 8086a0c:	4618      	mov	r0, r3
 8086a0e:	f000 ff6c 	bl	80878ea <TIM_ITRx_SetConfig>
      break;
 8086a12:	e029      	b.n	8086a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8086a14:	687b      	ldr	r3, [r7, #4]
 8086a16:	6818      	ldr	r0, [r3, #0]
 8086a18:	683b      	ldr	r3, [r7, #0]
 8086a1a:	6859      	ldr	r1, [r3, #4]
 8086a1c:	683b      	ldr	r3, [r7, #0]
 8086a1e:	68db      	ldr	r3, [r3, #12]
 8086a20:	461a      	mov	r2, r3
 8086a22:	f000 feb9 	bl	8087798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8086a26:	687b      	ldr	r3, [r7, #4]
 8086a28:	681b      	ldr	r3, [r3, #0]
 8086a2a:	2160      	movs	r1, #96	; 0x60
 8086a2c:	4618      	mov	r0, r3
 8086a2e:	f000 ff5c 	bl	80878ea <TIM_ITRx_SetConfig>
      break;
 8086a32:	e019      	b.n	8086a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8086a34:	687b      	ldr	r3, [r7, #4]
 8086a36:	6818      	ldr	r0, [r3, #0]
 8086a38:	683b      	ldr	r3, [r7, #0]
 8086a3a:	6859      	ldr	r1, [r3, #4]
 8086a3c:	683b      	ldr	r3, [r7, #0]
 8086a3e:	68db      	ldr	r3, [r3, #12]
 8086a40:	461a      	mov	r2, r3
 8086a42:	f000 fe3d 	bl	80876c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8086a46:	687b      	ldr	r3, [r7, #4]
 8086a48:	681b      	ldr	r3, [r3, #0]
 8086a4a:	2140      	movs	r1, #64	; 0x40
 8086a4c:	4618      	mov	r0, r3
 8086a4e:	f000 ff4c 	bl	80878ea <TIM_ITRx_SetConfig>
      break;
 8086a52:	e009      	b.n	8086a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8086a54:	687b      	ldr	r3, [r7, #4]
 8086a56:	681a      	ldr	r2, [r3, #0]
 8086a58:	683b      	ldr	r3, [r7, #0]
 8086a5a:	681b      	ldr	r3, [r3, #0]
 8086a5c:	4619      	mov	r1, r3
 8086a5e:	4610      	mov	r0, r2
 8086a60:	f000 ff43 	bl	80878ea <TIM_ITRx_SetConfig>
      break;
 8086a64:	e000      	b.n	8086a68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8086a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8086a68:	687b      	ldr	r3, [r7, #4]
 8086a6a:	2201      	movs	r2, #1
 8086a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8086a70:	687b      	ldr	r3, [r7, #4]
 8086a72:	2200      	movs	r2, #0
 8086a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8086a78:	2300      	movs	r3, #0
}
 8086a7a:	4618      	mov	r0, r3
 8086a7c:	3710      	adds	r7, #16
 8086a7e:	46bd      	mov	sp, r7
 8086a80:	bd80      	pop	{r7, pc}

08086a82 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 8086a82:	b480      	push	{r7}
 8086a84:	b085      	sub	sp, #20
 8086a86:	af00      	add	r7, sp, #0
 8086a88:	6078      	str	r0, [r7, #4]
 8086a8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8086a8c:	687b      	ldr	r3, [r7, #4]
 8086a8e:	681b      	ldr	r3, [r3, #0]
 8086a90:	685b      	ldr	r3, [r3, #4]
 8086a92:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 8086a94:	68fb      	ldr	r3, [r7, #12]
 8086a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8086a9a:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 8086a9c:	68fa      	ldr	r2, [r7, #12]
 8086a9e:	683b      	ldr	r3, [r7, #0]
 8086aa0:	4313      	orrs	r3, r2
 8086aa2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 8086aa4:	687b      	ldr	r3, [r7, #4]
 8086aa6:	681b      	ldr	r3, [r3, #0]
 8086aa8:	68fa      	ldr	r2, [r7, #12]
 8086aaa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8086aac:	2300      	movs	r3, #0
}
 8086aae:	4618      	mov	r0, r3
 8086ab0:	3714      	adds	r7, #20
 8086ab2:	46bd      	mov	sp, r7
 8086ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086ab8:	4770      	bx	lr

08086aba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8086aba:	b580      	push	{r7, lr}
 8086abc:	b082      	sub	sp, #8
 8086abe:	af00      	add	r7, sp, #0
 8086ac0:	6078      	str	r0, [r7, #4]
 8086ac2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8086ac4:	687b      	ldr	r3, [r7, #4]
 8086ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8086aca:	2b01      	cmp	r3, #1
 8086acc:	d101      	bne.n	8086ad2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8086ace:	2302      	movs	r3, #2
 8086ad0:	e031      	b.n	8086b36 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8086ad2:	687b      	ldr	r3, [r7, #4]
 8086ad4:	2201      	movs	r2, #1
 8086ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8086ada:	687b      	ldr	r3, [r7, #4]
 8086adc:	2202      	movs	r2, #2
 8086ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8086ae2:	6839      	ldr	r1, [r7, #0]
 8086ae4:	6878      	ldr	r0, [r7, #4]
 8086ae6:	f000 fcf1 	bl	80874cc <TIM_SlaveTimer_SetConfig>
 8086aea:	4603      	mov	r3, r0
 8086aec:	2b00      	cmp	r3, #0
 8086aee:	d009      	beq.n	8086b04 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
      htim->State = HAL_TIM_STATE_READY;
 8086af0:	687b      	ldr	r3, [r7, #4]
 8086af2:	2201      	movs	r2, #1
 8086af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8086af8:	687b      	ldr	r3, [r7, #4]
 8086afa:	2200      	movs	r2, #0
 8086afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8086b00:	2301      	movs	r3, #1
 8086b02:	e018      	b.n	8086b36 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8086b04:	687b      	ldr	r3, [r7, #4]
 8086b06:	681b      	ldr	r3, [r3, #0]
 8086b08:	68da      	ldr	r2, [r3, #12]
 8086b0a:	687b      	ldr	r3, [r7, #4]
 8086b0c:	681b      	ldr	r3, [r3, #0]
 8086b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8086b12:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8086b14:	687b      	ldr	r3, [r7, #4]
 8086b16:	681b      	ldr	r3, [r3, #0]
 8086b18:	68da      	ldr	r2, [r3, #12]
 8086b1a:	687b      	ldr	r3, [r7, #4]
 8086b1c:	681b      	ldr	r3, [r3, #0]
 8086b1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8086b22:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086b24:	687b      	ldr	r3, [r7, #4]
 8086b26:	2201      	movs	r2, #1
 8086b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8086b2c:	687b      	ldr	r3, [r7, #4]
 8086b2e:	2200      	movs	r2, #0
 8086b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8086b34:	2300      	movs	r3, #0
}
 8086b36:	4618      	mov	r0, r3
 8086b38:	3708      	adds	r7, #8
 8086b3a:	46bd      	mov	sp, r7
 8086b3c:	bd80      	pop	{r7, pc}

08086b3e <HAL_TIM_SlaveConfigSynchro_IT>:
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim,
                                                        TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8086b3e:	b580      	push	{r7, lr}
 8086b40:	b082      	sub	sp, #8
 8086b42:	af00      	add	r7, sp, #0
 8086b44:	6078      	str	r0, [r7, #4]
 8086b46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8086b48:	687b      	ldr	r3, [r7, #4]
 8086b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8086b4e:	2b01      	cmp	r3, #1
 8086b50:	d101      	bne.n	8086b56 <HAL_TIM_SlaveConfigSynchro_IT+0x18>
 8086b52:	2302      	movs	r3, #2
 8086b54:	e031      	b.n	8086bba <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
 8086b56:	687b      	ldr	r3, [r7, #4]
 8086b58:	2201      	movs	r2, #1
 8086b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8086b5e:	687b      	ldr	r3, [r7, #4]
 8086b60:	2202      	movs	r2, #2
 8086b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8086b66:	6839      	ldr	r1, [r7, #0]
 8086b68:	6878      	ldr	r0, [r7, #4]
 8086b6a:	f000 fcaf 	bl	80874cc <TIM_SlaveTimer_SetConfig>
 8086b6e:	4603      	mov	r3, r0
 8086b70:	2b00      	cmp	r3, #0
 8086b72:	d009      	beq.n	8086b88 <HAL_TIM_SlaveConfigSynchro_IT+0x4a>
  {
      htim->State = HAL_TIM_STATE_READY;
 8086b74:	687b      	ldr	r3, [r7, #4]
 8086b76:	2201      	movs	r2, #1
 8086b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8086b7c:	687b      	ldr	r3, [r7, #4]
 8086b7e:	2200      	movs	r2, #0
 8086b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8086b84:	2301      	movs	r3, #1
 8086b86:	e018      	b.n	8086bba <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
  }

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 8086b88:	687b      	ldr	r3, [r7, #4]
 8086b8a:	681b      	ldr	r3, [r3, #0]
 8086b8c:	68da      	ldr	r2, [r3, #12]
 8086b8e:	687b      	ldr	r3, [r7, #4]
 8086b90:	681b      	ldr	r3, [r3, #0]
 8086b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8086b96:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8086b98:	687b      	ldr	r3, [r7, #4]
 8086b9a:	681b      	ldr	r3, [r3, #0]
 8086b9c:	68da      	ldr	r2, [r3, #12]
 8086b9e:	687b      	ldr	r3, [r7, #4]
 8086ba0:	681b      	ldr	r3, [r3, #0]
 8086ba2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8086ba6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086ba8:	687b      	ldr	r3, [r7, #4]
 8086baa:	2201      	movs	r2, #1
 8086bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8086bb0:	687b      	ldr	r3, [r7, #4]
 8086bb2:	2200      	movs	r2, #0
 8086bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8086bb8:	2300      	movs	r3, #0
}
 8086bba:	4618      	mov	r0, r3
 8086bbc:	3708      	adds	r7, #8
 8086bbe:	46bd      	mov	sp, r7
 8086bc0:	bd80      	pop	{r7, pc}

08086bc2 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8086bc2:	b480      	push	{r7}
 8086bc4:	b085      	sub	sp, #20
 8086bc6:	af00      	add	r7, sp, #0
 8086bc8:	6078      	str	r0, [r7, #4]
 8086bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8086bcc:	2300      	movs	r3, #0
 8086bce:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8086bd0:	683b      	ldr	r3, [r7, #0]
 8086bd2:	2b0c      	cmp	r3, #12
 8086bd4:	d830      	bhi.n	8086c38 <HAL_TIM_ReadCapturedValue+0x76>
 8086bd6:	a201      	add	r2, pc, #4	; (adr r2, 8086bdc <HAL_TIM_ReadCapturedValue+0x1a>)
 8086bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8086bdc:	08086c11 	.word	0x08086c11
 8086be0:	08086c39 	.word	0x08086c39
 8086be4:	08086c39 	.word	0x08086c39
 8086be8:	08086c39 	.word	0x08086c39
 8086bec:	08086c1b 	.word	0x08086c1b
 8086bf0:	08086c39 	.word	0x08086c39
 8086bf4:	08086c39 	.word	0x08086c39
 8086bf8:	08086c39 	.word	0x08086c39
 8086bfc:	08086c25 	.word	0x08086c25
 8086c00:	08086c39 	.word	0x08086c39
 8086c04:	08086c39 	.word	0x08086c39
 8086c08:	08086c39 	.word	0x08086c39
 8086c0c:	08086c2f 	.word	0x08086c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8086c10:	687b      	ldr	r3, [r7, #4]
 8086c12:	681b      	ldr	r3, [r3, #0]
 8086c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8086c16:	60fb      	str	r3, [r7, #12]

      break;
 8086c18:	e00f      	b.n	8086c3a <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8086c1a:	687b      	ldr	r3, [r7, #4]
 8086c1c:	681b      	ldr	r3, [r3, #0]
 8086c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086c20:	60fb      	str	r3, [r7, #12]

      break;
 8086c22:	e00a      	b.n	8086c3a <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8086c24:	687b      	ldr	r3, [r7, #4]
 8086c26:	681b      	ldr	r3, [r3, #0]
 8086c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8086c2a:	60fb      	str	r3, [r7, #12]

      break;
 8086c2c:	e005      	b.n	8086c3a <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8086c2e:	687b      	ldr	r3, [r7, #4]
 8086c30:	681b      	ldr	r3, [r3, #0]
 8086c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8086c34:	60fb      	str	r3, [r7, #12]

      break;
 8086c36:	e000      	b.n	8086c3a <HAL_TIM_ReadCapturedValue+0x78>
    }

    default:
      break;
 8086c38:	bf00      	nop
  }

  return tmpreg;
 8086c3a:	68fb      	ldr	r3, [r7, #12]
}
 8086c3c:	4618      	mov	r0, r3
 8086c3e:	3714      	adds	r7, #20
 8086c40:	46bd      	mov	sp, r7
 8086c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086c46:	4770      	bx	lr

08086c48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8086c48:	b480      	push	{r7}
 8086c4a:	b083      	sub	sp, #12
 8086c4c:	af00      	add	r7, sp, #0
 8086c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8086c50:	bf00      	nop
 8086c52:	370c      	adds	r7, #12
 8086c54:	46bd      	mov	sp, r7
 8086c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086c5a:	4770      	bx	lr

08086c5c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8086c5c:	b480      	push	{r7}
 8086c5e:	b083      	sub	sp, #12
 8086c60:	af00      	add	r7, sp, #0
 8086c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8086c64:	bf00      	nop
 8086c66:	370c      	adds	r7, #12
 8086c68:	46bd      	mov	sp, r7
 8086c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086c6e:	4770      	bx	lr

08086c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8086c70:	b480      	push	{r7}
 8086c72:	b083      	sub	sp, #12
 8086c74:	af00      	add	r7, sp, #0
 8086c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8086c78:	bf00      	nop
 8086c7a:	370c      	adds	r7, #12
 8086c7c:	46bd      	mov	sp, r7
 8086c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086c82:	4770      	bx	lr

08086c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8086c84:	b480      	push	{r7}
 8086c86:	b083      	sub	sp, #12
 8086c88:	af00      	add	r7, sp, #0
 8086c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8086c8c:	bf00      	nop
 8086c8e:	370c      	adds	r7, #12
 8086c90:	46bd      	mov	sp, r7
 8086c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086c96:	4770      	bx	lr

08086c98 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8086c98:	b480      	push	{r7}
 8086c9a:	b083      	sub	sp, #12
 8086c9c:	af00      	add	r7, sp, #0
 8086c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8086ca0:	bf00      	nop
 8086ca2:	370c      	adds	r7, #12
 8086ca4:	46bd      	mov	sp, r7
 8086ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086caa:	4770      	bx	lr

08086cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8086cac:	b480      	push	{r7}
 8086cae:	b083      	sub	sp, #12
 8086cb0:	af00      	add	r7, sp, #0
 8086cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8086cb4:	bf00      	nop
 8086cb6:	370c      	adds	r7, #12
 8086cb8:	46bd      	mov	sp, r7
 8086cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086cbe:	4770      	bx	lr

08086cc0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8086cc0:	b480      	push	{r7}
 8086cc2:	b083      	sub	sp, #12
 8086cc4:	af00      	add	r7, sp, #0
 8086cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8086cc8:	bf00      	nop
 8086cca:	370c      	adds	r7, #12
 8086ccc:	46bd      	mov	sp, r7
 8086cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086cd2:	4770      	bx	lr

08086cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8086cd4:	b480      	push	{r7}
 8086cd6:	b083      	sub	sp, #12
 8086cd8:	af00      	add	r7, sp, #0
 8086cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8086cdc:	bf00      	nop
 8086cde:	370c      	adds	r7, #12
 8086ce0:	46bd      	mov	sp, r7
 8086ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086ce6:	4770      	bx	lr

08086ce8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8086ce8:	b480      	push	{r7}
 8086cea:	b083      	sub	sp, #12
 8086cec:	af00      	add	r7, sp, #0
 8086cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8086cf0:	bf00      	nop
 8086cf2:	370c      	adds	r7, #12
 8086cf4:	46bd      	mov	sp, r7
 8086cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086cfa:	4770      	bx	lr

08086cfc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8086cfc:	b480      	push	{r7}
 8086cfe:	b083      	sub	sp, #12
 8086d00:	af00      	add	r7, sp, #0
 8086d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8086d04:	bf00      	nop
 8086d06:	370c      	adds	r7, #12
 8086d08:	46bd      	mov	sp, r7
 8086d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086d0e:	4770      	bx	lr

08086d10 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8086d10:	b480      	push	{r7}
 8086d12:	b083      	sub	sp, #12
 8086d14:	af00      	add	r7, sp, #0
 8086d16:	6078      	str	r0, [r7, #4]
  return htim->State;
 8086d18:	687b      	ldr	r3, [r7, #4]
 8086d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8086d1e:	b2db      	uxtb	r3, r3
}
 8086d20:	4618      	mov	r0, r3
 8086d22:	370c      	adds	r7, #12
 8086d24:	46bd      	mov	sp, r7
 8086d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086d2a:	4770      	bx	lr

08086d2c <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC handle state.
  * @param  htim TIM Output Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 8086d2c:	b480      	push	{r7}
 8086d2e:	b083      	sub	sp, #12
 8086d30:	af00      	add	r7, sp, #0
 8086d32:	6078      	str	r0, [r7, #4]
  return htim->State;
 8086d34:	687b      	ldr	r3, [r7, #4]
 8086d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8086d3a:	b2db      	uxtb	r3, r3
}
 8086d3c:	4618      	mov	r0, r3
 8086d3e:	370c      	adds	r7, #12
 8086d40:	46bd      	mov	sp, r7
 8086d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086d46:	4770      	bx	lr

08086d48 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 8086d48:	b480      	push	{r7}
 8086d4a:	b083      	sub	sp, #12
 8086d4c:	af00      	add	r7, sp, #0
 8086d4e:	6078      	str	r0, [r7, #4]
  return htim->State;
 8086d50:	687b      	ldr	r3, [r7, #4]
 8086d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8086d56:	b2db      	uxtb	r3, r3
}
 8086d58:	4618      	mov	r0, r3
 8086d5a:	370c      	adds	r7, #12
 8086d5c:	46bd      	mov	sp, r7
 8086d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086d62:	4770      	bx	lr

08086d64 <HAL_TIM_IC_GetState>:
  * @brief  Return the TIM Input Capture handle state.
  * @param  htim TIM IC handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
{
 8086d64:	b480      	push	{r7}
 8086d66:	b083      	sub	sp, #12
 8086d68:	af00      	add	r7, sp, #0
 8086d6a:	6078      	str	r0, [r7, #4]
  return htim->State;
 8086d6c:	687b      	ldr	r3, [r7, #4]
 8086d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8086d72:	b2db      	uxtb	r3, r3
}
 8086d74:	4618      	mov	r0, r3
 8086d76:	370c      	adds	r7, #12
 8086d78:	46bd      	mov	sp, r7
 8086d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086d7e:	4770      	bx	lr

08086d80 <HAL_TIM_OnePulse_GetState>:
  * @brief  Return the TIM One Pulse Mode handle state.
  * @param  htim TIM OPM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
{
 8086d80:	b480      	push	{r7}
 8086d82:	b083      	sub	sp, #12
 8086d84:	af00      	add	r7, sp, #0
 8086d86:	6078      	str	r0, [r7, #4]
  return htim->State;
 8086d88:	687b      	ldr	r3, [r7, #4]
 8086d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8086d8e:	b2db      	uxtb	r3, r3
}
 8086d90:	4618      	mov	r0, r3
 8086d92:	370c      	adds	r7, #12
 8086d94:	46bd      	mov	sp, r7
 8086d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086d9a:	4770      	bx	lr

08086d9c <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 8086d9c:	b480      	push	{r7}
 8086d9e:	b083      	sub	sp, #12
 8086da0:	af00      	add	r7, sp, #0
 8086da2:	6078      	str	r0, [r7, #4]
  return htim->State;
 8086da4:	687b      	ldr	r3, [r7, #4]
 8086da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8086daa:	b2db      	uxtb	r3, r3
}
 8086dac:	4618      	mov	r0, r3
 8086dae:	370c      	adds	r7, #12
 8086db0:	46bd      	mov	sp, r7
 8086db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086db6:	4770      	bx	lr

08086db8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8086db8:	b580      	push	{r7, lr}
 8086dba:	b084      	sub	sp, #16
 8086dbc:	af00      	add	r7, sp, #0
 8086dbe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086dc0:	687b      	ldr	r3, [r7, #4]
 8086dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086dc4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086dc6:	68fb      	ldr	r3, [r7, #12]
 8086dc8:	2201      	movs	r2, #1
 8086dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8086dce:	68f8      	ldr	r0, [r7, #12]
 8086dd0:	f7ff ff94 	bl	8086cfc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8086dd4:	bf00      	nop
 8086dd6:	3710      	adds	r7, #16
 8086dd8:	46bd      	mov	sp, r7
 8086dda:	bd80      	pop	{r7, pc}

08086ddc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8086ddc:	b580      	push	{r7, lr}
 8086dde:	b084      	sub	sp, #16
 8086de0:	af00      	add	r7, sp, #0
 8086de2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086de4:	687b      	ldr	r3, [r7, #4]
 8086de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086de8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086dea:	68fb      	ldr	r3, [r7, #12]
 8086dec:	2201      	movs	r2, #1
 8086dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8086df2:	68fb      	ldr	r3, [r7, #12]
 8086df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086df6:	687a      	ldr	r2, [r7, #4]
 8086df8:	429a      	cmp	r2, r3
 8086dfa:	d103      	bne.n	8086e04 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8086dfc:	68fb      	ldr	r3, [r7, #12]
 8086dfe:	2201      	movs	r2, #1
 8086e00:	771a      	strb	r2, [r3, #28]
 8086e02:	e019      	b.n	8086e38 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8086e04:	68fb      	ldr	r3, [r7, #12]
 8086e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086e08:	687a      	ldr	r2, [r7, #4]
 8086e0a:	429a      	cmp	r2, r3
 8086e0c:	d103      	bne.n	8086e16 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8086e0e:	68fb      	ldr	r3, [r7, #12]
 8086e10:	2202      	movs	r2, #2
 8086e12:	771a      	strb	r2, [r3, #28]
 8086e14:	e010      	b.n	8086e38 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8086e16:	68fb      	ldr	r3, [r7, #12]
 8086e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086e1a:	687a      	ldr	r2, [r7, #4]
 8086e1c:	429a      	cmp	r2, r3
 8086e1e:	d103      	bne.n	8086e28 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8086e20:	68fb      	ldr	r3, [r7, #12]
 8086e22:	2204      	movs	r2, #4
 8086e24:	771a      	strb	r2, [r3, #28]
 8086e26:	e007      	b.n	8086e38 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8086e28:	68fb      	ldr	r3, [r7, #12]
 8086e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086e2c:	687a      	ldr	r2, [r7, #4]
 8086e2e:	429a      	cmp	r2, r3
 8086e30:	d102      	bne.n	8086e38 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8086e32:	68fb      	ldr	r3, [r7, #12]
 8086e34:	2208      	movs	r2, #8
 8086e36:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8086e38:	68f8      	ldr	r0, [r7, #12]
 8086e3a:	f7ff ff37 	bl	8086cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8086e3e:	68fb      	ldr	r3, [r7, #12]
 8086e40:	2200      	movs	r2, #0
 8086e42:	771a      	strb	r2, [r3, #28]
}
 8086e44:	bf00      	nop
 8086e46:	3710      	adds	r7, #16
 8086e48:	46bd      	mov	sp, r7
 8086e4a:	bd80      	pop	{r7, pc}

08086e4c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8086e4c:	b580      	push	{r7, lr}
 8086e4e:	b084      	sub	sp, #16
 8086e50:	af00      	add	r7, sp, #0
 8086e52:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086e54:	687b      	ldr	r3, [r7, #4]
 8086e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086e58:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086e5a:	68fb      	ldr	r3, [r7, #12]
 8086e5c:	2201      	movs	r2, #1
 8086e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8086e62:	68fb      	ldr	r3, [r7, #12]
 8086e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086e66:	687a      	ldr	r2, [r7, #4]
 8086e68:	429a      	cmp	r2, r3
 8086e6a:	d103      	bne.n	8086e74 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8086e6c:	68fb      	ldr	r3, [r7, #12]
 8086e6e:	2201      	movs	r2, #1
 8086e70:	771a      	strb	r2, [r3, #28]
 8086e72:	e019      	b.n	8086ea8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8086e74:	68fb      	ldr	r3, [r7, #12]
 8086e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086e78:	687a      	ldr	r2, [r7, #4]
 8086e7a:	429a      	cmp	r2, r3
 8086e7c:	d103      	bne.n	8086e86 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8086e7e:	68fb      	ldr	r3, [r7, #12]
 8086e80:	2202      	movs	r2, #2
 8086e82:	771a      	strb	r2, [r3, #28]
 8086e84:	e010      	b.n	8086ea8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8086e86:	68fb      	ldr	r3, [r7, #12]
 8086e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086e8a:	687a      	ldr	r2, [r7, #4]
 8086e8c:	429a      	cmp	r2, r3
 8086e8e:	d103      	bne.n	8086e98 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8086e90:	68fb      	ldr	r3, [r7, #12]
 8086e92:	2204      	movs	r2, #4
 8086e94:	771a      	strb	r2, [r3, #28]
 8086e96:	e007      	b.n	8086ea8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8086e98:	68fb      	ldr	r3, [r7, #12]
 8086e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086e9c:	687a      	ldr	r2, [r7, #4]
 8086e9e:	429a      	cmp	r2, r3
 8086ea0:	d102      	bne.n	8086ea8 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8086ea2:	68fb      	ldr	r3, [r7, #12]
 8086ea4:	2208      	movs	r2, #8
 8086ea6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8086ea8:	68f8      	ldr	r0, [r7, #12]
 8086eaa:	f7ff ff09 	bl	8086cc0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8086eae:	68fb      	ldr	r3, [r7, #12]
 8086eb0:	2200      	movs	r2, #0
 8086eb2:	771a      	strb	r2, [r3, #28]
}
 8086eb4:	bf00      	nop
 8086eb6:	3710      	adds	r7, #16
 8086eb8:	46bd      	mov	sp, r7
 8086eba:	bd80      	pop	{r7, pc}

08086ebc <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8086ebc:	b580      	push	{r7, lr}
 8086ebe:	b084      	sub	sp, #16
 8086ec0:	af00      	add	r7, sp, #0
 8086ec2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086ec4:	687b      	ldr	r3, [r7, #4]
 8086ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086ec8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086eca:	68fb      	ldr	r3, [r7, #12]
 8086ecc:	2201      	movs	r2, #1
 8086ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8086ed2:	68fb      	ldr	r3, [r7, #12]
 8086ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086ed6:	687a      	ldr	r2, [r7, #4]
 8086ed8:	429a      	cmp	r2, r3
 8086eda:	d103      	bne.n	8086ee4 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8086edc:	68fb      	ldr	r3, [r7, #12]
 8086ede:	2201      	movs	r2, #1
 8086ee0:	771a      	strb	r2, [r3, #28]
 8086ee2:	e019      	b.n	8086f18 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8086ee4:	68fb      	ldr	r3, [r7, #12]
 8086ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086ee8:	687a      	ldr	r2, [r7, #4]
 8086eea:	429a      	cmp	r2, r3
 8086eec:	d103      	bne.n	8086ef6 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8086eee:	68fb      	ldr	r3, [r7, #12]
 8086ef0:	2202      	movs	r2, #2
 8086ef2:	771a      	strb	r2, [r3, #28]
 8086ef4:	e010      	b.n	8086f18 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8086ef6:	68fb      	ldr	r3, [r7, #12]
 8086ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086efa:	687a      	ldr	r2, [r7, #4]
 8086efc:	429a      	cmp	r2, r3
 8086efe:	d103      	bne.n	8086f08 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8086f00:	68fb      	ldr	r3, [r7, #12]
 8086f02:	2204      	movs	r2, #4
 8086f04:	771a      	strb	r2, [r3, #28]
 8086f06:	e007      	b.n	8086f18 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8086f08:	68fb      	ldr	r3, [r7, #12]
 8086f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086f0c:	687a      	ldr	r2, [r7, #4]
 8086f0e:	429a      	cmp	r2, r3
 8086f10:	d102      	bne.n	8086f18 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8086f12:	68fb      	ldr	r3, [r7, #12]
 8086f14:	2208      	movs	r2, #8
 8086f16:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8086f18:	68f8      	ldr	r0, [r7, #12]
 8086f1a:	f7ff feb3 	bl	8086c84 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8086f1e:	68fb      	ldr	r3, [r7, #12]
 8086f20:	2200      	movs	r2, #0
 8086f22:	771a      	strb	r2, [r3, #28]
}
 8086f24:	bf00      	nop
 8086f26:	3710      	adds	r7, #16
 8086f28:	46bd      	mov	sp, r7
 8086f2a:	bd80      	pop	{r7, pc}

08086f2c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8086f2c:	b580      	push	{r7, lr}
 8086f2e:	b084      	sub	sp, #16
 8086f30:	af00      	add	r7, sp, #0
 8086f32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086f34:	687b      	ldr	r3, [r7, #4]
 8086f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086f38:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086f3a:	68fb      	ldr	r3, [r7, #12]
 8086f3c:	2201      	movs	r2, #1
 8086f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8086f42:	68fb      	ldr	r3, [r7, #12]
 8086f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086f46:	687a      	ldr	r2, [r7, #4]
 8086f48:	429a      	cmp	r2, r3
 8086f4a:	d103      	bne.n	8086f54 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8086f4c:	68fb      	ldr	r3, [r7, #12]
 8086f4e:	2201      	movs	r2, #1
 8086f50:	771a      	strb	r2, [r3, #28]
 8086f52:	e019      	b.n	8086f88 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8086f54:	68fb      	ldr	r3, [r7, #12]
 8086f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086f58:	687a      	ldr	r2, [r7, #4]
 8086f5a:	429a      	cmp	r2, r3
 8086f5c:	d103      	bne.n	8086f66 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8086f5e:	68fb      	ldr	r3, [r7, #12]
 8086f60:	2202      	movs	r2, #2
 8086f62:	771a      	strb	r2, [r3, #28]
 8086f64:	e010      	b.n	8086f88 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8086f66:	68fb      	ldr	r3, [r7, #12]
 8086f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8086f6a:	687a      	ldr	r2, [r7, #4]
 8086f6c:	429a      	cmp	r2, r3
 8086f6e:	d103      	bne.n	8086f78 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8086f70:	68fb      	ldr	r3, [r7, #12]
 8086f72:	2204      	movs	r2, #4
 8086f74:	771a      	strb	r2, [r3, #28]
 8086f76:	e007      	b.n	8086f88 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8086f78:	68fb      	ldr	r3, [r7, #12]
 8086f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086f7c:	687a      	ldr	r2, [r7, #4]
 8086f7e:	429a      	cmp	r2, r3
 8086f80:	d102      	bne.n	8086f88 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8086f82:	68fb      	ldr	r3, [r7, #12]
 8086f84:	2208      	movs	r2, #8
 8086f86:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8086f88:	68f8      	ldr	r0, [r7, #12]
 8086f8a:	f7ff fe85 	bl	8086c98 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8086f8e:	68fb      	ldr	r3, [r7, #12]
 8086f90:	2200      	movs	r2, #0
 8086f92:	771a      	strb	r2, [r3, #28]
}
 8086f94:	bf00      	nop
 8086f96:	3710      	adds	r7, #16
 8086f98:	46bd      	mov	sp, r7
 8086f9a:	bd80      	pop	{r7, pc}

08086f9c <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8086f9c:	b580      	push	{r7, lr}
 8086f9e:	b084      	sub	sp, #16
 8086fa0:	af00      	add	r7, sp, #0
 8086fa2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086fa4:	687b      	ldr	r3, [r7, #4]
 8086fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086fa8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086faa:	68fb      	ldr	r3, [r7, #12]
 8086fac:	2201      	movs	r2, #1
 8086fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8086fb2:	68f8      	ldr	r0, [r7, #12]
 8086fb4:	f7ff fe48 	bl	8086c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8086fb8:	bf00      	nop
 8086fba:	3710      	adds	r7, #16
 8086fbc:	46bd      	mov	sp, r7
 8086fbe:	bd80      	pop	{r7, pc}

08086fc0 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8086fc0:	b580      	push	{r7, lr}
 8086fc2:	b084      	sub	sp, #16
 8086fc4:	af00      	add	r7, sp, #0
 8086fc6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086fc8:	687b      	ldr	r3, [r7, #4]
 8086fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086fcc:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086fce:	68fb      	ldr	r3, [r7, #12]
 8086fd0:	2201      	movs	r2, #1
 8086fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8086fd6:	68f8      	ldr	r0, [r7, #12]
 8086fd8:	f7ff fe40 	bl	8086c5c <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8086fdc:	bf00      	nop
 8086fde:	3710      	adds	r7, #16
 8086fe0:	46bd      	mov	sp, r7
 8086fe2:	bd80      	pop	{r7, pc}

08086fe4 <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 8086fe4:	b580      	push	{r7, lr}
 8086fe6:	b084      	sub	sp, #16
 8086fe8:	af00      	add	r7, sp, #0
 8086fea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086fec:	687b      	ldr	r3, [r7, #4]
 8086fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086ff0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8086ff2:	68fb      	ldr	r3, [r7, #12]
 8086ff4:	2201      	movs	r2, #1
 8086ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
  HAL_TIM_TriggerCallback(htim);
 8086ffa:	68f8      	ldr	r0, [r7, #12]
 8086ffc:	f7ff fe6a 	bl	8086cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8087000:	bf00      	nop
 8087002:	3710      	adds	r7, #16
 8087004:	46bd      	mov	sp, r7
 8087006:	bd80      	pop	{r7, pc}

08087008 <TIM_DMATriggerHalfCplt>:
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
{
 8087008:	b580      	push	{r7, lr}
 808700a:	b084      	sub	sp, #16
 808700c:	af00      	add	r7, sp, #0
 808700e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8087010:	687b      	ldr	r3, [r7, #4]
 8087012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087014:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8087016:	68fb      	ldr	r3, [r7, #12]
 8087018:	2201      	movs	r2, #1
 808701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
  HAL_TIM_TriggerHalfCpltCallback(htim);
 808701e:	68f8      	ldr	r0, [r7, #12]
 8087020:	f7ff fe62 	bl	8086ce8 <HAL_TIM_TriggerHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8087024:	bf00      	nop
 8087026:	3710      	adds	r7, #16
 8087028:	46bd      	mov	sp, r7
 808702a:	bd80      	pop	{r7, pc}

0808702c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 808702c:	b480      	push	{r7}
 808702e:	b085      	sub	sp, #20
 8087030:	af00      	add	r7, sp, #0
 8087032:	6078      	str	r0, [r7, #4]
 8087034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8087036:	687b      	ldr	r3, [r7, #4]
 8087038:	681b      	ldr	r3, [r3, #0]
 808703a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 808703c:	687b      	ldr	r3, [r7, #4]
 808703e:	4a40      	ldr	r2, [pc, #256]	; (8087140 <TIM_Base_SetConfig+0x114>)
 8087040:	4293      	cmp	r3, r2
 8087042:	d013      	beq.n	808706c <TIM_Base_SetConfig+0x40>
 8087044:	687b      	ldr	r3, [r7, #4]
 8087046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 808704a:	d00f      	beq.n	808706c <TIM_Base_SetConfig+0x40>
 808704c:	687b      	ldr	r3, [r7, #4]
 808704e:	4a3d      	ldr	r2, [pc, #244]	; (8087144 <TIM_Base_SetConfig+0x118>)
 8087050:	4293      	cmp	r3, r2
 8087052:	d00b      	beq.n	808706c <TIM_Base_SetConfig+0x40>
 8087054:	687b      	ldr	r3, [r7, #4]
 8087056:	4a3c      	ldr	r2, [pc, #240]	; (8087148 <TIM_Base_SetConfig+0x11c>)
 8087058:	4293      	cmp	r3, r2
 808705a:	d007      	beq.n	808706c <TIM_Base_SetConfig+0x40>
 808705c:	687b      	ldr	r3, [r7, #4]
 808705e:	4a3b      	ldr	r2, [pc, #236]	; (808714c <TIM_Base_SetConfig+0x120>)
 8087060:	4293      	cmp	r3, r2
 8087062:	d003      	beq.n	808706c <TIM_Base_SetConfig+0x40>
 8087064:	687b      	ldr	r3, [r7, #4]
 8087066:	4a3a      	ldr	r2, [pc, #232]	; (8087150 <TIM_Base_SetConfig+0x124>)
 8087068:	4293      	cmp	r3, r2
 808706a:	d108      	bne.n	808707e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 808706c:	68fb      	ldr	r3, [r7, #12]
 808706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8087072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8087074:	683b      	ldr	r3, [r7, #0]
 8087076:	685b      	ldr	r3, [r3, #4]
 8087078:	68fa      	ldr	r2, [r7, #12]
 808707a:	4313      	orrs	r3, r2
 808707c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 808707e:	687b      	ldr	r3, [r7, #4]
 8087080:	4a2f      	ldr	r2, [pc, #188]	; (8087140 <TIM_Base_SetConfig+0x114>)
 8087082:	4293      	cmp	r3, r2
 8087084:	d02b      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 8087086:	687b      	ldr	r3, [r7, #4]
 8087088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 808708c:	d027      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 808708e:	687b      	ldr	r3, [r7, #4]
 8087090:	4a2c      	ldr	r2, [pc, #176]	; (8087144 <TIM_Base_SetConfig+0x118>)
 8087092:	4293      	cmp	r3, r2
 8087094:	d023      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 8087096:	687b      	ldr	r3, [r7, #4]
 8087098:	4a2b      	ldr	r2, [pc, #172]	; (8087148 <TIM_Base_SetConfig+0x11c>)
 808709a:	4293      	cmp	r3, r2
 808709c:	d01f      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 808709e:	687b      	ldr	r3, [r7, #4]
 80870a0:	4a2a      	ldr	r2, [pc, #168]	; (808714c <TIM_Base_SetConfig+0x120>)
 80870a2:	4293      	cmp	r3, r2
 80870a4:	d01b      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 80870a6:	687b      	ldr	r3, [r7, #4]
 80870a8:	4a29      	ldr	r2, [pc, #164]	; (8087150 <TIM_Base_SetConfig+0x124>)
 80870aa:	4293      	cmp	r3, r2
 80870ac:	d017      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 80870ae:	687b      	ldr	r3, [r7, #4]
 80870b0:	4a28      	ldr	r2, [pc, #160]	; (8087154 <TIM_Base_SetConfig+0x128>)
 80870b2:	4293      	cmp	r3, r2
 80870b4:	d013      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 80870b6:	687b      	ldr	r3, [r7, #4]
 80870b8:	4a27      	ldr	r2, [pc, #156]	; (8087158 <TIM_Base_SetConfig+0x12c>)
 80870ba:	4293      	cmp	r3, r2
 80870bc:	d00f      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 80870be:	687b      	ldr	r3, [r7, #4]
 80870c0:	4a26      	ldr	r2, [pc, #152]	; (808715c <TIM_Base_SetConfig+0x130>)
 80870c2:	4293      	cmp	r3, r2
 80870c4:	d00b      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 80870c6:	687b      	ldr	r3, [r7, #4]
 80870c8:	4a25      	ldr	r2, [pc, #148]	; (8087160 <TIM_Base_SetConfig+0x134>)
 80870ca:	4293      	cmp	r3, r2
 80870cc:	d007      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 80870ce:	687b      	ldr	r3, [r7, #4]
 80870d0:	4a24      	ldr	r2, [pc, #144]	; (8087164 <TIM_Base_SetConfig+0x138>)
 80870d2:	4293      	cmp	r3, r2
 80870d4:	d003      	beq.n	80870de <TIM_Base_SetConfig+0xb2>
 80870d6:	687b      	ldr	r3, [r7, #4]
 80870d8:	4a23      	ldr	r2, [pc, #140]	; (8087168 <TIM_Base_SetConfig+0x13c>)
 80870da:	4293      	cmp	r3, r2
 80870dc:	d108      	bne.n	80870f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80870de:	68fb      	ldr	r3, [r7, #12]
 80870e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80870e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80870e6:	683b      	ldr	r3, [r7, #0]
 80870e8:	68db      	ldr	r3, [r3, #12]
 80870ea:	68fa      	ldr	r2, [r7, #12]
 80870ec:	4313      	orrs	r3, r2
 80870ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80870f0:	68fb      	ldr	r3, [r7, #12]
 80870f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80870f6:	683b      	ldr	r3, [r7, #0]
 80870f8:	695b      	ldr	r3, [r3, #20]
 80870fa:	4313      	orrs	r3, r2
 80870fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80870fe:	687b      	ldr	r3, [r7, #4]
 8087100:	68fa      	ldr	r2, [r7, #12]
 8087102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8087104:	683b      	ldr	r3, [r7, #0]
 8087106:	689a      	ldr	r2, [r3, #8]
 8087108:	687b      	ldr	r3, [r7, #4]
 808710a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 808710c:	683b      	ldr	r3, [r7, #0]
 808710e:	681a      	ldr	r2, [r3, #0]
 8087110:	687b      	ldr	r3, [r7, #4]
 8087112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8087114:	687b      	ldr	r3, [r7, #4]
 8087116:	4a0a      	ldr	r2, [pc, #40]	; (8087140 <TIM_Base_SetConfig+0x114>)
 8087118:	4293      	cmp	r3, r2
 808711a:	d003      	beq.n	8087124 <TIM_Base_SetConfig+0xf8>
 808711c:	687b      	ldr	r3, [r7, #4]
 808711e:	4a0c      	ldr	r2, [pc, #48]	; (8087150 <TIM_Base_SetConfig+0x124>)
 8087120:	4293      	cmp	r3, r2
 8087122:	d103      	bne.n	808712c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8087124:	683b      	ldr	r3, [r7, #0]
 8087126:	691a      	ldr	r2, [r3, #16]
 8087128:	687b      	ldr	r3, [r7, #4]
 808712a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 808712c:	687b      	ldr	r3, [r7, #4]
 808712e:	2201      	movs	r2, #1
 8087130:	615a      	str	r2, [r3, #20]
}
 8087132:	bf00      	nop
 8087134:	3714      	adds	r7, #20
 8087136:	46bd      	mov	sp, r7
 8087138:	f85d 7b04 	ldr.w	r7, [sp], #4
 808713c:	4770      	bx	lr
 808713e:	bf00      	nop
 8087140:	40010000 	.word	0x40010000
 8087144:	40000400 	.word	0x40000400
 8087148:	40000800 	.word	0x40000800
 808714c:	40000c00 	.word	0x40000c00
 8087150:	40010400 	.word	0x40010400
 8087154:	40014000 	.word	0x40014000
 8087158:	40014400 	.word	0x40014400
 808715c:	40014800 	.word	0x40014800
 8087160:	40001800 	.word	0x40001800
 8087164:	40001c00 	.word	0x40001c00
 8087168:	40002000 	.word	0x40002000

0808716c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 808716c:	b480      	push	{r7}
 808716e:	b087      	sub	sp, #28
 8087170:	af00      	add	r7, sp, #0
 8087172:	6078      	str	r0, [r7, #4]
 8087174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8087176:	687b      	ldr	r3, [r7, #4]
 8087178:	6a1b      	ldr	r3, [r3, #32]
 808717a:	f023 0201 	bic.w	r2, r3, #1
 808717e:	687b      	ldr	r3, [r7, #4]
 8087180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8087182:	687b      	ldr	r3, [r7, #4]
 8087184:	6a1b      	ldr	r3, [r3, #32]
 8087186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8087188:	687b      	ldr	r3, [r7, #4]
 808718a:	685b      	ldr	r3, [r3, #4]
 808718c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 808718e:	687b      	ldr	r3, [r7, #4]
 8087190:	699b      	ldr	r3, [r3, #24]
 8087192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8087194:	68fb      	ldr	r3, [r7, #12]
 8087196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 808719a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 808719c:	68fb      	ldr	r3, [r7, #12]
 808719e:	f023 0303 	bic.w	r3, r3, #3
 80871a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80871a4:	683b      	ldr	r3, [r7, #0]
 80871a6:	681b      	ldr	r3, [r3, #0]
 80871a8:	68fa      	ldr	r2, [r7, #12]
 80871aa:	4313      	orrs	r3, r2
 80871ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80871ae:	697b      	ldr	r3, [r7, #20]
 80871b0:	f023 0302 	bic.w	r3, r3, #2
 80871b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80871b6:	683b      	ldr	r3, [r7, #0]
 80871b8:	689b      	ldr	r3, [r3, #8]
 80871ba:	697a      	ldr	r2, [r7, #20]
 80871bc:	4313      	orrs	r3, r2
 80871be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80871c0:	687b      	ldr	r3, [r7, #4]
 80871c2:	4a20      	ldr	r2, [pc, #128]	; (8087244 <TIM_OC1_SetConfig+0xd8>)
 80871c4:	4293      	cmp	r3, r2
 80871c6:	d003      	beq.n	80871d0 <TIM_OC1_SetConfig+0x64>
 80871c8:	687b      	ldr	r3, [r7, #4]
 80871ca:	4a1f      	ldr	r2, [pc, #124]	; (8087248 <TIM_OC1_SetConfig+0xdc>)
 80871cc:	4293      	cmp	r3, r2
 80871ce:	d10c      	bne.n	80871ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80871d0:	697b      	ldr	r3, [r7, #20]
 80871d2:	f023 0308 	bic.w	r3, r3, #8
 80871d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80871d8:	683b      	ldr	r3, [r7, #0]
 80871da:	68db      	ldr	r3, [r3, #12]
 80871dc:	697a      	ldr	r2, [r7, #20]
 80871de:	4313      	orrs	r3, r2
 80871e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80871e2:	697b      	ldr	r3, [r7, #20]
 80871e4:	f023 0304 	bic.w	r3, r3, #4
 80871e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80871ea:	687b      	ldr	r3, [r7, #4]
 80871ec:	4a15      	ldr	r2, [pc, #84]	; (8087244 <TIM_OC1_SetConfig+0xd8>)
 80871ee:	4293      	cmp	r3, r2
 80871f0:	d003      	beq.n	80871fa <TIM_OC1_SetConfig+0x8e>
 80871f2:	687b      	ldr	r3, [r7, #4]
 80871f4:	4a14      	ldr	r2, [pc, #80]	; (8087248 <TIM_OC1_SetConfig+0xdc>)
 80871f6:	4293      	cmp	r3, r2
 80871f8:	d111      	bne.n	808721e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80871fa:	693b      	ldr	r3, [r7, #16]
 80871fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8087200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8087202:	693b      	ldr	r3, [r7, #16]
 8087204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8087208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 808720a:	683b      	ldr	r3, [r7, #0]
 808720c:	695b      	ldr	r3, [r3, #20]
 808720e:	693a      	ldr	r2, [r7, #16]
 8087210:	4313      	orrs	r3, r2
 8087212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8087214:	683b      	ldr	r3, [r7, #0]
 8087216:	699b      	ldr	r3, [r3, #24]
 8087218:	693a      	ldr	r2, [r7, #16]
 808721a:	4313      	orrs	r3, r2
 808721c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 808721e:	687b      	ldr	r3, [r7, #4]
 8087220:	693a      	ldr	r2, [r7, #16]
 8087222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8087224:	687b      	ldr	r3, [r7, #4]
 8087226:	68fa      	ldr	r2, [r7, #12]
 8087228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 808722a:	683b      	ldr	r3, [r7, #0]
 808722c:	685a      	ldr	r2, [r3, #4]
 808722e:	687b      	ldr	r3, [r7, #4]
 8087230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8087232:	687b      	ldr	r3, [r7, #4]
 8087234:	697a      	ldr	r2, [r7, #20]
 8087236:	621a      	str	r2, [r3, #32]
}
 8087238:	bf00      	nop
 808723a:	371c      	adds	r7, #28
 808723c:	46bd      	mov	sp, r7
 808723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087242:	4770      	bx	lr
 8087244:	40010000 	.word	0x40010000
 8087248:	40010400 	.word	0x40010400

0808724c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 808724c:	b480      	push	{r7}
 808724e:	b087      	sub	sp, #28
 8087250:	af00      	add	r7, sp, #0
 8087252:	6078      	str	r0, [r7, #4]
 8087254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8087256:	687b      	ldr	r3, [r7, #4]
 8087258:	6a1b      	ldr	r3, [r3, #32]
 808725a:	f023 0210 	bic.w	r2, r3, #16
 808725e:	687b      	ldr	r3, [r7, #4]
 8087260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8087262:	687b      	ldr	r3, [r7, #4]
 8087264:	6a1b      	ldr	r3, [r3, #32]
 8087266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8087268:	687b      	ldr	r3, [r7, #4]
 808726a:	685b      	ldr	r3, [r3, #4]
 808726c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 808726e:	687b      	ldr	r3, [r7, #4]
 8087270:	699b      	ldr	r3, [r3, #24]
 8087272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8087274:	68fb      	ldr	r3, [r7, #12]
 8087276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 808727a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 808727c:	68fb      	ldr	r3, [r7, #12]
 808727e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8087282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8087284:	683b      	ldr	r3, [r7, #0]
 8087286:	681b      	ldr	r3, [r3, #0]
 8087288:	021b      	lsls	r3, r3, #8
 808728a:	68fa      	ldr	r2, [r7, #12]
 808728c:	4313      	orrs	r3, r2
 808728e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8087290:	697b      	ldr	r3, [r7, #20]
 8087292:	f023 0320 	bic.w	r3, r3, #32
 8087296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8087298:	683b      	ldr	r3, [r7, #0]
 808729a:	689b      	ldr	r3, [r3, #8]
 808729c:	011b      	lsls	r3, r3, #4
 808729e:	697a      	ldr	r2, [r7, #20]
 80872a0:	4313      	orrs	r3, r2
 80872a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80872a4:	687b      	ldr	r3, [r7, #4]
 80872a6:	4a22      	ldr	r2, [pc, #136]	; (8087330 <TIM_OC2_SetConfig+0xe4>)
 80872a8:	4293      	cmp	r3, r2
 80872aa:	d003      	beq.n	80872b4 <TIM_OC2_SetConfig+0x68>
 80872ac:	687b      	ldr	r3, [r7, #4]
 80872ae:	4a21      	ldr	r2, [pc, #132]	; (8087334 <TIM_OC2_SetConfig+0xe8>)
 80872b0:	4293      	cmp	r3, r2
 80872b2:	d10d      	bne.n	80872d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80872b4:	697b      	ldr	r3, [r7, #20]
 80872b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80872ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80872bc:	683b      	ldr	r3, [r7, #0]
 80872be:	68db      	ldr	r3, [r3, #12]
 80872c0:	011b      	lsls	r3, r3, #4
 80872c2:	697a      	ldr	r2, [r7, #20]
 80872c4:	4313      	orrs	r3, r2
 80872c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80872c8:	697b      	ldr	r3, [r7, #20]
 80872ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80872ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80872d0:	687b      	ldr	r3, [r7, #4]
 80872d2:	4a17      	ldr	r2, [pc, #92]	; (8087330 <TIM_OC2_SetConfig+0xe4>)
 80872d4:	4293      	cmp	r3, r2
 80872d6:	d003      	beq.n	80872e0 <TIM_OC2_SetConfig+0x94>
 80872d8:	687b      	ldr	r3, [r7, #4]
 80872da:	4a16      	ldr	r2, [pc, #88]	; (8087334 <TIM_OC2_SetConfig+0xe8>)
 80872dc:	4293      	cmp	r3, r2
 80872de:	d113      	bne.n	8087308 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80872e0:	693b      	ldr	r3, [r7, #16]
 80872e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80872e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80872e8:	693b      	ldr	r3, [r7, #16]
 80872ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80872ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80872f0:	683b      	ldr	r3, [r7, #0]
 80872f2:	695b      	ldr	r3, [r3, #20]
 80872f4:	009b      	lsls	r3, r3, #2
 80872f6:	693a      	ldr	r2, [r7, #16]
 80872f8:	4313      	orrs	r3, r2
 80872fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80872fc:	683b      	ldr	r3, [r7, #0]
 80872fe:	699b      	ldr	r3, [r3, #24]
 8087300:	009b      	lsls	r3, r3, #2
 8087302:	693a      	ldr	r2, [r7, #16]
 8087304:	4313      	orrs	r3, r2
 8087306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8087308:	687b      	ldr	r3, [r7, #4]
 808730a:	693a      	ldr	r2, [r7, #16]
 808730c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 808730e:	687b      	ldr	r3, [r7, #4]
 8087310:	68fa      	ldr	r2, [r7, #12]
 8087312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8087314:	683b      	ldr	r3, [r7, #0]
 8087316:	685a      	ldr	r2, [r3, #4]
 8087318:	687b      	ldr	r3, [r7, #4]
 808731a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 808731c:	687b      	ldr	r3, [r7, #4]
 808731e:	697a      	ldr	r2, [r7, #20]
 8087320:	621a      	str	r2, [r3, #32]
}
 8087322:	bf00      	nop
 8087324:	371c      	adds	r7, #28
 8087326:	46bd      	mov	sp, r7
 8087328:	f85d 7b04 	ldr.w	r7, [sp], #4
 808732c:	4770      	bx	lr
 808732e:	bf00      	nop
 8087330:	40010000 	.word	0x40010000
 8087334:	40010400 	.word	0x40010400

08087338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8087338:	b480      	push	{r7}
 808733a:	b087      	sub	sp, #28
 808733c:	af00      	add	r7, sp, #0
 808733e:	6078      	str	r0, [r7, #4]
 8087340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8087342:	687b      	ldr	r3, [r7, #4]
 8087344:	6a1b      	ldr	r3, [r3, #32]
 8087346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 808734a:	687b      	ldr	r3, [r7, #4]
 808734c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 808734e:	687b      	ldr	r3, [r7, #4]
 8087350:	6a1b      	ldr	r3, [r3, #32]
 8087352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8087354:	687b      	ldr	r3, [r7, #4]
 8087356:	685b      	ldr	r3, [r3, #4]
 8087358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 808735a:	687b      	ldr	r3, [r7, #4]
 808735c:	69db      	ldr	r3, [r3, #28]
 808735e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8087360:	68fb      	ldr	r3, [r7, #12]
 8087362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8087366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8087368:	68fb      	ldr	r3, [r7, #12]
 808736a:	f023 0303 	bic.w	r3, r3, #3
 808736e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8087370:	683b      	ldr	r3, [r7, #0]
 8087372:	681b      	ldr	r3, [r3, #0]
 8087374:	68fa      	ldr	r2, [r7, #12]
 8087376:	4313      	orrs	r3, r2
 8087378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 808737a:	697b      	ldr	r3, [r7, #20]
 808737c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8087380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8087382:	683b      	ldr	r3, [r7, #0]
 8087384:	689b      	ldr	r3, [r3, #8]
 8087386:	021b      	lsls	r3, r3, #8
 8087388:	697a      	ldr	r2, [r7, #20]
 808738a:	4313      	orrs	r3, r2
 808738c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 808738e:	687b      	ldr	r3, [r7, #4]
 8087390:	4a21      	ldr	r2, [pc, #132]	; (8087418 <TIM_OC3_SetConfig+0xe0>)
 8087392:	4293      	cmp	r3, r2
 8087394:	d003      	beq.n	808739e <TIM_OC3_SetConfig+0x66>
 8087396:	687b      	ldr	r3, [r7, #4]
 8087398:	4a20      	ldr	r2, [pc, #128]	; (808741c <TIM_OC3_SetConfig+0xe4>)
 808739a:	4293      	cmp	r3, r2
 808739c:	d10d      	bne.n	80873ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 808739e:	697b      	ldr	r3, [r7, #20]
 80873a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80873a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80873a6:	683b      	ldr	r3, [r7, #0]
 80873a8:	68db      	ldr	r3, [r3, #12]
 80873aa:	021b      	lsls	r3, r3, #8
 80873ac:	697a      	ldr	r2, [r7, #20]
 80873ae:	4313      	orrs	r3, r2
 80873b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80873b2:	697b      	ldr	r3, [r7, #20]
 80873b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80873b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80873ba:	687b      	ldr	r3, [r7, #4]
 80873bc:	4a16      	ldr	r2, [pc, #88]	; (8087418 <TIM_OC3_SetConfig+0xe0>)
 80873be:	4293      	cmp	r3, r2
 80873c0:	d003      	beq.n	80873ca <TIM_OC3_SetConfig+0x92>
 80873c2:	687b      	ldr	r3, [r7, #4]
 80873c4:	4a15      	ldr	r2, [pc, #84]	; (808741c <TIM_OC3_SetConfig+0xe4>)
 80873c6:	4293      	cmp	r3, r2
 80873c8:	d113      	bne.n	80873f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80873ca:	693b      	ldr	r3, [r7, #16]
 80873cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80873d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80873d2:	693b      	ldr	r3, [r7, #16]
 80873d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80873d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80873da:	683b      	ldr	r3, [r7, #0]
 80873dc:	695b      	ldr	r3, [r3, #20]
 80873de:	011b      	lsls	r3, r3, #4
 80873e0:	693a      	ldr	r2, [r7, #16]
 80873e2:	4313      	orrs	r3, r2
 80873e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80873e6:	683b      	ldr	r3, [r7, #0]
 80873e8:	699b      	ldr	r3, [r3, #24]
 80873ea:	011b      	lsls	r3, r3, #4
 80873ec:	693a      	ldr	r2, [r7, #16]
 80873ee:	4313      	orrs	r3, r2
 80873f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80873f2:	687b      	ldr	r3, [r7, #4]
 80873f4:	693a      	ldr	r2, [r7, #16]
 80873f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80873f8:	687b      	ldr	r3, [r7, #4]
 80873fa:	68fa      	ldr	r2, [r7, #12]
 80873fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80873fe:	683b      	ldr	r3, [r7, #0]
 8087400:	685a      	ldr	r2, [r3, #4]
 8087402:	687b      	ldr	r3, [r7, #4]
 8087404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8087406:	687b      	ldr	r3, [r7, #4]
 8087408:	697a      	ldr	r2, [r7, #20]
 808740a:	621a      	str	r2, [r3, #32]
}
 808740c:	bf00      	nop
 808740e:	371c      	adds	r7, #28
 8087410:	46bd      	mov	sp, r7
 8087412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087416:	4770      	bx	lr
 8087418:	40010000 	.word	0x40010000
 808741c:	40010400 	.word	0x40010400

08087420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8087420:	b480      	push	{r7}
 8087422:	b087      	sub	sp, #28
 8087424:	af00      	add	r7, sp, #0
 8087426:	6078      	str	r0, [r7, #4]
 8087428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 808742a:	687b      	ldr	r3, [r7, #4]
 808742c:	6a1b      	ldr	r3, [r3, #32]
 808742e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8087432:	687b      	ldr	r3, [r7, #4]
 8087434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8087436:	687b      	ldr	r3, [r7, #4]
 8087438:	6a1b      	ldr	r3, [r3, #32]
 808743a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 808743c:	687b      	ldr	r3, [r7, #4]
 808743e:	685b      	ldr	r3, [r3, #4]
 8087440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8087442:	687b      	ldr	r3, [r7, #4]
 8087444:	69db      	ldr	r3, [r3, #28]
 8087446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8087448:	68fb      	ldr	r3, [r7, #12]
 808744a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 808744e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8087450:	68fb      	ldr	r3, [r7, #12]
 8087452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8087456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8087458:	683b      	ldr	r3, [r7, #0]
 808745a:	681b      	ldr	r3, [r3, #0]
 808745c:	021b      	lsls	r3, r3, #8
 808745e:	68fa      	ldr	r2, [r7, #12]
 8087460:	4313      	orrs	r3, r2
 8087462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8087464:	693b      	ldr	r3, [r7, #16]
 8087466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 808746a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 808746c:	683b      	ldr	r3, [r7, #0]
 808746e:	689b      	ldr	r3, [r3, #8]
 8087470:	031b      	lsls	r3, r3, #12
 8087472:	693a      	ldr	r2, [r7, #16]
 8087474:	4313      	orrs	r3, r2
 8087476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8087478:	687b      	ldr	r3, [r7, #4]
 808747a:	4a12      	ldr	r2, [pc, #72]	; (80874c4 <TIM_OC4_SetConfig+0xa4>)
 808747c:	4293      	cmp	r3, r2
 808747e:	d003      	beq.n	8087488 <TIM_OC4_SetConfig+0x68>
 8087480:	687b      	ldr	r3, [r7, #4]
 8087482:	4a11      	ldr	r2, [pc, #68]	; (80874c8 <TIM_OC4_SetConfig+0xa8>)
 8087484:	4293      	cmp	r3, r2
 8087486:	d109      	bne.n	808749c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8087488:	697b      	ldr	r3, [r7, #20]
 808748a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 808748e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8087490:	683b      	ldr	r3, [r7, #0]
 8087492:	695b      	ldr	r3, [r3, #20]
 8087494:	019b      	lsls	r3, r3, #6
 8087496:	697a      	ldr	r2, [r7, #20]
 8087498:	4313      	orrs	r3, r2
 808749a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 808749c:	687b      	ldr	r3, [r7, #4]
 808749e:	697a      	ldr	r2, [r7, #20]
 80874a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80874a2:	687b      	ldr	r3, [r7, #4]
 80874a4:	68fa      	ldr	r2, [r7, #12]
 80874a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80874a8:	683b      	ldr	r3, [r7, #0]
 80874aa:	685a      	ldr	r2, [r3, #4]
 80874ac:	687b      	ldr	r3, [r7, #4]
 80874ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80874b0:	687b      	ldr	r3, [r7, #4]
 80874b2:	693a      	ldr	r2, [r7, #16]
 80874b4:	621a      	str	r2, [r3, #32]
}
 80874b6:	bf00      	nop
 80874b8:	371c      	adds	r7, #28
 80874ba:	46bd      	mov	sp, r7
 80874bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80874c0:	4770      	bx	lr
 80874c2:	bf00      	nop
 80874c4:	40010000 	.word	0x40010000
 80874c8:	40010400 	.word	0x40010400

080874cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80874cc:	b580      	push	{r7, lr}
 80874ce:	b086      	sub	sp, #24
 80874d0:	af00      	add	r7, sp, #0
 80874d2:	6078      	str	r0, [r7, #4]
 80874d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80874d6:	687b      	ldr	r3, [r7, #4]
 80874d8:	681b      	ldr	r3, [r3, #0]
 80874da:	689b      	ldr	r3, [r3, #8]
 80874dc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80874de:	697b      	ldr	r3, [r7, #20]
 80874e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80874e4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80874e6:	683b      	ldr	r3, [r7, #0]
 80874e8:	685b      	ldr	r3, [r3, #4]
 80874ea:	697a      	ldr	r2, [r7, #20]
 80874ec:	4313      	orrs	r3, r2
 80874ee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80874f0:	697b      	ldr	r3, [r7, #20]
 80874f2:	f023 0307 	bic.w	r3, r3, #7
 80874f6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80874f8:	683b      	ldr	r3, [r7, #0]
 80874fa:	681b      	ldr	r3, [r3, #0]
 80874fc:	697a      	ldr	r2, [r7, #20]
 80874fe:	4313      	orrs	r3, r2
 8087500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8087502:	687b      	ldr	r3, [r7, #4]
 8087504:	681b      	ldr	r3, [r3, #0]
 8087506:	697a      	ldr	r2, [r7, #20]
 8087508:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 808750a:	683b      	ldr	r3, [r7, #0]
 808750c:	685b      	ldr	r3, [r3, #4]
 808750e:	2b30      	cmp	r3, #48	; 0x30
 8087510:	d05c      	beq.n	80875cc <TIM_SlaveTimer_SetConfig+0x100>
 8087512:	2b30      	cmp	r3, #48	; 0x30
 8087514:	d806      	bhi.n	8087524 <TIM_SlaveTimer_SetConfig+0x58>
 8087516:	2b10      	cmp	r3, #16
 8087518:	d058      	beq.n	80875cc <TIM_SlaveTimer_SetConfig+0x100>
 808751a:	2b20      	cmp	r3, #32
 808751c:	d056      	beq.n	80875cc <TIM_SlaveTimer_SetConfig+0x100>
 808751e:	2b00      	cmp	r3, #0
 8087520:	d054      	beq.n	80875cc <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8087522:	e054      	b.n	80875ce <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8087524:	2b50      	cmp	r3, #80	; 0x50
 8087526:	d03d      	beq.n	80875a4 <TIM_SlaveTimer_SetConfig+0xd8>
 8087528:	2b50      	cmp	r3, #80	; 0x50
 808752a:	d802      	bhi.n	8087532 <TIM_SlaveTimer_SetConfig+0x66>
 808752c:	2b40      	cmp	r3, #64	; 0x40
 808752e:	d010      	beq.n	8087552 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8087530:	e04d      	b.n	80875ce <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8087532:	2b60      	cmp	r3, #96	; 0x60
 8087534:	d040      	beq.n	80875b8 <TIM_SlaveTimer_SetConfig+0xec>
 8087536:	2b70      	cmp	r3, #112	; 0x70
 8087538:	d000      	beq.n	808753c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 808753a:	e048      	b.n	80875ce <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 808753c:	687b      	ldr	r3, [r7, #4]
 808753e:	6818      	ldr	r0, [r3, #0]
 8087540:	683b      	ldr	r3, [r7, #0]
 8087542:	68d9      	ldr	r1, [r3, #12]
 8087544:	683b      	ldr	r3, [r7, #0]
 8087546:	689a      	ldr	r2, [r3, #8]
 8087548:	683b      	ldr	r3, [r7, #0]
 808754a:	691b      	ldr	r3, [r3, #16]
 808754c:	f000 f9e8 	bl	8087920 <TIM_ETR_SetConfig>
      break;
 8087550:	e03d      	b.n	80875ce <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8087552:	683b      	ldr	r3, [r7, #0]
 8087554:	681b      	ldr	r3, [r3, #0]
 8087556:	2b05      	cmp	r3, #5
 8087558:	d101      	bne.n	808755e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 808755a:	2301      	movs	r3, #1
 808755c:	e038      	b.n	80875d0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 808755e:	687b      	ldr	r3, [r7, #4]
 8087560:	681b      	ldr	r3, [r3, #0]
 8087562:	6a1b      	ldr	r3, [r3, #32]
 8087564:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8087566:	687b      	ldr	r3, [r7, #4]
 8087568:	681b      	ldr	r3, [r3, #0]
 808756a:	6a1a      	ldr	r2, [r3, #32]
 808756c:	687b      	ldr	r3, [r7, #4]
 808756e:	681b      	ldr	r3, [r3, #0]
 8087570:	f022 0201 	bic.w	r2, r2, #1
 8087574:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8087576:	687b      	ldr	r3, [r7, #4]
 8087578:	681b      	ldr	r3, [r3, #0]
 808757a:	699b      	ldr	r3, [r3, #24]
 808757c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 808757e:	68fb      	ldr	r3, [r7, #12]
 8087580:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8087584:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8087586:	683b      	ldr	r3, [r7, #0]
 8087588:	691b      	ldr	r3, [r3, #16]
 808758a:	011b      	lsls	r3, r3, #4
 808758c:	68fa      	ldr	r2, [r7, #12]
 808758e:	4313      	orrs	r3, r2
 8087590:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8087592:	687b      	ldr	r3, [r7, #4]
 8087594:	681b      	ldr	r3, [r3, #0]
 8087596:	68fa      	ldr	r2, [r7, #12]
 8087598:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 808759a:	687b      	ldr	r3, [r7, #4]
 808759c:	681b      	ldr	r3, [r3, #0]
 808759e:	693a      	ldr	r2, [r7, #16]
 80875a0:	621a      	str	r2, [r3, #32]
      break;
 80875a2:	e014      	b.n	80875ce <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80875a4:	687b      	ldr	r3, [r7, #4]
 80875a6:	6818      	ldr	r0, [r3, #0]
 80875a8:	683b      	ldr	r3, [r7, #0]
 80875aa:	6899      	ldr	r1, [r3, #8]
 80875ac:	683b      	ldr	r3, [r7, #0]
 80875ae:	691b      	ldr	r3, [r3, #16]
 80875b0:	461a      	mov	r2, r3
 80875b2:	f000 f885 	bl	80876c0 <TIM_TI1_ConfigInputStage>
      break;
 80875b6:	e00a      	b.n	80875ce <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80875b8:	687b      	ldr	r3, [r7, #4]
 80875ba:	6818      	ldr	r0, [r3, #0]
 80875bc:	683b      	ldr	r3, [r7, #0]
 80875be:	6899      	ldr	r1, [r3, #8]
 80875c0:	683b      	ldr	r3, [r7, #0]
 80875c2:	691b      	ldr	r3, [r3, #16]
 80875c4:	461a      	mov	r2, r3
 80875c6:	f000 f8e7 	bl	8087798 <TIM_TI2_ConfigInputStage>
      break;
 80875ca:	e000      	b.n	80875ce <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80875cc:	bf00      	nop
  }
  return HAL_OK;
 80875ce:	2300      	movs	r3, #0
}
 80875d0:	4618      	mov	r0, r3
 80875d2:	3718      	adds	r7, #24
 80875d4:	46bd      	mov	sp, r7
 80875d6:	bd80      	pop	{r7, pc}

080875d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80875d8:	b480      	push	{r7}
 80875da:	b087      	sub	sp, #28
 80875dc:	af00      	add	r7, sp, #0
 80875de:	60f8      	str	r0, [r7, #12]
 80875e0:	60b9      	str	r1, [r7, #8]
 80875e2:	607a      	str	r2, [r7, #4]
 80875e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80875e6:	68fb      	ldr	r3, [r7, #12]
 80875e8:	6a1b      	ldr	r3, [r3, #32]
 80875ea:	f023 0201 	bic.w	r2, r3, #1
 80875ee:	68fb      	ldr	r3, [r7, #12]
 80875f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80875f2:	68fb      	ldr	r3, [r7, #12]
 80875f4:	699b      	ldr	r3, [r3, #24]
 80875f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80875f8:	68fb      	ldr	r3, [r7, #12]
 80875fa:	6a1b      	ldr	r3, [r3, #32]
 80875fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80875fe:	68fb      	ldr	r3, [r7, #12]
 8087600:	4a28      	ldr	r2, [pc, #160]	; (80876a4 <TIM_TI1_SetConfig+0xcc>)
 8087602:	4293      	cmp	r3, r2
 8087604:	d01b      	beq.n	808763e <TIM_TI1_SetConfig+0x66>
 8087606:	68fb      	ldr	r3, [r7, #12]
 8087608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 808760c:	d017      	beq.n	808763e <TIM_TI1_SetConfig+0x66>
 808760e:	68fb      	ldr	r3, [r7, #12]
 8087610:	4a25      	ldr	r2, [pc, #148]	; (80876a8 <TIM_TI1_SetConfig+0xd0>)
 8087612:	4293      	cmp	r3, r2
 8087614:	d013      	beq.n	808763e <TIM_TI1_SetConfig+0x66>
 8087616:	68fb      	ldr	r3, [r7, #12]
 8087618:	4a24      	ldr	r2, [pc, #144]	; (80876ac <TIM_TI1_SetConfig+0xd4>)
 808761a:	4293      	cmp	r3, r2
 808761c:	d00f      	beq.n	808763e <TIM_TI1_SetConfig+0x66>
 808761e:	68fb      	ldr	r3, [r7, #12]
 8087620:	4a23      	ldr	r2, [pc, #140]	; (80876b0 <TIM_TI1_SetConfig+0xd8>)
 8087622:	4293      	cmp	r3, r2
 8087624:	d00b      	beq.n	808763e <TIM_TI1_SetConfig+0x66>
 8087626:	68fb      	ldr	r3, [r7, #12]
 8087628:	4a22      	ldr	r2, [pc, #136]	; (80876b4 <TIM_TI1_SetConfig+0xdc>)
 808762a:	4293      	cmp	r3, r2
 808762c:	d007      	beq.n	808763e <TIM_TI1_SetConfig+0x66>
 808762e:	68fb      	ldr	r3, [r7, #12]
 8087630:	4a21      	ldr	r2, [pc, #132]	; (80876b8 <TIM_TI1_SetConfig+0xe0>)
 8087632:	4293      	cmp	r3, r2
 8087634:	d003      	beq.n	808763e <TIM_TI1_SetConfig+0x66>
 8087636:	68fb      	ldr	r3, [r7, #12]
 8087638:	4a20      	ldr	r2, [pc, #128]	; (80876bc <TIM_TI1_SetConfig+0xe4>)
 808763a:	4293      	cmp	r3, r2
 808763c:	d101      	bne.n	8087642 <TIM_TI1_SetConfig+0x6a>
 808763e:	2301      	movs	r3, #1
 8087640:	e000      	b.n	8087644 <TIM_TI1_SetConfig+0x6c>
 8087642:	2300      	movs	r3, #0
 8087644:	2b00      	cmp	r3, #0
 8087646:	d008      	beq.n	808765a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8087648:	697b      	ldr	r3, [r7, #20]
 808764a:	f023 0303 	bic.w	r3, r3, #3
 808764e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8087650:	697a      	ldr	r2, [r7, #20]
 8087652:	687b      	ldr	r3, [r7, #4]
 8087654:	4313      	orrs	r3, r2
 8087656:	617b      	str	r3, [r7, #20]
 8087658:	e003      	b.n	8087662 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 808765a:	697b      	ldr	r3, [r7, #20]
 808765c:	f043 0301 	orr.w	r3, r3, #1
 8087660:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8087662:	697b      	ldr	r3, [r7, #20]
 8087664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8087668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 808766a:	683b      	ldr	r3, [r7, #0]
 808766c:	011b      	lsls	r3, r3, #4
 808766e:	b2db      	uxtb	r3, r3
 8087670:	697a      	ldr	r2, [r7, #20]
 8087672:	4313      	orrs	r3, r2
 8087674:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8087676:	693b      	ldr	r3, [r7, #16]
 8087678:	f023 030a 	bic.w	r3, r3, #10
 808767c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 808767e:	68bb      	ldr	r3, [r7, #8]
 8087680:	f003 030a 	and.w	r3, r3, #10
 8087684:	693a      	ldr	r2, [r7, #16]
 8087686:	4313      	orrs	r3, r2
 8087688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 808768a:	68fb      	ldr	r3, [r7, #12]
 808768c:	697a      	ldr	r2, [r7, #20]
 808768e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8087690:	68fb      	ldr	r3, [r7, #12]
 8087692:	693a      	ldr	r2, [r7, #16]
 8087694:	621a      	str	r2, [r3, #32]
}
 8087696:	bf00      	nop
 8087698:	371c      	adds	r7, #28
 808769a:	46bd      	mov	sp, r7
 808769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80876a0:	4770      	bx	lr
 80876a2:	bf00      	nop
 80876a4:	40010000 	.word	0x40010000
 80876a8:	40000400 	.word	0x40000400
 80876ac:	40000800 	.word	0x40000800
 80876b0:	40000c00 	.word	0x40000c00
 80876b4:	40010400 	.word	0x40010400
 80876b8:	40014000 	.word	0x40014000
 80876bc:	40001800 	.word	0x40001800

080876c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80876c0:	b480      	push	{r7}
 80876c2:	b087      	sub	sp, #28
 80876c4:	af00      	add	r7, sp, #0
 80876c6:	60f8      	str	r0, [r7, #12]
 80876c8:	60b9      	str	r1, [r7, #8]
 80876ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80876cc:	68fb      	ldr	r3, [r7, #12]
 80876ce:	6a1b      	ldr	r3, [r3, #32]
 80876d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80876d2:	68fb      	ldr	r3, [r7, #12]
 80876d4:	6a1b      	ldr	r3, [r3, #32]
 80876d6:	f023 0201 	bic.w	r2, r3, #1
 80876da:	68fb      	ldr	r3, [r7, #12]
 80876dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80876de:	68fb      	ldr	r3, [r7, #12]
 80876e0:	699b      	ldr	r3, [r3, #24]
 80876e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80876e4:	693b      	ldr	r3, [r7, #16]
 80876e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80876ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80876ec:	687b      	ldr	r3, [r7, #4]
 80876ee:	011b      	lsls	r3, r3, #4
 80876f0:	693a      	ldr	r2, [r7, #16]
 80876f2:	4313      	orrs	r3, r2
 80876f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80876f6:	697b      	ldr	r3, [r7, #20]
 80876f8:	f023 030a 	bic.w	r3, r3, #10
 80876fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80876fe:	697a      	ldr	r2, [r7, #20]
 8087700:	68bb      	ldr	r3, [r7, #8]
 8087702:	4313      	orrs	r3, r2
 8087704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8087706:	68fb      	ldr	r3, [r7, #12]
 8087708:	693a      	ldr	r2, [r7, #16]
 808770a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 808770c:	68fb      	ldr	r3, [r7, #12]
 808770e:	697a      	ldr	r2, [r7, #20]
 8087710:	621a      	str	r2, [r3, #32]
}
 8087712:	bf00      	nop
 8087714:	371c      	adds	r7, #28
 8087716:	46bd      	mov	sp, r7
 8087718:	f85d 7b04 	ldr.w	r7, [sp], #4
 808771c:	4770      	bx	lr

0808771e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 808771e:	b480      	push	{r7}
 8087720:	b087      	sub	sp, #28
 8087722:	af00      	add	r7, sp, #0
 8087724:	60f8      	str	r0, [r7, #12]
 8087726:	60b9      	str	r1, [r7, #8]
 8087728:	607a      	str	r2, [r7, #4]
 808772a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 808772c:	68fb      	ldr	r3, [r7, #12]
 808772e:	6a1b      	ldr	r3, [r3, #32]
 8087730:	f023 0210 	bic.w	r2, r3, #16
 8087734:	68fb      	ldr	r3, [r7, #12]
 8087736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8087738:	68fb      	ldr	r3, [r7, #12]
 808773a:	699b      	ldr	r3, [r3, #24]
 808773c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 808773e:	68fb      	ldr	r3, [r7, #12]
 8087740:	6a1b      	ldr	r3, [r3, #32]
 8087742:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8087744:	697b      	ldr	r3, [r7, #20]
 8087746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 808774a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 808774c:	687b      	ldr	r3, [r7, #4]
 808774e:	021b      	lsls	r3, r3, #8
 8087750:	697a      	ldr	r2, [r7, #20]
 8087752:	4313      	orrs	r3, r2
 8087754:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8087756:	697b      	ldr	r3, [r7, #20]
 8087758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 808775c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 808775e:	683b      	ldr	r3, [r7, #0]
 8087760:	031b      	lsls	r3, r3, #12
 8087762:	b29b      	uxth	r3, r3
 8087764:	697a      	ldr	r2, [r7, #20]
 8087766:	4313      	orrs	r3, r2
 8087768:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 808776a:	693b      	ldr	r3, [r7, #16]
 808776c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8087770:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8087772:	68bb      	ldr	r3, [r7, #8]
 8087774:	011b      	lsls	r3, r3, #4
 8087776:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 808777a:	693a      	ldr	r2, [r7, #16]
 808777c:	4313      	orrs	r3, r2
 808777e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8087780:	68fb      	ldr	r3, [r7, #12]
 8087782:	697a      	ldr	r2, [r7, #20]
 8087784:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8087786:	68fb      	ldr	r3, [r7, #12]
 8087788:	693a      	ldr	r2, [r7, #16]
 808778a:	621a      	str	r2, [r3, #32]
}
 808778c:	bf00      	nop
 808778e:	371c      	adds	r7, #28
 8087790:	46bd      	mov	sp, r7
 8087792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087796:	4770      	bx	lr

08087798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8087798:	b480      	push	{r7}
 808779a:	b087      	sub	sp, #28
 808779c:	af00      	add	r7, sp, #0
 808779e:	60f8      	str	r0, [r7, #12]
 80877a0:	60b9      	str	r1, [r7, #8]
 80877a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80877a4:	68fb      	ldr	r3, [r7, #12]
 80877a6:	6a1b      	ldr	r3, [r3, #32]
 80877a8:	f023 0210 	bic.w	r2, r3, #16
 80877ac:	68fb      	ldr	r3, [r7, #12]
 80877ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80877b0:	68fb      	ldr	r3, [r7, #12]
 80877b2:	699b      	ldr	r3, [r3, #24]
 80877b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80877b6:	68fb      	ldr	r3, [r7, #12]
 80877b8:	6a1b      	ldr	r3, [r3, #32]
 80877ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80877bc:	697b      	ldr	r3, [r7, #20]
 80877be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80877c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80877c4:	687b      	ldr	r3, [r7, #4]
 80877c6:	031b      	lsls	r3, r3, #12
 80877c8:	697a      	ldr	r2, [r7, #20]
 80877ca:	4313      	orrs	r3, r2
 80877cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80877ce:	693b      	ldr	r3, [r7, #16]
 80877d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80877d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80877d6:	68bb      	ldr	r3, [r7, #8]
 80877d8:	011b      	lsls	r3, r3, #4
 80877da:	693a      	ldr	r2, [r7, #16]
 80877dc:	4313      	orrs	r3, r2
 80877de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80877e0:	68fb      	ldr	r3, [r7, #12]
 80877e2:	697a      	ldr	r2, [r7, #20]
 80877e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80877e6:	68fb      	ldr	r3, [r7, #12]
 80877e8:	693a      	ldr	r2, [r7, #16]
 80877ea:	621a      	str	r2, [r3, #32]
}
 80877ec:	bf00      	nop
 80877ee:	371c      	adds	r7, #28
 80877f0:	46bd      	mov	sp, r7
 80877f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80877f6:	4770      	bx	lr

080877f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80877f8:	b480      	push	{r7}
 80877fa:	b087      	sub	sp, #28
 80877fc:	af00      	add	r7, sp, #0
 80877fe:	60f8      	str	r0, [r7, #12]
 8087800:	60b9      	str	r1, [r7, #8]
 8087802:	607a      	str	r2, [r7, #4]
 8087804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8087806:	68fb      	ldr	r3, [r7, #12]
 8087808:	6a1b      	ldr	r3, [r3, #32]
 808780a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 808780e:	68fb      	ldr	r3, [r7, #12]
 8087810:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8087812:	68fb      	ldr	r3, [r7, #12]
 8087814:	69db      	ldr	r3, [r3, #28]
 8087816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8087818:	68fb      	ldr	r3, [r7, #12]
 808781a:	6a1b      	ldr	r3, [r3, #32]
 808781c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 808781e:	697b      	ldr	r3, [r7, #20]
 8087820:	f023 0303 	bic.w	r3, r3, #3
 8087824:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8087826:	697a      	ldr	r2, [r7, #20]
 8087828:	687b      	ldr	r3, [r7, #4]
 808782a:	4313      	orrs	r3, r2
 808782c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 808782e:	697b      	ldr	r3, [r7, #20]
 8087830:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8087834:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8087836:	683b      	ldr	r3, [r7, #0]
 8087838:	011b      	lsls	r3, r3, #4
 808783a:	b2db      	uxtb	r3, r3
 808783c:	697a      	ldr	r2, [r7, #20]
 808783e:	4313      	orrs	r3, r2
 8087840:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8087842:	693b      	ldr	r3, [r7, #16]
 8087844:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8087848:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 808784a:	68bb      	ldr	r3, [r7, #8]
 808784c:	021b      	lsls	r3, r3, #8
 808784e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8087852:	693a      	ldr	r2, [r7, #16]
 8087854:	4313      	orrs	r3, r2
 8087856:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8087858:	68fb      	ldr	r3, [r7, #12]
 808785a:	697a      	ldr	r2, [r7, #20]
 808785c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 808785e:	68fb      	ldr	r3, [r7, #12]
 8087860:	693a      	ldr	r2, [r7, #16]
 8087862:	621a      	str	r2, [r3, #32]
}
 8087864:	bf00      	nop
 8087866:	371c      	adds	r7, #28
 8087868:	46bd      	mov	sp, r7
 808786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808786e:	4770      	bx	lr

08087870 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8087870:	b480      	push	{r7}
 8087872:	b087      	sub	sp, #28
 8087874:	af00      	add	r7, sp, #0
 8087876:	60f8      	str	r0, [r7, #12]
 8087878:	60b9      	str	r1, [r7, #8]
 808787a:	607a      	str	r2, [r7, #4]
 808787c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 808787e:	68fb      	ldr	r3, [r7, #12]
 8087880:	6a1b      	ldr	r3, [r3, #32]
 8087882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8087886:	68fb      	ldr	r3, [r7, #12]
 8087888:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 808788a:	68fb      	ldr	r3, [r7, #12]
 808788c:	69db      	ldr	r3, [r3, #28]
 808788e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8087890:	68fb      	ldr	r3, [r7, #12]
 8087892:	6a1b      	ldr	r3, [r3, #32]
 8087894:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8087896:	697b      	ldr	r3, [r7, #20]
 8087898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 808789c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 808789e:	687b      	ldr	r3, [r7, #4]
 80878a0:	021b      	lsls	r3, r3, #8
 80878a2:	697a      	ldr	r2, [r7, #20]
 80878a4:	4313      	orrs	r3, r2
 80878a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80878a8:	697b      	ldr	r3, [r7, #20]
 80878aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80878ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80878b0:	683b      	ldr	r3, [r7, #0]
 80878b2:	031b      	lsls	r3, r3, #12
 80878b4:	b29b      	uxth	r3, r3
 80878b6:	697a      	ldr	r2, [r7, #20]
 80878b8:	4313      	orrs	r3, r2
 80878ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80878bc:	693b      	ldr	r3, [r7, #16]
 80878be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80878c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80878c4:	68bb      	ldr	r3, [r7, #8]
 80878c6:	031b      	lsls	r3, r3, #12
 80878c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80878cc:	693a      	ldr	r2, [r7, #16]
 80878ce:	4313      	orrs	r3, r2
 80878d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80878d2:	68fb      	ldr	r3, [r7, #12]
 80878d4:	697a      	ldr	r2, [r7, #20]
 80878d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80878d8:	68fb      	ldr	r3, [r7, #12]
 80878da:	693a      	ldr	r2, [r7, #16]
 80878dc:	621a      	str	r2, [r3, #32]
}
 80878de:	bf00      	nop
 80878e0:	371c      	adds	r7, #28
 80878e2:	46bd      	mov	sp, r7
 80878e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80878e8:	4770      	bx	lr

080878ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80878ea:	b480      	push	{r7}
 80878ec:	b085      	sub	sp, #20
 80878ee:	af00      	add	r7, sp, #0
 80878f0:	6078      	str	r0, [r7, #4]
 80878f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80878f4:	687b      	ldr	r3, [r7, #4]
 80878f6:	689b      	ldr	r3, [r3, #8]
 80878f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80878fa:	68fb      	ldr	r3, [r7, #12]
 80878fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8087900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8087902:	683a      	ldr	r2, [r7, #0]
 8087904:	68fb      	ldr	r3, [r7, #12]
 8087906:	4313      	orrs	r3, r2
 8087908:	f043 0307 	orr.w	r3, r3, #7
 808790c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 808790e:	687b      	ldr	r3, [r7, #4]
 8087910:	68fa      	ldr	r2, [r7, #12]
 8087912:	609a      	str	r2, [r3, #8]
}
 8087914:	bf00      	nop
 8087916:	3714      	adds	r7, #20
 8087918:	46bd      	mov	sp, r7
 808791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808791e:	4770      	bx	lr

08087920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8087920:	b480      	push	{r7}
 8087922:	b087      	sub	sp, #28
 8087924:	af00      	add	r7, sp, #0
 8087926:	60f8      	str	r0, [r7, #12]
 8087928:	60b9      	str	r1, [r7, #8]
 808792a:	607a      	str	r2, [r7, #4]
 808792c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 808792e:	68fb      	ldr	r3, [r7, #12]
 8087930:	689b      	ldr	r3, [r3, #8]
 8087932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8087934:	697b      	ldr	r3, [r7, #20]
 8087936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 808793a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 808793c:	683b      	ldr	r3, [r7, #0]
 808793e:	021a      	lsls	r2, r3, #8
 8087940:	687b      	ldr	r3, [r7, #4]
 8087942:	431a      	orrs	r2, r3
 8087944:	68bb      	ldr	r3, [r7, #8]
 8087946:	4313      	orrs	r3, r2
 8087948:	697a      	ldr	r2, [r7, #20]
 808794a:	4313      	orrs	r3, r2
 808794c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 808794e:	68fb      	ldr	r3, [r7, #12]
 8087950:	697a      	ldr	r2, [r7, #20]
 8087952:	609a      	str	r2, [r3, #8]
}
 8087954:	bf00      	nop
 8087956:	371c      	adds	r7, #28
 8087958:	46bd      	mov	sp, r7
 808795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808795e:	4770      	bx	lr

08087960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8087960:	b480      	push	{r7}
 8087962:	b087      	sub	sp, #28
 8087964:	af00      	add	r7, sp, #0
 8087966:	60f8      	str	r0, [r7, #12]
 8087968:	60b9      	str	r1, [r7, #8]
 808796a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 808796c:	68bb      	ldr	r3, [r7, #8]
 808796e:	f003 031f 	and.w	r3, r3, #31
 8087972:	2201      	movs	r2, #1
 8087974:	fa02 f303 	lsl.w	r3, r2, r3
 8087978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 808797a:	68fb      	ldr	r3, [r7, #12]
 808797c:	6a1a      	ldr	r2, [r3, #32]
 808797e:	697b      	ldr	r3, [r7, #20]
 8087980:	43db      	mvns	r3, r3
 8087982:	401a      	ands	r2, r3
 8087984:	68fb      	ldr	r3, [r7, #12]
 8087986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8087988:	68fb      	ldr	r3, [r7, #12]
 808798a:	6a1a      	ldr	r2, [r3, #32]
 808798c:	68bb      	ldr	r3, [r7, #8]
 808798e:	f003 031f 	and.w	r3, r3, #31
 8087992:	6879      	ldr	r1, [r7, #4]
 8087994:	fa01 f303 	lsl.w	r3, r1, r3
 8087998:	431a      	orrs	r2, r3
 808799a:	68fb      	ldr	r3, [r7, #12]
 808799c:	621a      	str	r2, [r3, #32]
}
 808799e:	bf00      	nop
 80879a0:	371c      	adds	r7, #28
 80879a2:	46bd      	mov	sp, r7
 80879a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80879a8:	4770      	bx	lr
 80879aa:	bf00      	nop

080879ac <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80879ac:	b580      	push	{r7, lr}
 80879ae:	b08a      	sub	sp, #40	; 0x28
 80879b0:	af00      	add	r7, sp, #0
 80879b2:	6078      	str	r0, [r7, #4]
 80879b4:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80879b6:	687b      	ldr	r3, [r7, #4]
 80879b8:	2b00      	cmp	r3, #0
 80879ba:	d101      	bne.n	80879c0 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80879bc:	2301      	movs	r3, #1
 80879be:	e086      	b.n	8087ace <HAL_TIMEx_HallSensor_Init+0x122>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80879c0:	687b      	ldr	r3, [r7, #4]
 80879c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80879c6:	b2db      	uxtb	r3, r3
 80879c8:	2b00      	cmp	r3, #0
 80879ca:	d106      	bne.n	80879da <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80879cc:	687b      	ldr	r3, [r7, #4]
 80879ce:	2200      	movs	r2, #0
 80879d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80879d4:	6878      	ldr	r0, [r7, #4]
 80879d6:	f000 f8ae 	bl	8087b36 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80879da:	687b      	ldr	r3, [r7, #4]
 80879dc:	2202      	movs	r2, #2
 80879de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80879e2:	687b      	ldr	r3, [r7, #4]
 80879e4:	681a      	ldr	r2, [r3, #0]
 80879e6:	687b      	ldr	r3, [r7, #4]
 80879e8:	3304      	adds	r3, #4
 80879ea:	4619      	mov	r1, r3
 80879ec:	4610      	mov	r0, r2
 80879ee:	f7ff fb1d 	bl	808702c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80879f2:	687b      	ldr	r3, [r7, #4]
 80879f4:	6818      	ldr	r0, [r3, #0]
 80879f6:	683b      	ldr	r3, [r7, #0]
 80879f8:	6819      	ldr	r1, [r3, #0]
 80879fa:	683b      	ldr	r3, [r7, #0]
 80879fc:	689b      	ldr	r3, [r3, #8]
 80879fe:	2203      	movs	r2, #3
 8087a00:	f7ff fdea 	bl	80875d8 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8087a04:	687b      	ldr	r3, [r7, #4]
 8087a06:	681b      	ldr	r3, [r3, #0]
 8087a08:	699a      	ldr	r2, [r3, #24]
 8087a0a:	687b      	ldr	r3, [r7, #4]
 8087a0c:	681b      	ldr	r3, [r3, #0]
 8087a0e:	f022 020c 	bic.w	r2, r2, #12
 8087a12:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8087a14:	687b      	ldr	r3, [r7, #4]
 8087a16:	681b      	ldr	r3, [r3, #0]
 8087a18:	6999      	ldr	r1, [r3, #24]
 8087a1a:	683b      	ldr	r3, [r7, #0]
 8087a1c:	685a      	ldr	r2, [r3, #4]
 8087a1e:	687b      	ldr	r3, [r7, #4]
 8087a20:	681b      	ldr	r3, [r3, #0]
 8087a22:	430a      	orrs	r2, r1
 8087a24:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8087a26:	687b      	ldr	r3, [r7, #4]
 8087a28:	681b      	ldr	r3, [r3, #0]
 8087a2a:	685a      	ldr	r2, [r3, #4]
 8087a2c:	687b      	ldr	r3, [r7, #4]
 8087a2e:	681b      	ldr	r3, [r3, #0]
 8087a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8087a34:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8087a36:	687b      	ldr	r3, [r7, #4]
 8087a38:	681b      	ldr	r3, [r3, #0]
 8087a3a:	689a      	ldr	r2, [r3, #8]
 8087a3c:	687b      	ldr	r3, [r7, #4]
 8087a3e:	681b      	ldr	r3, [r3, #0]
 8087a40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8087a44:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8087a46:	687b      	ldr	r3, [r7, #4]
 8087a48:	681b      	ldr	r3, [r3, #0]
 8087a4a:	689a      	ldr	r2, [r3, #8]
 8087a4c:	687b      	ldr	r3, [r7, #4]
 8087a4e:	681b      	ldr	r3, [r3, #0]
 8087a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8087a54:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8087a56:	687b      	ldr	r3, [r7, #4]
 8087a58:	681b      	ldr	r3, [r3, #0]
 8087a5a:	689a      	ldr	r2, [r3, #8]
 8087a5c:	687b      	ldr	r3, [r7, #4]
 8087a5e:	681b      	ldr	r3, [r3, #0]
 8087a60:	f022 0207 	bic.w	r2, r2, #7
 8087a64:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8087a66:	687b      	ldr	r3, [r7, #4]
 8087a68:	681b      	ldr	r3, [r3, #0]
 8087a6a:	689a      	ldr	r2, [r3, #8]
 8087a6c:	687b      	ldr	r3, [r7, #4]
 8087a6e:	681b      	ldr	r3, [r3, #0]
 8087a70:	f042 0204 	orr.w	r2, r2, #4
 8087a74:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8087a76:	2300      	movs	r3, #0
 8087a78:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8087a7a:	2300      	movs	r3, #0
 8087a7c:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8087a7e:	2370      	movs	r3, #112	; 0x70
 8087a80:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8087a82:	2300      	movs	r3, #0
 8087a84:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8087a86:	2300      	movs	r3, #0
 8087a88:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8087a8a:	2300      	movs	r3, #0
 8087a8c:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8087a8e:	683b      	ldr	r3, [r7, #0]
 8087a90:	68db      	ldr	r3, [r3, #12]
 8087a92:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8087a94:	687b      	ldr	r3, [r7, #4]
 8087a96:	681b      	ldr	r3, [r3, #0]
 8087a98:	f107 020c 	add.w	r2, r7, #12
 8087a9c:	4611      	mov	r1, r2
 8087a9e:	4618      	mov	r0, r3
 8087aa0:	f7ff fbd4 	bl	808724c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8087aa4:	687b      	ldr	r3, [r7, #4]
 8087aa6:	681b      	ldr	r3, [r3, #0]
 8087aa8:	685a      	ldr	r2, [r3, #4]
 8087aaa:	687b      	ldr	r3, [r7, #4]
 8087aac:	681b      	ldr	r3, [r3, #0]
 8087aae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8087ab2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8087ab4:	687b      	ldr	r3, [r7, #4]
 8087ab6:	681b      	ldr	r3, [r3, #0]
 8087ab8:	685a      	ldr	r2, [r3, #4]
 8087aba:	687b      	ldr	r3, [r7, #4]
 8087abc:	681b      	ldr	r3, [r3, #0]
 8087abe:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8087ac2:	605a      	str	r2, [r3, #4]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8087ac4:	687b      	ldr	r3, [r7, #4]
 8087ac6:	2201      	movs	r2, #1
 8087ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8087acc:	2300      	movs	r3, #0
}
 8087ace:	4618      	mov	r0, r3
 8087ad0:	3728      	adds	r7, #40	; 0x28
 8087ad2:	46bd      	mov	sp, r7
 8087ad4:	bd80      	pop	{r7, pc}

08087ad6 <HAL_TIMEx_HallSensor_DeInit>:
  * @brief  DeInitializes the TIM Hall Sensor interface
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 8087ad6:	b580      	push	{r7, lr}
 8087ad8:	b082      	sub	sp, #8
 8087ada:	af00      	add	r7, sp, #0
 8087adc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8087ade:	687b      	ldr	r3, [r7, #4]
 8087ae0:	2202      	movs	r2, #2
 8087ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8087ae6:	687b      	ldr	r3, [r7, #4]
 8087ae8:	681b      	ldr	r3, [r3, #0]
 8087aea:	6a1a      	ldr	r2, [r3, #32]
 8087aec:	f241 1311 	movw	r3, #4369	; 0x1111
 8087af0:	4013      	ands	r3, r2
 8087af2:	2b00      	cmp	r3, #0
 8087af4:	d10f      	bne.n	8087b16 <HAL_TIMEx_HallSensor_DeInit+0x40>
 8087af6:	687b      	ldr	r3, [r7, #4]
 8087af8:	681b      	ldr	r3, [r3, #0]
 8087afa:	6a1a      	ldr	r2, [r3, #32]
 8087afc:	f240 4344 	movw	r3, #1092	; 0x444
 8087b00:	4013      	ands	r3, r2
 8087b02:	2b00      	cmp	r3, #0
 8087b04:	d107      	bne.n	8087b16 <HAL_TIMEx_HallSensor_DeInit+0x40>
 8087b06:	687b      	ldr	r3, [r7, #4]
 8087b08:	681b      	ldr	r3, [r3, #0]
 8087b0a:	681a      	ldr	r2, [r3, #0]
 8087b0c:	687b      	ldr	r3, [r7, #4]
 8087b0e:	681b      	ldr	r3, [r3, #0]
 8087b10:	f022 0201 	bic.w	r2, r2, #1
 8087b14:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->HallSensor_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 8087b16:	6878      	ldr	r0, [r7, #4]
 8087b18:	f000 f817 	bl	8087b4a <HAL_TIMEx_HallSensor_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8087b1c:	687b      	ldr	r3, [r7, #4]
 8087b1e:	2200      	movs	r2, #0
 8087b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8087b24:	687b      	ldr	r3, [r7, #4]
 8087b26:	2200      	movs	r2, #0
 8087b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8087b2c:	2300      	movs	r3, #0
}
 8087b2e:	4618      	mov	r0, r3
 8087b30:	3708      	adds	r7, #8
 8087b32:	46bd      	mov	sp, r7
 8087b34:	bd80      	pop	{r7, pc}

08087b36 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8087b36:	b480      	push	{r7}
 8087b38:	b083      	sub	sp, #12
 8087b3a:	af00      	add	r7, sp, #0
 8087b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8087b3e:	bf00      	nop
 8087b40:	370c      	adds	r7, #12
 8087b42:	46bd      	mov	sp, r7
 8087b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087b48:	4770      	bx	lr

08087b4a <HAL_TIMEx_HallSensor_MspDeInit>:
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 8087b4a:	b480      	push	{r7}
 8087b4c:	b083      	sub	sp, #12
 8087b4e:	af00      	add	r7, sp, #0
 8087b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 8087b52:	bf00      	nop
 8087b54:	370c      	adds	r7, #12
 8087b56:	46bd      	mov	sp, r7
 8087b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087b5c:	4770      	bx	lr

08087b5e <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 8087b5e:	b580      	push	{r7, lr}
 8087b60:	b084      	sub	sp, #16
 8087b62:	af00      	add	r7, sp, #0
 8087b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8087b66:	687b      	ldr	r3, [r7, #4]
 8087b68:	681b      	ldr	r3, [r3, #0]
 8087b6a:	2201      	movs	r2, #1
 8087b6c:	2100      	movs	r1, #0
 8087b6e:	4618      	mov	r0, r3
 8087b70:	f7ff fef6 	bl	8087960 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8087b74:	687b      	ldr	r3, [r7, #4]
 8087b76:	681b      	ldr	r3, [r3, #0]
 8087b78:	689b      	ldr	r3, [r3, #8]
 8087b7a:	f003 0307 	and.w	r3, r3, #7
 8087b7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8087b80:	68fb      	ldr	r3, [r7, #12]
 8087b82:	2b06      	cmp	r3, #6
 8087b84:	d007      	beq.n	8087b96 <HAL_TIMEx_HallSensor_Start+0x38>
  {
    __HAL_TIM_ENABLE(htim);
 8087b86:	687b      	ldr	r3, [r7, #4]
 8087b88:	681b      	ldr	r3, [r3, #0]
 8087b8a:	681a      	ldr	r2, [r3, #0]
 8087b8c:	687b      	ldr	r3, [r7, #4]
 8087b8e:	681b      	ldr	r3, [r3, #0]
 8087b90:	f042 0201 	orr.w	r2, r2, #1
 8087b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8087b96:	2300      	movs	r3, #0
}
 8087b98:	4618      	mov	r0, r3
 8087b9a:	3710      	adds	r7, #16
 8087b9c:	46bd      	mov	sp, r7
 8087b9e:	bd80      	pop	{r7, pc}

08087ba0 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 8087ba0:	b580      	push	{r7, lr}
 8087ba2:	b082      	sub	sp, #8
 8087ba4:	af00      	add	r7, sp, #0
 8087ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8087ba8:	687b      	ldr	r3, [r7, #4]
 8087baa:	681b      	ldr	r3, [r3, #0]
 8087bac:	2200      	movs	r2, #0
 8087bae:	2100      	movs	r1, #0
 8087bb0:	4618      	mov	r0, r3
 8087bb2:	f7ff fed5 	bl	8087960 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8087bb6:	687b      	ldr	r3, [r7, #4]
 8087bb8:	681b      	ldr	r3, [r3, #0]
 8087bba:	6a1a      	ldr	r2, [r3, #32]
 8087bbc:	f241 1311 	movw	r3, #4369	; 0x1111
 8087bc0:	4013      	ands	r3, r2
 8087bc2:	2b00      	cmp	r3, #0
 8087bc4:	d10f      	bne.n	8087be6 <HAL_TIMEx_HallSensor_Stop+0x46>
 8087bc6:	687b      	ldr	r3, [r7, #4]
 8087bc8:	681b      	ldr	r3, [r3, #0]
 8087bca:	6a1a      	ldr	r2, [r3, #32]
 8087bcc:	f240 4344 	movw	r3, #1092	; 0x444
 8087bd0:	4013      	ands	r3, r2
 8087bd2:	2b00      	cmp	r3, #0
 8087bd4:	d107      	bne.n	8087be6 <HAL_TIMEx_HallSensor_Stop+0x46>
 8087bd6:	687b      	ldr	r3, [r7, #4]
 8087bd8:	681b      	ldr	r3, [r3, #0]
 8087bda:	681a      	ldr	r2, [r3, #0]
 8087bdc:	687b      	ldr	r3, [r7, #4]
 8087bde:	681b      	ldr	r3, [r3, #0]
 8087be0:	f022 0201 	bic.w	r2, r2, #1
 8087be4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8087be6:	2300      	movs	r3, #0
}
 8087be8:	4618      	mov	r0, r3
 8087bea:	3708      	adds	r7, #8
 8087bec:	46bd      	mov	sp, r7
 8087bee:	bd80      	pop	{r7, pc}

08087bf0 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8087bf0:	b580      	push	{r7, lr}
 8087bf2:	b084      	sub	sp, #16
 8087bf4:	af00      	add	r7, sp, #0
 8087bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8087bf8:	687b      	ldr	r3, [r7, #4]
 8087bfa:	681b      	ldr	r3, [r3, #0]
 8087bfc:	68da      	ldr	r2, [r3, #12]
 8087bfe:	687b      	ldr	r3, [r7, #4]
 8087c00:	681b      	ldr	r3, [r3, #0]
 8087c02:	f042 0202 	orr.w	r2, r2, #2
 8087c06:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8087c08:	687b      	ldr	r3, [r7, #4]
 8087c0a:	681b      	ldr	r3, [r3, #0]
 8087c0c:	2201      	movs	r2, #1
 8087c0e:	2100      	movs	r1, #0
 8087c10:	4618      	mov	r0, r3
 8087c12:	f7ff fea5 	bl	8087960 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8087c16:	687b      	ldr	r3, [r7, #4]
 8087c18:	681b      	ldr	r3, [r3, #0]
 8087c1a:	689b      	ldr	r3, [r3, #8]
 8087c1c:	f003 0307 	and.w	r3, r3, #7
 8087c20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8087c22:	68fb      	ldr	r3, [r7, #12]
 8087c24:	2b06      	cmp	r3, #6
 8087c26:	d007      	beq.n	8087c38 <HAL_TIMEx_HallSensor_Start_IT+0x48>
  {
    __HAL_TIM_ENABLE(htim);
 8087c28:	687b      	ldr	r3, [r7, #4]
 8087c2a:	681b      	ldr	r3, [r3, #0]
 8087c2c:	681a      	ldr	r2, [r3, #0]
 8087c2e:	687b      	ldr	r3, [r7, #4]
 8087c30:	681b      	ldr	r3, [r3, #0]
 8087c32:	f042 0201 	orr.w	r2, r2, #1
 8087c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8087c38:	2300      	movs	r3, #0
}
 8087c3a:	4618      	mov	r0, r3
 8087c3c:	3710      	adds	r7, #16
 8087c3e:	46bd      	mov	sp, r7
 8087c40:	bd80      	pop	{r7, pc}

08087c42 <HAL_TIMEx_HallSensor_Stop_IT>:
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 8087c42:	b580      	push	{r7, lr}
 8087c44:	b082      	sub	sp, #8
 8087c46:	af00      	add	r7, sp, #0
 8087c48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8087c4a:	687b      	ldr	r3, [r7, #4]
 8087c4c:	681b      	ldr	r3, [r3, #0]
 8087c4e:	2200      	movs	r2, #0
 8087c50:	2100      	movs	r1, #0
 8087c52:	4618      	mov	r0, r3
 8087c54:	f7ff fe84 	bl	8087960 <TIM_CCxChannelCmd>

  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8087c58:	687b      	ldr	r3, [r7, #4]
 8087c5a:	681b      	ldr	r3, [r3, #0]
 8087c5c:	68da      	ldr	r2, [r3, #12]
 8087c5e:	687b      	ldr	r3, [r7, #4]
 8087c60:	681b      	ldr	r3, [r3, #0]
 8087c62:	f022 0202 	bic.w	r2, r2, #2
 8087c66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8087c68:	687b      	ldr	r3, [r7, #4]
 8087c6a:	681b      	ldr	r3, [r3, #0]
 8087c6c:	6a1a      	ldr	r2, [r3, #32]
 8087c6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8087c72:	4013      	ands	r3, r2
 8087c74:	2b00      	cmp	r3, #0
 8087c76:	d10f      	bne.n	8087c98 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 8087c78:	687b      	ldr	r3, [r7, #4]
 8087c7a:	681b      	ldr	r3, [r3, #0]
 8087c7c:	6a1a      	ldr	r2, [r3, #32]
 8087c7e:	f240 4344 	movw	r3, #1092	; 0x444
 8087c82:	4013      	ands	r3, r2
 8087c84:	2b00      	cmp	r3, #0
 8087c86:	d107      	bne.n	8087c98 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 8087c88:	687b      	ldr	r3, [r7, #4]
 8087c8a:	681b      	ldr	r3, [r3, #0]
 8087c8c:	681a      	ldr	r2, [r3, #0]
 8087c8e:	687b      	ldr	r3, [r7, #4]
 8087c90:	681b      	ldr	r3, [r3, #0]
 8087c92:	f022 0201 	bic.w	r2, r2, #1
 8087c96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8087c98:	2300      	movs	r3, #0
}
 8087c9a:	4618      	mov	r0, r3
 8087c9c:	3708      	adds	r7, #8
 8087c9e:	46bd      	mov	sp, r7
 8087ca0:	bd80      	pop	{r7, pc}

08087ca2 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8087ca2:	b580      	push	{r7, lr}
 8087ca4:	b086      	sub	sp, #24
 8087ca6:	af00      	add	r7, sp, #0
 8087ca8:	60f8      	str	r0, [r7, #12]
 8087caa:	60b9      	str	r1, [r7, #8]
 8087cac:	4613      	mov	r3, r2
 8087cae:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8087cb0:	68fb      	ldr	r3, [r7, #12]
 8087cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8087cb6:	b2db      	uxtb	r3, r3
 8087cb8:	2b02      	cmp	r3, #2
 8087cba:	d101      	bne.n	8087cc0 <HAL_TIMEx_HallSensor_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8087cbc:	2302      	movs	r3, #2
 8087cbe:	e04d      	b.n	8087d5c <HAL_TIMEx_HallSensor_Start_DMA+0xba>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8087cc0:	68fb      	ldr	r3, [r7, #12]
 8087cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8087cc6:	b2db      	uxtb	r3, r3
 8087cc8:	2b01      	cmp	r3, #1
 8087cca:	d10b      	bne.n	8087ce4 <HAL_TIMEx_HallSensor_Start_DMA+0x42>
  {
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8087ccc:	68bb      	ldr	r3, [r7, #8]
 8087cce:	2b00      	cmp	r3, #0
 8087cd0:	d104      	bne.n	8087cdc <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
 8087cd2:	88fb      	ldrh	r3, [r7, #6]
 8087cd4:	2b00      	cmp	r3, #0
 8087cd6:	d001      	beq.n	8087cdc <HAL_TIMEx_HallSensor_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8087cd8:	2301      	movs	r3, #1
 8087cda:	e03f      	b.n	8087d5c <HAL_TIMEx_HallSensor_Start_DMA+0xba>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8087cdc:	68fb      	ldr	r3, [r7, #12]
 8087cde:	2202      	movs	r2, #2
 8087ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    /* nothing to do */
  }
  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8087ce4:	68fb      	ldr	r3, [r7, #12]
 8087ce6:	681b      	ldr	r3, [r3, #0]
 8087ce8:	2201      	movs	r2, #1
 8087cea:	2100      	movs	r1, #0
 8087cec:	4618      	mov	r0, r3
 8087cee:	f7ff fe37 	bl	8087960 <TIM_CCxChannelCmd>

  /* Set the DMA Input Capture 1 Callbacks */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8087cf2:	68fb      	ldr	r3, [r7, #12]
 8087cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087cf6:	4a1b      	ldr	r2, [pc, #108]	; (8087d64 <HAL_TIMEx_HallSensor_Start_DMA+0xc2>)
 8087cf8:	63da      	str	r2, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8087cfa:	68fb      	ldr	r3, [r7, #12]
 8087cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087cfe:	4a1a      	ldr	r2, [pc, #104]	; (8087d68 <HAL_TIMEx_HallSensor_Start_DMA+0xc6>)
 8087d00:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8087d02:	68fb      	ldr	r3, [r7, #12]
 8087d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087d06:	4a19      	ldr	r2, [pc, #100]	; (8087d6c <HAL_TIMEx_HallSensor_Start_DMA+0xca>)
 8087d08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA stream for Capture 1*/
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8087d0a:	68fb      	ldr	r3, [r7, #12]
 8087d0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8087d0e:	68fb      	ldr	r3, [r7, #12]
 8087d10:	681b      	ldr	r3, [r3, #0]
 8087d12:	3334      	adds	r3, #52	; 0x34
 8087d14:	4619      	mov	r1, r3
 8087d16:	68ba      	ldr	r2, [r7, #8]
 8087d18:	88fb      	ldrh	r3, [r7, #6]
 8087d1a:	f7f9 fe9a 	bl	8081a52 <HAL_DMA_Start_IT>
 8087d1e:	4603      	mov	r3, r0
 8087d20:	2b00      	cmp	r3, #0
 8087d22:	d001      	beq.n	8087d28 <HAL_TIMEx_HallSensor_Start_DMA+0x86>
  {
    return HAL_ERROR;
 8087d24:	2301      	movs	r3, #1
 8087d26:	e019      	b.n	8087d5c <HAL_TIMEx_HallSensor_Start_DMA+0xba>
  }
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8087d28:	68fb      	ldr	r3, [r7, #12]
 8087d2a:	681b      	ldr	r3, [r3, #0]
 8087d2c:	68da      	ldr	r2, [r3, #12]
 8087d2e:	68fb      	ldr	r3, [r7, #12]
 8087d30:	681b      	ldr	r3, [r3, #0]
 8087d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8087d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8087d38:	68fb      	ldr	r3, [r7, #12]
 8087d3a:	681b      	ldr	r3, [r3, #0]
 8087d3c:	689b      	ldr	r3, [r3, #8]
 8087d3e:	f003 0307 	and.w	r3, r3, #7
 8087d42:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8087d44:	697b      	ldr	r3, [r7, #20]
 8087d46:	2b06      	cmp	r3, #6
 8087d48:	d007      	beq.n	8087d5a <HAL_TIMEx_HallSensor_Start_DMA+0xb8>
  {
    __HAL_TIM_ENABLE(htim);
 8087d4a:	68fb      	ldr	r3, [r7, #12]
 8087d4c:	681b      	ldr	r3, [r3, #0]
 8087d4e:	681a      	ldr	r2, [r3, #0]
 8087d50:	68fb      	ldr	r3, [r7, #12]
 8087d52:	681b      	ldr	r3, [r3, #0]
 8087d54:	f042 0201 	orr.w	r2, r2, #1
 8087d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8087d5a:	2300      	movs	r3, #0
}
 8087d5c:	4618      	mov	r0, r3
 8087d5e:	3718      	adds	r7, #24
 8087d60:	46bd      	mov	sp, r7
 8087d62:	bd80      	pop	{r7, pc}
 8087d64:	08086ebd 	.word	0x08086ebd
 8087d68:	08086f2d 	.word	0x08086f2d
 8087d6c:	08086db9 	.word	0x08086db9

08087d70 <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8087d70:	b580      	push	{r7, lr}
 8087d72:	b082      	sub	sp, #8
 8087d74:	af00      	add	r7, sp, #0
 8087d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8087d78:	687b      	ldr	r3, [r7, #4]
 8087d7a:	681b      	ldr	r3, [r3, #0]
 8087d7c:	2200      	movs	r2, #0
 8087d7e:	2100      	movs	r1, #0
 8087d80:	4618      	mov	r0, r3
 8087d82:	f7ff fded 	bl	8087960 <TIM_CCxChannelCmd>


  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8087d86:	687b      	ldr	r3, [r7, #4]
 8087d88:	681b      	ldr	r3, [r3, #0]
 8087d8a:	68da      	ldr	r2, [r3, #12]
 8087d8c:	687b      	ldr	r3, [r7, #4]
 8087d8e:	681b      	ldr	r3, [r3, #0]
 8087d90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8087d94:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8087d96:	687b      	ldr	r3, [r7, #4]
 8087d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087d9a:	4618      	mov	r0, r3
 8087d9c:	f7f9 ff29 	bl	8081bf2 <HAL_DMA_Abort_IT>
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8087da0:	687b      	ldr	r3, [r7, #4]
 8087da2:	681b      	ldr	r3, [r3, #0]
 8087da4:	6a1a      	ldr	r2, [r3, #32]
 8087da6:	f241 1311 	movw	r3, #4369	; 0x1111
 8087daa:	4013      	ands	r3, r2
 8087dac:	2b00      	cmp	r3, #0
 8087dae:	d10f      	bne.n	8087dd0 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 8087db0:	687b      	ldr	r3, [r7, #4]
 8087db2:	681b      	ldr	r3, [r3, #0]
 8087db4:	6a1a      	ldr	r2, [r3, #32]
 8087db6:	f240 4344 	movw	r3, #1092	; 0x444
 8087dba:	4013      	ands	r3, r2
 8087dbc:	2b00      	cmp	r3, #0
 8087dbe:	d107      	bne.n	8087dd0 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 8087dc0:	687b      	ldr	r3, [r7, #4]
 8087dc2:	681b      	ldr	r3, [r3, #0]
 8087dc4:	681a      	ldr	r2, [r3, #0]
 8087dc6:	687b      	ldr	r3, [r7, #4]
 8087dc8:	681b      	ldr	r3, [r3, #0]
 8087dca:	f022 0201 	bic.w	r2, r2, #1
 8087dce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8087dd0:	2300      	movs	r3, #0
}
 8087dd2:	4618      	mov	r0, r3
 8087dd4:	3708      	adds	r7, #8
 8087dd6:	46bd      	mov	sp, r7
 8087dd8:	bd80      	pop	{r7, pc}

08087dda <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8087dda:	b580      	push	{r7, lr}
 8087ddc:	b084      	sub	sp, #16
 8087dde:	af00      	add	r7, sp, #0
 8087de0:	6078      	str	r0, [r7, #4]
 8087de2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8087de4:	687b      	ldr	r3, [r7, #4]
 8087de6:	681b      	ldr	r3, [r3, #0]
 8087de8:	2204      	movs	r2, #4
 8087dea:	6839      	ldr	r1, [r7, #0]
 8087dec:	4618      	mov	r0, r3
 8087dee:	f000 ffdd 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8087df2:	687b      	ldr	r3, [r7, #4]
 8087df4:	681b      	ldr	r3, [r3, #0]
 8087df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8087df8:	687b      	ldr	r3, [r7, #4]
 8087dfa:	681b      	ldr	r3, [r3, #0]
 8087dfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8087e00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8087e02:	687b      	ldr	r3, [r7, #4]
 8087e04:	681b      	ldr	r3, [r3, #0]
 8087e06:	689b      	ldr	r3, [r3, #8]
 8087e08:	f003 0307 	and.w	r3, r3, #7
 8087e0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8087e0e:	68fb      	ldr	r3, [r7, #12]
 8087e10:	2b06      	cmp	r3, #6
 8087e12:	d007      	beq.n	8087e24 <HAL_TIMEx_OCN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8087e14:	687b      	ldr	r3, [r7, #4]
 8087e16:	681b      	ldr	r3, [r3, #0]
 8087e18:	681a      	ldr	r2, [r3, #0]
 8087e1a:	687b      	ldr	r3, [r7, #4]
 8087e1c:	681b      	ldr	r3, [r3, #0]
 8087e1e:	f042 0201 	orr.w	r2, r2, #1
 8087e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8087e24:	2300      	movs	r3, #0
}
 8087e26:	4618      	mov	r0, r3
 8087e28:	3710      	adds	r7, #16
 8087e2a:	46bd      	mov	sp, r7
 8087e2c:	bd80      	pop	{r7, pc}

08087e2e <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8087e2e:	b580      	push	{r7, lr}
 8087e30:	b082      	sub	sp, #8
 8087e32:	af00      	add	r7, sp, #0
 8087e34:	6078      	str	r0, [r7, #4]
 8087e36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8087e38:	687b      	ldr	r3, [r7, #4]
 8087e3a:	681b      	ldr	r3, [r3, #0]
 8087e3c:	2200      	movs	r2, #0
 8087e3e:	6839      	ldr	r1, [r7, #0]
 8087e40:	4618      	mov	r0, r3
 8087e42:	f000 ffb3 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8087e46:	687b      	ldr	r3, [r7, #4]
 8087e48:	681b      	ldr	r3, [r3, #0]
 8087e4a:	6a1a      	ldr	r2, [r3, #32]
 8087e4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8087e50:	4013      	ands	r3, r2
 8087e52:	2b00      	cmp	r3, #0
 8087e54:	d10f      	bne.n	8087e76 <HAL_TIMEx_OCN_Stop+0x48>
 8087e56:	687b      	ldr	r3, [r7, #4]
 8087e58:	681b      	ldr	r3, [r3, #0]
 8087e5a:	6a1a      	ldr	r2, [r3, #32]
 8087e5c:	f240 4344 	movw	r3, #1092	; 0x444
 8087e60:	4013      	ands	r3, r2
 8087e62:	2b00      	cmp	r3, #0
 8087e64:	d107      	bne.n	8087e76 <HAL_TIMEx_OCN_Stop+0x48>
 8087e66:	687b      	ldr	r3, [r7, #4]
 8087e68:	681b      	ldr	r3, [r3, #0]
 8087e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8087e6c:	687b      	ldr	r3, [r7, #4]
 8087e6e:	681b      	ldr	r3, [r3, #0]
 8087e70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8087e74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8087e76:	687b      	ldr	r3, [r7, #4]
 8087e78:	681b      	ldr	r3, [r3, #0]
 8087e7a:	6a1a      	ldr	r2, [r3, #32]
 8087e7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8087e80:	4013      	ands	r3, r2
 8087e82:	2b00      	cmp	r3, #0
 8087e84:	d10f      	bne.n	8087ea6 <HAL_TIMEx_OCN_Stop+0x78>
 8087e86:	687b      	ldr	r3, [r7, #4]
 8087e88:	681b      	ldr	r3, [r3, #0]
 8087e8a:	6a1a      	ldr	r2, [r3, #32]
 8087e8c:	f240 4344 	movw	r3, #1092	; 0x444
 8087e90:	4013      	ands	r3, r2
 8087e92:	2b00      	cmp	r3, #0
 8087e94:	d107      	bne.n	8087ea6 <HAL_TIMEx_OCN_Stop+0x78>
 8087e96:	687b      	ldr	r3, [r7, #4]
 8087e98:	681b      	ldr	r3, [r3, #0]
 8087e9a:	681a      	ldr	r2, [r3, #0]
 8087e9c:	687b      	ldr	r3, [r7, #4]
 8087e9e:	681b      	ldr	r3, [r3, #0]
 8087ea0:	f022 0201 	bic.w	r2, r2, #1
 8087ea4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8087ea6:	2300      	movs	r3, #0
}
 8087ea8:	4618      	mov	r0, r3
 8087eaa:	3708      	adds	r7, #8
 8087eac:	46bd      	mov	sp, r7
 8087eae:	bd80      	pop	{r7, pc}

08087eb0 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8087eb0:	b580      	push	{r7, lr}
 8087eb2:	b084      	sub	sp, #16
 8087eb4:	af00      	add	r7, sp, #0
 8087eb6:	6078      	str	r0, [r7, #4]
 8087eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8087eba:	683b      	ldr	r3, [r7, #0]
 8087ebc:	2b04      	cmp	r3, #4
 8087ebe:	d00d      	beq.n	8087edc <HAL_TIMEx_OCN_Start_IT+0x2c>
 8087ec0:	2b08      	cmp	r3, #8
 8087ec2:	d014      	beq.n	8087eee <HAL_TIMEx_OCN_Start_IT+0x3e>
 8087ec4:	2b00      	cmp	r3, #0
 8087ec6:	d000      	beq.n	8087eca <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8087ec8:	e01a      	b.n	8087f00 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8087eca:	687b      	ldr	r3, [r7, #4]
 8087ecc:	681b      	ldr	r3, [r3, #0]
 8087ece:	68da      	ldr	r2, [r3, #12]
 8087ed0:	687b      	ldr	r3, [r7, #4]
 8087ed2:	681b      	ldr	r3, [r3, #0]
 8087ed4:	f042 0202 	orr.w	r2, r2, #2
 8087ed8:	60da      	str	r2, [r3, #12]
      break;
 8087eda:	e011      	b.n	8087f00 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8087edc:	687b      	ldr	r3, [r7, #4]
 8087ede:	681b      	ldr	r3, [r3, #0]
 8087ee0:	68da      	ldr	r2, [r3, #12]
 8087ee2:	687b      	ldr	r3, [r7, #4]
 8087ee4:	681b      	ldr	r3, [r3, #0]
 8087ee6:	f042 0204 	orr.w	r2, r2, #4
 8087eea:	60da      	str	r2, [r3, #12]
      break;
 8087eec:	e008      	b.n	8087f00 <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8087eee:	687b      	ldr	r3, [r7, #4]
 8087ef0:	681b      	ldr	r3, [r3, #0]
 8087ef2:	68da      	ldr	r2, [r3, #12]
 8087ef4:	687b      	ldr	r3, [r7, #4]
 8087ef6:	681b      	ldr	r3, [r3, #0]
 8087ef8:	f042 0208 	orr.w	r2, r2, #8
 8087efc:	60da      	str	r2, [r3, #12]
      break;
 8087efe:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8087f00:	687b      	ldr	r3, [r7, #4]
 8087f02:	681b      	ldr	r3, [r3, #0]
 8087f04:	68da      	ldr	r2, [r3, #12]
 8087f06:	687b      	ldr	r3, [r7, #4]
 8087f08:	681b      	ldr	r3, [r3, #0]
 8087f0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8087f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8087f10:	687b      	ldr	r3, [r7, #4]
 8087f12:	681b      	ldr	r3, [r3, #0]
 8087f14:	2204      	movs	r2, #4
 8087f16:	6839      	ldr	r1, [r7, #0]
 8087f18:	4618      	mov	r0, r3
 8087f1a:	f000 ff47 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8087f1e:	687b      	ldr	r3, [r7, #4]
 8087f20:	681b      	ldr	r3, [r3, #0]
 8087f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8087f24:	687b      	ldr	r3, [r7, #4]
 8087f26:	681b      	ldr	r3, [r3, #0]
 8087f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8087f2c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8087f2e:	687b      	ldr	r3, [r7, #4]
 8087f30:	681b      	ldr	r3, [r3, #0]
 8087f32:	689b      	ldr	r3, [r3, #8]
 8087f34:	f003 0307 	and.w	r3, r3, #7
 8087f38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8087f3a:	68fb      	ldr	r3, [r7, #12]
 8087f3c:	2b06      	cmp	r3, #6
 8087f3e:	d007      	beq.n	8087f50 <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8087f40:	687b      	ldr	r3, [r7, #4]
 8087f42:	681b      	ldr	r3, [r3, #0]
 8087f44:	681a      	ldr	r2, [r3, #0]
 8087f46:	687b      	ldr	r3, [r7, #4]
 8087f48:	681b      	ldr	r3, [r3, #0]
 8087f4a:	f042 0201 	orr.w	r2, r2, #1
 8087f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8087f50:	2300      	movs	r3, #0
}
 8087f52:	4618      	mov	r0, r3
 8087f54:	3710      	adds	r7, #16
 8087f56:	46bd      	mov	sp, r7
 8087f58:	bd80      	pop	{r7, pc}

08087f5a <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8087f5a:	b580      	push	{r7, lr}
 8087f5c:	b084      	sub	sp, #16
 8087f5e:	af00      	add	r7, sp, #0
 8087f60:	6078      	str	r0, [r7, #4]
 8087f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8087f64:	683b      	ldr	r3, [r7, #0]
 8087f66:	2b04      	cmp	r3, #4
 8087f68:	d00d      	beq.n	8087f86 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8087f6a:	2b08      	cmp	r3, #8
 8087f6c:	d014      	beq.n	8087f98 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8087f6e:	2b00      	cmp	r3, #0
 8087f70:	d000      	beq.n	8087f74 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8087f72:	e01a      	b.n	8087faa <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8087f74:	687b      	ldr	r3, [r7, #4]
 8087f76:	681b      	ldr	r3, [r3, #0]
 8087f78:	68da      	ldr	r2, [r3, #12]
 8087f7a:	687b      	ldr	r3, [r7, #4]
 8087f7c:	681b      	ldr	r3, [r3, #0]
 8087f7e:	f022 0202 	bic.w	r2, r2, #2
 8087f82:	60da      	str	r2, [r3, #12]
      break;
 8087f84:	e011      	b.n	8087faa <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8087f86:	687b      	ldr	r3, [r7, #4]
 8087f88:	681b      	ldr	r3, [r3, #0]
 8087f8a:	68da      	ldr	r2, [r3, #12]
 8087f8c:	687b      	ldr	r3, [r7, #4]
 8087f8e:	681b      	ldr	r3, [r3, #0]
 8087f90:	f022 0204 	bic.w	r2, r2, #4
 8087f94:	60da      	str	r2, [r3, #12]
      break;
 8087f96:	e008      	b.n	8087faa <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8087f98:	687b      	ldr	r3, [r7, #4]
 8087f9a:	681b      	ldr	r3, [r3, #0]
 8087f9c:	68da      	ldr	r2, [r3, #12]
 8087f9e:	687b      	ldr	r3, [r7, #4]
 8087fa0:	681b      	ldr	r3, [r3, #0]
 8087fa2:	f022 0208 	bic.w	r2, r2, #8
 8087fa6:	60da      	str	r2, [r3, #12]
      break;
 8087fa8:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8087faa:	687b      	ldr	r3, [r7, #4]
 8087fac:	681b      	ldr	r3, [r3, #0]
 8087fae:	2200      	movs	r2, #0
 8087fb0:	6839      	ldr	r1, [r7, #0]
 8087fb2:	4618      	mov	r0, r3
 8087fb4:	f000 fefa 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8087fb8:	687b      	ldr	r3, [r7, #4]
 8087fba:	681b      	ldr	r3, [r3, #0]
 8087fbc:	6a1b      	ldr	r3, [r3, #32]
 8087fbe:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8087fc0:	68fa      	ldr	r2, [r7, #12]
 8087fc2:	f240 4344 	movw	r3, #1092	; 0x444
 8087fc6:	4013      	ands	r3, r2
 8087fc8:	2b00      	cmp	r3, #0
 8087fca:	d107      	bne.n	8087fdc <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8087fcc:	687b      	ldr	r3, [r7, #4]
 8087fce:	681b      	ldr	r3, [r3, #0]
 8087fd0:	68da      	ldr	r2, [r3, #12]
 8087fd2:	687b      	ldr	r3, [r7, #4]
 8087fd4:	681b      	ldr	r3, [r3, #0]
 8087fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8087fda:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8087fdc:	687b      	ldr	r3, [r7, #4]
 8087fde:	681b      	ldr	r3, [r3, #0]
 8087fe0:	6a1a      	ldr	r2, [r3, #32]
 8087fe2:	f241 1311 	movw	r3, #4369	; 0x1111
 8087fe6:	4013      	ands	r3, r2
 8087fe8:	2b00      	cmp	r3, #0
 8087fea:	d10f      	bne.n	808800c <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8087fec:	687b      	ldr	r3, [r7, #4]
 8087fee:	681b      	ldr	r3, [r3, #0]
 8087ff0:	6a1a      	ldr	r2, [r3, #32]
 8087ff2:	f240 4344 	movw	r3, #1092	; 0x444
 8087ff6:	4013      	ands	r3, r2
 8087ff8:	2b00      	cmp	r3, #0
 8087ffa:	d107      	bne.n	808800c <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8087ffc:	687b      	ldr	r3, [r7, #4]
 8087ffe:	681b      	ldr	r3, [r3, #0]
 8088000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8088002:	687b      	ldr	r3, [r7, #4]
 8088004:	681b      	ldr	r3, [r3, #0]
 8088006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 808800a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 808800c:	687b      	ldr	r3, [r7, #4]
 808800e:	681b      	ldr	r3, [r3, #0]
 8088010:	6a1a      	ldr	r2, [r3, #32]
 8088012:	f241 1311 	movw	r3, #4369	; 0x1111
 8088016:	4013      	ands	r3, r2
 8088018:	2b00      	cmp	r3, #0
 808801a:	d10f      	bne.n	808803c <HAL_TIMEx_OCN_Stop_IT+0xe2>
 808801c:	687b      	ldr	r3, [r7, #4]
 808801e:	681b      	ldr	r3, [r3, #0]
 8088020:	6a1a      	ldr	r2, [r3, #32]
 8088022:	f240 4344 	movw	r3, #1092	; 0x444
 8088026:	4013      	ands	r3, r2
 8088028:	2b00      	cmp	r3, #0
 808802a:	d107      	bne.n	808803c <HAL_TIMEx_OCN_Stop_IT+0xe2>
 808802c:	687b      	ldr	r3, [r7, #4]
 808802e:	681b      	ldr	r3, [r3, #0]
 8088030:	681a      	ldr	r2, [r3, #0]
 8088032:	687b      	ldr	r3, [r7, #4]
 8088034:	681b      	ldr	r3, [r3, #0]
 8088036:	f022 0201 	bic.w	r2, r2, #1
 808803a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 808803c:	2300      	movs	r3, #0
}
 808803e:	4618      	mov	r0, r3
 8088040:	3710      	adds	r7, #16
 8088042:	46bd      	mov	sp, r7
 8088044:	bd80      	pop	{r7, pc}

08088046 <HAL_TIMEx_OCN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8088046:	b580      	push	{r7, lr}
 8088048:	b086      	sub	sp, #24
 808804a:	af00      	add	r7, sp, #0
 808804c:	60f8      	str	r0, [r7, #12]
 808804e:	60b9      	str	r1, [r7, #8]
 8088050:	607a      	str	r2, [r7, #4]
 8088052:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8088054:	68fb      	ldr	r3, [r7, #12]
 8088056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 808805a:	b2db      	uxtb	r3, r3
 808805c:	2b02      	cmp	r3, #2
 808805e:	d101      	bne.n	8088064 <HAL_TIMEx_OCN_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8088060:	2302      	movs	r3, #2
 8088062:	e0a6      	b.n	80881b2 <HAL_TIMEx_OCN_Start_DMA+0x16c>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8088064:	68fb      	ldr	r3, [r7, #12]
 8088066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 808806a:	b2db      	uxtb	r3, r3
 808806c:	2b01      	cmp	r3, #1
 808806e:	d10b      	bne.n	8088088 <HAL_TIMEx_OCN_Start_DMA+0x42>
  {
    if (((uint32_t)pData == 0U) && (Length > 0U))
 8088070:	687b      	ldr	r3, [r7, #4]
 8088072:	2b00      	cmp	r3, #0
 8088074:	d104      	bne.n	8088080 <HAL_TIMEx_OCN_Start_DMA+0x3a>
 8088076:	887b      	ldrh	r3, [r7, #2]
 8088078:	2b00      	cmp	r3, #0
 808807a:	d001      	beq.n	8088080 <HAL_TIMEx_OCN_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 808807c:	2301      	movs	r3, #1
 808807e:	e098      	b.n	80881b2 <HAL_TIMEx_OCN_Start_DMA+0x16c>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8088080:	68fb      	ldr	r3, [r7, #12]
 8088082:	2202      	movs	r2, #2
 8088084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do  */
  }

  switch (Channel)
 8088088:	68bb      	ldr	r3, [r7, #8]
 808808a:	2b04      	cmp	r3, #4
 808808c:	d028      	beq.n	80880e0 <HAL_TIMEx_OCN_Start_DMA+0x9a>
 808808e:	2b08      	cmp	r3, #8
 8088090:	d04a      	beq.n	8088128 <HAL_TIMEx_OCN_Start_DMA+0xe2>
 8088092:	2b00      	cmp	r3, #0
 8088094:	d000      	beq.n	8088098 <HAL_TIMEx_OCN_Start_DMA+0x52>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
      break;
    }

    default:
      break;
 8088096:	e06b      	b.n	8088170 <HAL_TIMEx_OCN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8088098:	68fb      	ldr	r3, [r7, #12]
 808809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808809c:	4a47      	ldr	r2, [pc, #284]	; (80881bc <HAL_TIMEx_OCN_Start_DMA+0x176>)
 808809e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80880a0:	68fb      	ldr	r3, [r7, #12]
 80880a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80880a4:	4a46      	ldr	r2, [pc, #280]	; (80881c0 <HAL_TIMEx_OCN_Start_DMA+0x17a>)
 80880a6:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80880a8:	68fb      	ldr	r3, [r7, #12]
 80880aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80880ac:	4a45      	ldr	r2, [pc, #276]	; (80881c4 <HAL_TIMEx_OCN_Start_DMA+0x17e>)
 80880ae:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80880b0:	68fb      	ldr	r3, [r7, #12]
 80880b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80880b4:	6879      	ldr	r1, [r7, #4]
 80880b6:	68fb      	ldr	r3, [r7, #12]
 80880b8:	681b      	ldr	r3, [r3, #0]
 80880ba:	3334      	adds	r3, #52	; 0x34
 80880bc:	461a      	mov	r2, r3
 80880be:	887b      	ldrh	r3, [r7, #2]
 80880c0:	f7f9 fcc7 	bl	8081a52 <HAL_DMA_Start_IT>
 80880c4:	4603      	mov	r3, r0
 80880c6:	2b00      	cmp	r3, #0
 80880c8:	d001      	beq.n	80880ce <HAL_TIMEx_OCN_Start_DMA+0x88>
        return HAL_ERROR;
 80880ca:	2301      	movs	r3, #1
 80880cc:	e071      	b.n	80881b2 <HAL_TIMEx_OCN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80880ce:	68fb      	ldr	r3, [r7, #12]
 80880d0:	681b      	ldr	r3, [r3, #0]
 80880d2:	68da      	ldr	r2, [r3, #12]
 80880d4:	68fb      	ldr	r3, [r7, #12]
 80880d6:	681b      	ldr	r3, [r3, #0]
 80880d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80880dc:	60da      	str	r2, [r3, #12]
      break;
 80880de:	e047      	b.n	8088170 <HAL_TIMEx_OCN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80880e0:	68fb      	ldr	r3, [r7, #12]
 80880e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80880e4:	4a35      	ldr	r2, [pc, #212]	; (80881bc <HAL_TIMEx_OCN_Start_DMA+0x176>)
 80880e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80880e8:	68fb      	ldr	r3, [r7, #12]
 80880ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80880ec:	4a34      	ldr	r2, [pc, #208]	; (80881c0 <HAL_TIMEx_OCN_Start_DMA+0x17a>)
 80880ee:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80880f0:	68fb      	ldr	r3, [r7, #12]
 80880f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80880f4:	4a33      	ldr	r2, [pc, #204]	; (80881c4 <HAL_TIMEx_OCN_Start_DMA+0x17e>)
 80880f6:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80880f8:	68fb      	ldr	r3, [r7, #12]
 80880fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80880fc:	6879      	ldr	r1, [r7, #4]
 80880fe:	68fb      	ldr	r3, [r7, #12]
 8088100:	681b      	ldr	r3, [r3, #0]
 8088102:	3338      	adds	r3, #56	; 0x38
 8088104:	461a      	mov	r2, r3
 8088106:	887b      	ldrh	r3, [r7, #2]
 8088108:	f7f9 fca3 	bl	8081a52 <HAL_DMA_Start_IT>
 808810c:	4603      	mov	r3, r0
 808810e:	2b00      	cmp	r3, #0
 8088110:	d001      	beq.n	8088116 <HAL_TIMEx_OCN_Start_DMA+0xd0>
        return HAL_ERROR;
 8088112:	2301      	movs	r3, #1
 8088114:	e04d      	b.n	80881b2 <HAL_TIMEx_OCN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8088116:	68fb      	ldr	r3, [r7, #12]
 8088118:	681b      	ldr	r3, [r3, #0]
 808811a:	68da      	ldr	r2, [r3, #12]
 808811c:	68fb      	ldr	r3, [r7, #12]
 808811e:	681b      	ldr	r3, [r3, #0]
 8088120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8088124:	60da      	str	r2, [r3, #12]
      break;
 8088126:	e023      	b.n	8088170 <HAL_TIMEx_OCN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8088128:	68fb      	ldr	r3, [r7, #12]
 808812a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808812c:	4a23      	ldr	r2, [pc, #140]	; (80881bc <HAL_TIMEx_OCN_Start_DMA+0x176>)
 808812e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8088130:	68fb      	ldr	r3, [r7, #12]
 8088132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088134:	4a22      	ldr	r2, [pc, #136]	; (80881c0 <HAL_TIMEx_OCN_Start_DMA+0x17a>)
 8088136:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8088138:	68fb      	ldr	r3, [r7, #12]
 808813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808813c:	4a21      	ldr	r2, [pc, #132]	; (80881c4 <HAL_TIMEx_OCN_Start_DMA+0x17e>)
 808813e:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8088140:	68fb      	ldr	r3, [r7, #12]
 8088142:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8088144:	6879      	ldr	r1, [r7, #4]
 8088146:	68fb      	ldr	r3, [r7, #12]
 8088148:	681b      	ldr	r3, [r3, #0]
 808814a:	333c      	adds	r3, #60	; 0x3c
 808814c:	461a      	mov	r2, r3
 808814e:	887b      	ldrh	r3, [r7, #2]
 8088150:	f7f9 fc7f 	bl	8081a52 <HAL_DMA_Start_IT>
 8088154:	4603      	mov	r3, r0
 8088156:	2b00      	cmp	r3, #0
 8088158:	d001      	beq.n	808815e <HAL_TIMEx_OCN_Start_DMA+0x118>
        return HAL_ERROR;
 808815a:	2301      	movs	r3, #1
 808815c:	e029      	b.n	80881b2 <HAL_TIMEx_OCN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 808815e:	68fb      	ldr	r3, [r7, #12]
 8088160:	681b      	ldr	r3, [r3, #0]
 8088162:	68da      	ldr	r2, [r3, #12]
 8088164:	68fb      	ldr	r3, [r7, #12]
 8088166:	681b      	ldr	r3, [r3, #0]
 8088168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 808816c:	60da      	str	r2, [r3, #12]
      break;
 808816e:	bf00      	nop
  }

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8088170:	68fb      	ldr	r3, [r7, #12]
 8088172:	681b      	ldr	r3, [r3, #0]
 8088174:	2204      	movs	r2, #4
 8088176:	68b9      	ldr	r1, [r7, #8]
 8088178:	4618      	mov	r0, r3
 808817a:	f000 fe17 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 808817e:	68fb      	ldr	r3, [r7, #12]
 8088180:	681b      	ldr	r3, [r3, #0]
 8088182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8088184:	68fb      	ldr	r3, [r7, #12]
 8088186:	681b      	ldr	r3, [r3, #0]
 8088188:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 808818c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 808818e:	68fb      	ldr	r3, [r7, #12]
 8088190:	681b      	ldr	r3, [r3, #0]
 8088192:	689b      	ldr	r3, [r3, #8]
 8088194:	f003 0307 	and.w	r3, r3, #7
 8088198:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 808819a:	697b      	ldr	r3, [r7, #20]
 808819c:	2b06      	cmp	r3, #6
 808819e:	d007      	beq.n	80881b0 <HAL_TIMEx_OCN_Start_DMA+0x16a>
  {
    __HAL_TIM_ENABLE(htim);
 80881a0:	68fb      	ldr	r3, [r7, #12]
 80881a2:	681b      	ldr	r3, [r3, #0]
 80881a4:	681a      	ldr	r2, [r3, #0]
 80881a6:	68fb      	ldr	r3, [r7, #12]
 80881a8:	681b      	ldr	r3, [r3, #0]
 80881aa:	f042 0201 	orr.w	r2, r2, #1
 80881ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80881b0:	2300      	movs	r3, #0
}
 80881b2:	4618      	mov	r0, r3
 80881b4:	3718      	adds	r7, #24
 80881b6:	46bd      	mov	sp, r7
 80881b8:	bd80      	pop	{r7, pc}
 80881ba:	bf00      	nop
 80881bc:	08086ddd 	.word	0x08086ddd
 80881c0:	08086e4d 	.word	0x08086e4d
 80881c4:	08086db9 	.word	0x08086db9

080881c8 <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80881c8:	b580      	push	{r7, lr}
 80881ca:	b082      	sub	sp, #8
 80881cc:	af00      	add	r7, sp, #0
 80881ce:	6078      	str	r0, [r7, #4]
 80881d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80881d2:	683b      	ldr	r3, [r7, #0]
 80881d4:	2b04      	cmp	r3, #4
 80881d6:	d012      	beq.n	80881fe <HAL_TIMEx_OCN_Stop_DMA+0x36>
 80881d8:	2b08      	cmp	r3, #8
 80881da:	d01e      	beq.n	808821a <HAL_TIMEx_OCN_Stop_DMA+0x52>
 80881dc:	2b00      	cmp	r3, #0
 80881de:	d000      	beq.n	80881e2 <HAL_TIMEx_OCN_Stop_DMA+0x1a>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
      break;
    }

    default:
      break;
 80881e0:	e029      	b.n	8088236 <HAL_TIMEx_OCN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80881e2:	687b      	ldr	r3, [r7, #4]
 80881e4:	681b      	ldr	r3, [r3, #0]
 80881e6:	68da      	ldr	r2, [r3, #12]
 80881e8:	687b      	ldr	r3, [r7, #4]
 80881ea:	681b      	ldr	r3, [r3, #0]
 80881ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80881f0:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80881f2:	687b      	ldr	r3, [r7, #4]
 80881f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80881f6:	4618      	mov	r0, r3
 80881f8:	f7f9 fcfb 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 80881fc:	e01b      	b.n	8088236 <HAL_TIMEx_OCN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80881fe:	687b      	ldr	r3, [r7, #4]
 8088200:	681b      	ldr	r3, [r3, #0]
 8088202:	68da      	ldr	r2, [r3, #12]
 8088204:	687b      	ldr	r3, [r7, #4]
 8088206:	681b      	ldr	r3, [r3, #0]
 8088208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 808820c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 808820e:	687b      	ldr	r3, [r7, #4]
 8088210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8088212:	4618      	mov	r0, r3
 8088214:	f7f9 fced 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 8088218:	e00d      	b.n	8088236 <HAL_TIMEx_OCN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 808821a:	687b      	ldr	r3, [r7, #4]
 808821c:	681b      	ldr	r3, [r3, #0]
 808821e:	68da      	ldr	r2, [r3, #12]
 8088220:	687b      	ldr	r3, [r7, #4]
 8088222:	681b      	ldr	r3, [r3, #0]
 8088224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8088228:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 808822a:	687b      	ldr	r3, [r7, #4]
 808822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808822e:	4618      	mov	r0, r3
 8088230:	f7f9 fcdf 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 8088234:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8088236:	687b      	ldr	r3, [r7, #4]
 8088238:	681b      	ldr	r3, [r3, #0]
 808823a:	2200      	movs	r2, #0
 808823c:	6839      	ldr	r1, [r7, #0]
 808823e:	4618      	mov	r0, r3
 8088240:	f000 fdb4 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8088244:	687b      	ldr	r3, [r7, #4]
 8088246:	681b      	ldr	r3, [r3, #0]
 8088248:	6a1a      	ldr	r2, [r3, #32]
 808824a:	f241 1311 	movw	r3, #4369	; 0x1111
 808824e:	4013      	ands	r3, r2
 8088250:	2b00      	cmp	r3, #0
 8088252:	d10f      	bne.n	8088274 <HAL_TIMEx_OCN_Stop_DMA+0xac>
 8088254:	687b      	ldr	r3, [r7, #4]
 8088256:	681b      	ldr	r3, [r3, #0]
 8088258:	6a1a      	ldr	r2, [r3, #32]
 808825a:	f240 4344 	movw	r3, #1092	; 0x444
 808825e:	4013      	ands	r3, r2
 8088260:	2b00      	cmp	r3, #0
 8088262:	d107      	bne.n	8088274 <HAL_TIMEx_OCN_Stop_DMA+0xac>
 8088264:	687b      	ldr	r3, [r7, #4]
 8088266:	681b      	ldr	r3, [r3, #0]
 8088268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 808826a:	687b      	ldr	r3, [r7, #4]
 808826c:	681b      	ldr	r3, [r3, #0]
 808826e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8088272:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8088274:	687b      	ldr	r3, [r7, #4]
 8088276:	681b      	ldr	r3, [r3, #0]
 8088278:	6a1a      	ldr	r2, [r3, #32]
 808827a:	f241 1311 	movw	r3, #4369	; 0x1111
 808827e:	4013      	ands	r3, r2
 8088280:	2b00      	cmp	r3, #0
 8088282:	d10f      	bne.n	80882a4 <HAL_TIMEx_OCN_Stop_DMA+0xdc>
 8088284:	687b      	ldr	r3, [r7, #4]
 8088286:	681b      	ldr	r3, [r3, #0]
 8088288:	6a1a      	ldr	r2, [r3, #32]
 808828a:	f240 4344 	movw	r3, #1092	; 0x444
 808828e:	4013      	ands	r3, r2
 8088290:	2b00      	cmp	r3, #0
 8088292:	d107      	bne.n	80882a4 <HAL_TIMEx_OCN_Stop_DMA+0xdc>
 8088294:	687b      	ldr	r3, [r7, #4]
 8088296:	681b      	ldr	r3, [r3, #0]
 8088298:	681a      	ldr	r2, [r3, #0]
 808829a:	687b      	ldr	r3, [r7, #4]
 808829c:	681b      	ldr	r3, [r3, #0]
 808829e:	f022 0201 	bic.w	r2, r2, #1
 80882a2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80882a4:	687b      	ldr	r3, [r7, #4]
 80882a6:	2201      	movs	r2, #1
 80882a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80882ac:	2300      	movs	r3, #0
}
 80882ae:	4618      	mov	r0, r3
 80882b0:	3708      	adds	r7, #8
 80882b2:	46bd      	mov	sp, r7
 80882b4:	bd80      	pop	{r7, pc}

080882b6 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80882b6:	b580      	push	{r7, lr}
 80882b8:	b084      	sub	sp, #16
 80882ba:	af00      	add	r7, sp, #0
 80882bc:	6078      	str	r0, [r7, #4]
 80882be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80882c0:	687b      	ldr	r3, [r7, #4]
 80882c2:	681b      	ldr	r3, [r3, #0]
 80882c4:	2204      	movs	r2, #4
 80882c6:	6839      	ldr	r1, [r7, #0]
 80882c8:	4618      	mov	r0, r3
 80882ca:	f000 fd6f 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80882ce:	687b      	ldr	r3, [r7, #4]
 80882d0:	681b      	ldr	r3, [r3, #0]
 80882d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80882d4:	687b      	ldr	r3, [r7, #4]
 80882d6:	681b      	ldr	r3, [r3, #0]
 80882d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80882dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80882de:	687b      	ldr	r3, [r7, #4]
 80882e0:	681b      	ldr	r3, [r3, #0]
 80882e2:	689b      	ldr	r3, [r3, #8]
 80882e4:	f003 0307 	and.w	r3, r3, #7
 80882e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80882ea:	68fb      	ldr	r3, [r7, #12]
 80882ec:	2b06      	cmp	r3, #6
 80882ee:	d007      	beq.n	8088300 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80882f0:	687b      	ldr	r3, [r7, #4]
 80882f2:	681b      	ldr	r3, [r3, #0]
 80882f4:	681a      	ldr	r2, [r3, #0]
 80882f6:	687b      	ldr	r3, [r7, #4]
 80882f8:	681b      	ldr	r3, [r3, #0]
 80882fa:	f042 0201 	orr.w	r2, r2, #1
 80882fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8088300:	2300      	movs	r3, #0
}
 8088302:	4618      	mov	r0, r3
 8088304:	3710      	adds	r7, #16
 8088306:	46bd      	mov	sp, r7
 8088308:	bd80      	pop	{r7, pc}

0808830a <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 808830a:	b580      	push	{r7, lr}
 808830c:	b082      	sub	sp, #8
 808830e:	af00      	add	r7, sp, #0
 8088310:	6078      	str	r0, [r7, #4]
 8088312:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8088314:	687b      	ldr	r3, [r7, #4]
 8088316:	681b      	ldr	r3, [r3, #0]
 8088318:	2200      	movs	r2, #0
 808831a:	6839      	ldr	r1, [r7, #0]
 808831c:	4618      	mov	r0, r3
 808831e:	f000 fd45 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8088322:	687b      	ldr	r3, [r7, #4]
 8088324:	681b      	ldr	r3, [r3, #0]
 8088326:	6a1a      	ldr	r2, [r3, #32]
 8088328:	f241 1311 	movw	r3, #4369	; 0x1111
 808832c:	4013      	ands	r3, r2
 808832e:	2b00      	cmp	r3, #0
 8088330:	d10f      	bne.n	8088352 <HAL_TIMEx_PWMN_Stop+0x48>
 8088332:	687b      	ldr	r3, [r7, #4]
 8088334:	681b      	ldr	r3, [r3, #0]
 8088336:	6a1a      	ldr	r2, [r3, #32]
 8088338:	f240 4344 	movw	r3, #1092	; 0x444
 808833c:	4013      	ands	r3, r2
 808833e:	2b00      	cmp	r3, #0
 8088340:	d107      	bne.n	8088352 <HAL_TIMEx_PWMN_Stop+0x48>
 8088342:	687b      	ldr	r3, [r7, #4]
 8088344:	681b      	ldr	r3, [r3, #0]
 8088346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8088348:	687b      	ldr	r3, [r7, #4]
 808834a:	681b      	ldr	r3, [r3, #0]
 808834c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8088350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8088352:	687b      	ldr	r3, [r7, #4]
 8088354:	681b      	ldr	r3, [r3, #0]
 8088356:	6a1a      	ldr	r2, [r3, #32]
 8088358:	f241 1311 	movw	r3, #4369	; 0x1111
 808835c:	4013      	ands	r3, r2
 808835e:	2b00      	cmp	r3, #0
 8088360:	d10f      	bne.n	8088382 <HAL_TIMEx_PWMN_Stop+0x78>
 8088362:	687b      	ldr	r3, [r7, #4]
 8088364:	681b      	ldr	r3, [r3, #0]
 8088366:	6a1a      	ldr	r2, [r3, #32]
 8088368:	f240 4344 	movw	r3, #1092	; 0x444
 808836c:	4013      	ands	r3, r2
 808836e:	2b00      	cmp	r3, #0
 8088370:	d107      	bne.n	8088382 <HAL_TIMEx_PWMN_Stop+0x78>
 8088372:	687b      	ldr	r3, [r7, #4]
 8088374:	681b      	ldr	r3, [r3, #0]
 8088376:	681a      	ldr	r2, [r3, #0]
 8088378:	687b      	ldr	r3, [r7, #4]
 808837a:	681b      	ldr	r3, [r3, #0]
 808837c:	f022 0201 	bic.w	r2, r2, #1
 8088380:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8088382:	2300      	movs	r3, #0
}
 8088384:	4618      	mov	r0, r3
 8088386:	3708      	adds	r7, #8
 8088388:	46bd      	mov	sp, r7
 808838a:	bd80      	pop	{r7, pc}

0808838c <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 808838c:	b580      	push	{r7, lr}
 808838e:	b084      	sub	sp, #16
 8088390:	af00      	add	r7, sp, #0
 8088392:	6078      	str	r0, [r7, #4]
 8088394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8088396:	683b      	ldr	r3, [r7, #0]
 8088398:	2b04      	cmp	r3, #4
 808839a:	d00d      	beq.n	80883b8 <HAL_TIMEx_PWMN_Start_IT+0x2c>
 808839c:	2b08      	cmp	r3, #8
 808839e:	d014      	beq.n	80883ca <HAL_TIMEx_PWMN_Start_IT+0x3e>
 80883a0:	2b00      	cmp	r3, #0
 80883a2:	d000      	beq.n	80883a6 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80883a4:	e01a      	b.n	80883dc <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80883a6:	687b      	ldr	r3, [r7, #4]
 80883a8:	681b      	ldr	r3, [r3, #0]
 80883aa:	68da      	ldr	r2, [r3, #12]
 80883ac:	687b      	ldr	r3, [r7, #4]
 80883ae:	681b      	ldr	r3, [r3, #0]
 80883b0:	f042 0202 	orr.w	r2, r2, #2
 80883b4:	60da      	str	r2, [r3, #12]
      break;
 80883b6:	e011      	b.n	80883dc <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80883b8:	687b      	ldr	r3, [r7, #4]
 80883ba:	681b      	ldr	r3, [r3, #0]
 80883bc:	68da      	ldr	r2, [r3, #12]
 80883be:	687b      	ldr	r3, [r7, #4]
 80883c0:	681b      	ldr	r3, [r3, #0]
 80883c2:	f042 0204 	orr.w	r2, r2, #4
 80883c6:	60da      	str	r2, [r3, #12]
      break;
 80883c8:	e008      	b.n	80883dc <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80883ca:	687b      	ldr	r3, [r7, #4]
 80883cc:	681b      	ldr	r3, [r3, #0]
 80883ce:	68da      	ldr	r2, [r3, #12]
 80883d0:	687b      	ldr	r3, [r7, #4]
 80883d2:	681b      	ldr	r3, [r3, #0]
 80883d4:	f042 0208 	orr.w	r2, r2, #8
 80883d8:	60da      	str	r2, [r3, #12]
      break;
 80883da:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80883dc:	687b      	ldr	r3, [r7, #4]
 80883de:	681b      	ldr	r3, [r3, #0]
 80883e0:	68da      	ldr	r2, [r3, #12]
 80883e2:	687b      	ldr	r3, [r7, #4]
 80883e4:	681b      	ldr	r3, [r3, #0]
 80883e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80883ea:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80883ec:	687b      	ldr	r3, [r7, #4]
 80883ee:	681b      	ldr	r3, [r3, #0]
 80883f0:	2204      	movs	r2, #4
 80883f2:	6839      	ldr	r1, [r7, #0]
 80883f4:	4618      	mov	r0, r3
 80883f6:	f000 fcd9 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80883fa:	687b      	ldr	r3, [r7, #4]
 80883fc:	681b      	ldr	r3, [r3, #0]
 80883fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8088400:	687b      	ldr	r3, [r7, #4]
 8088402:	681b      	ldr	r3, [r3, #0]
 8088404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8088408:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 808840a:	687b      	ldr	r3, [r7, #4]
 808840c:	681b      	ldr	r3, [r3, #0]
 808840e:	689b      	ldr	r3, [r3, #8]
 8088410:	f003 0307 	and.w	r3, r3, #7
 8088414:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8088416:	68fb      	ldr	r3, [r7, #12]
 8088418:	2b06      	cmp	r3, #6
 808841a:	d007      	beq.n	808842c <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 808841c:	687b      	ldr	r3, [r7, #4]
 808841e:	681b      	ldr	r3, [r3, #0]
 8088420:	681a      	ldr	r2, [r3, #0]
 8088422:	687b      	ldr	r3, [r7, #4]
 8088424:	681b      	ldr	r3, [r3, #0]
 8088426:	f042 0201 	orr.w	r2, r2, #1
 808842a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 808842c:	2300      	movs	r3, #0
}
 808842e:	4618      	mov	r0, r3
 8088430:	3710      	adds	r7, #16
 8088432:	46bd      	mov	sp, r7
 8088434:	bd80      	pop	{r7, pc}

08088436 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8088436:	b580      	push	{r7, lr}
 8088438:	b084      	sub	sp, #16
 808843a:	af00      	add	r7, sp, #0
 808843c:	6078      	str	r0, [r7, #4]
 808843e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8088440:	683b      	ldr	r3, [r7, #0]
 8088442:	2b04      	cmp	r3, #4
 8088444:	d00d      	beq.n	8088462 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 8088446:	2b08      	cmp	r3, #8
 8088448:	d014      	beq.n	8088474 <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 808844a:	2b00      	cmp	r3, #0
 808844c:	d000      	beq.n	8088450 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 808844e:	e01a      	b.n	8088486 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8088450:	687b      	ldr	r3, [r7, #4]
 8088452:	681b      	ldr	r3, [r3, #0]
 8088454:	68da      	ldr	r2, [r3, #12]
 8088456:	687b      	ldr	r3, [r7, #4]
 8088458:	681b      	ldr	r3, [r3, #0]
 808845a:	f022 0202 	bic.w	r2, r2, #2
 808845e:	60da      	str	r2, [r3, #12]
      break;
 8088460:	e011      	b.n	8088486 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8088462:	687b      	ldr	r3, [r7, #4]
 8088464:	681b      	ldr	r3, [r3, #0]
 8088466:	68da      	ldr	r2, [r3, #12]
 8088468:	687b      	ldr	r3, [r7, #4]
 808846a:	681b      	ldr	r3, [r3, #0]
 808846c:	f022 0204 	bic.w	r2, r2, #4
 8088470:	60da      	str	r2, [r3, #12]
      break;
 8088472:	e008      	b.n	8088486 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8088474:	687b      	ldr	r3, [r7, #4]
 8088476:	681b      	ldr	r3, [r3, #0]
 8088478:	68da      	ldr	r2, [r3, #12]
 808847a:	687b      	ldr	r3, [r7, #4]
 808847c:	681b      	ldr	r3, [r3, #0]
 808847e:	f022 0208 	bic.w	r2, r2, #8
 8088482:	60da      	str	r2, [r3, #12]
      break;
 8088484:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8088486:	687b      	ldr	r3, [r7, #4]
 8088488:	681b      	ldr	r3, [r3, #0]
 808848a:	2200      	movs	r2, #0
 808848c:	6839      	ldr	r1, [r7, #0]
 808848e:	4618      	mov	r0, r3
 8088490:	f000 fc8c 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8088494:	687b      	ldr	r3, [r7, #4]
 8088496:	681b      	ldr	r3, [r3, #0]
 8088498:	6a1b      	ldr	r3, [r3, #32]
 808849a:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 808849c:	68fa      	ldr	r2, [r7, #12]
 808849e:	f240 4344 	movw	r3, #1092	; 0x444
 80884a2:	4013      	ands	r3, r2
 80884a4:	2b00      	cmp	r3, #0
 80884a6:	d107      	bne.n	80884b8 <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 80884a8:	687b      	ldr	r3, [r7, #4]
 80884aa:	681b      	ldr	r3, [r3, #0]
 80884ac:	68da      	ldr	r2, [r3, #12]
 80884ae:	687b      	ldr	r3, [r7, #4]
 80884b0:	681b      	ldr	r3, [r3, #0]
 80884b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80884b6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80884b8:	687b      	ldr	r3, [r7, #4]
 80884ba:	681b      	ldr	r3, [r3, #0]
 80884bc:	6a1a      	ldr	r2, [r3, #32]
 80884be:	f241 1311 	movw	r3, #4369	; 0x1111
 80884c2:	4013      	ands	r3, r2
 80884c4:	2b00      	cmp	r3, #0
 80884c6:	d10f      	bne.n	80884e8 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 80884c8:	687b      	ldr	r3, [r7, #4]
 80884ca:	681b      	ldr	r3, [r3, #0]
 80884cc:	6a1a      	ldr	r2, [r3, #32]
 80884ce:	f240 4344 	movw	r3, #1092	; 0x444
 80884d2:	4013      	ands	r3, r2
 80884d4:	2b00      	cmp	r3, #0
 80884d6:	d107      	bne.n	80884e8 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 80884d8:	687b      	ldr	r3, [r7, #4]
 80884da:	681b      	ldr	r3, [r3, #0]
 80884dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80884de:	687b      	ldr	r3, [r7, #4]
 80884e0:	681b      	ldr	r3, [r3, #0]
 80884e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80884e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80884e8:	687b      	ldr	r3, [r7, #4]
 80884ea:	681b      	ldr	r3, [r3, #0]
 80884ec:	6a1a      	ldr	r2, [r3, #32]
 80884ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80884f2:	4013      	ands	r3, r2
 80884f4:	2b00      	cmp	r3, #0
 80884f6:	d10f      	bne.n	8088518 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 80884f8:	687b      	ldr	r3, [r7, #4]
 80884fa:	681b      	ldr	r3, [r3, #0]
 80884fc:	6a1a      	ldr	r2, [r3, #32]
 80884fe:	f240 4344 	movw	r3, #1092	; 0x444
 8088502:	4013      	ands	r3, r2
 8088504:	2b00      	cmp	r3, #0
 8088506:	d107      	bne.n	8088518 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 8088508:	687b      	ldr	r3, [r7, #4]
 808850a:	681b      	ldr	r3, [r3, #0]
 808850c:	681a      	ldr	r2, [r3, #0]
 808850e:	687b      	ldr	r3, [r7, #4]
 8088510:	681b      	ldr	r3, [r3, #0]
 8088512:	f022 0201 	bic.w	r2, r2, #1
 8088516:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8088518:	2300      	movs	r3, #0
}
 808851a:	4618      	mov	r0, r3
 808851c:	3710      	adds	r7, #16
 808851e:	46bd      	mov	sp, r7
 8088520:	bd80      	pop	{r7, pc}

08088522 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8088522:	b580      	push	{r7, lr}
 8088524:	b086      	sub	sp, #24
 8088526:	af00      	add	r7, sp, #0
 8088528:	60f8      	str	r0, [r7, #12]
 808852a:	60b9      	str	r1, [r7, #8]
 808852c:	607a      	str	r2, [r7, #4]
 808852e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if ((htim->State == HAL_TIM_STATE_BUSY))
 8088530:	68fb      	ldr	r3, [r7, #12]
 8088532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8088536:	b2db      	uxtb	r3, r3
 8088538:	2b02      	cmp	r3, #2
 808853a:	d101      	bne.n	8088540 <HAL_TIMEx_PWMN_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 808853c:	2302      	movs	r3, #2
 808853e:	e0a6      	b.n	808868e <HAL_TIMEx_PWMN_Start_DMA+0x16c>
  }
  else if ((htim->State == HAL_TIM_STATE_READY))
 8088540:	68fb      	ldr	r3, [r7, #12]
 8088542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8088546:	b2db      	uxtb	r3, r3
 8088548:	2b01      	cmp	r3, #1
 808854a:	d10b      	bne.n	8088564 <HAL_TIMEx_PWMN_Start_DMA+0x42>
  {
    if (((uint32_t)pData == 0U) && (Length > 0U))
 808854c:	687b      	ldr	r3, [r7, #4]
 808854e:	2b00      	cmp	r3, #0
 8088550:	d104      	bne.n	808855c <HAL_TIMEx_PWMN_Start_DMA+0x3a>
 8088552:	887b      	ldrh	r3, [r7, #2]
 8088554:	2b00      	cmp	r3, #0
 8088556:	d001      	beq.n	808855c <HAL_TIMEx_PWMN_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8088558:	2301      	movs	r3, #1
 808855a:	e098      	b.n	808868e <HAL_TIMEx_PWMN_Start_DMA+0x16c>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 808855c:	68fb      	ldr	r3, [r7, #12]
 808855e:	2202      	movs	r2, #2
 8088560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  else
  {
    /* nothing to do */
  }
  switch (Channel)
 8088564:	68bb      	ldr	r3, [r7, #8]
 8088566:	2b04      	cmp	r3, #4
 8088568:	d028      	beq.n	80885bc <HAL_TIMEx_PWMN_Start_DMA+0x9a>
 808856a:	2b08      	cmp	r3, #8
 808856c:	d04a      	beq.n	8088604 <HAL_TIMEx_PWMN_Start_DMA+0xe2>
 808856e:	2b00      	cmp	r3, #0
 8088570:	d000      	beq.n	8088574 <HAL_TIMEx_PWMN_Start_DMA+0x52>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
      break;
    }

    default:
      break;
 8088572:	e06b      	b.n	808864c <HAL_TIMEx_PWMN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8088574:	68fb      	ldr	r3, [r7, #12]
 8088576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088578:	4a47      	ldr	r2, [pc, #284]	; (8088698 <HAL_TIMEx_PWMN_Start_DMA+0x176>)
 808857a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 808857c:	68fb      	ldr	r3, [r7, #12]
 808857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088580:	4a46      	ldr	r2, [pc, #280]	; (808869c <HAL_TIMEx_PWMN_Start_DMA+0x17a>)
 8088582:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8088584:	68fb      	ldr	r3, [r7, #12]
 8088586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088588:	4a45      	ldr	r2, [pc, #276]	; (80886a0 <HAL_TIMEx_PWMN_Start_DMA+0x17e>)
 808858a:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 808858c:	68fb      	ldr	r3, [r7, #12]
 808858e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8088590:	6879      	ldr	r1, [r7, #4]
 8088592:	68fb      	ldr	r3, [r7, #12]
 8088594:	681b      	ldr	r3, [r3, #0]
 8088596:	3334      	adds	r3, #52	; 0x34
 8088598:	461a      	mov	r2, r3
 808859a:	887b      	ldrh	r3, [r7, #2]
 808859c:	f7f9 fa59 	bl	8081a52 <HAL_DMA_Start_IT>
 80885a0:	4603      	mov	r3, r0
 80885a2:	2b00      	cmp	r3, #0
 80885a4:	d001      	beq.n	80885aa <HAL_TIMEx_PWMN_Start_DMA+0x88>
        return HAL_ERROR;
 80885a6:	2301      	movs	r3, #1
 80885a8:	e071      	b.n	808868e <HAL_TIMEx_PWMN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80885aa:	68fb      	ldr	r3, [r7, #12]
 80885ac:	681b      	ldr	r3, [r3, #0]
 80885ae:	68da      	ldr	r2, [r3, #12]
 80885b0:	68fb      	ldr	r3, [r7, #12]
 80885b2:	681b      	ldr	r3, [r3, #0]
 80885b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80885b8:	60da      	str	r2, [r3, #12]
      break;
 80885ba:	e047      	b.n	808864c <HAL_TIMEx_PWMN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80885bc:	68fb      	ldr	r3, [r7, #12]
 80885be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80885c0:	4a35      	ldr	r2, [pc, #212]	; (8088698 <HAL_TIMEx_PWMN_Start_DMA+0x176>)
 80885c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80885c4:	68fb      	ldr	r3, [r7, #12]
 80885c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80885c8:	4a34      	ldr	r2, [pc, #208]	; (808869c <HAL_TIMEx_PWMN_Start_DMA+0x17a>)
 80885ca:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80885cc:	68fb      	ldr	r3, [r7, #12]
 80885ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80885d0:	4a33      	ldr	r2, [pc, #204]	; (80886a0 <HAL_TIMEx_PWMN_Start_DMA+0x17e>)
 80885d2:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80885d4:	68fb      	ldr	r3, [r7, #12]
 80885d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80885d8:	6879      	ldr	r1, [r7, #4]
 80885da:	68fb      	ldr	r3, [r7, #12]
 80885dc:	681b      	ldr	r3, [r3, #0]
 80885de:	3338      	adds	r3, #56	; 0x38
 80885e0:	461a      	mov	r2, r3
 80885e2:	887b      	ldrh	r3, [r7, #2]
 80885e4:	f7f9 fa35 	bl	8081a52 <HAL_DMA_Start_IT>
 80885e8:	4603      	mov	r3, r0
 80885ea:	2b00      	cmp	r3, #0
 80885ec:	d001      	beq.n	80885f2 <HAL_TIMEx_PWMN_Start_DMA+0xd0>
        return HAL_ERROR;
 80885ee:	2301      	movs	r3, #1
 80885f0:	e04d      	b.n	808868e <HAL_TIMEx_PWMN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80885f2:	68fb      	ldr	r3, [r7, #12]
 80885f4:	681b      	ldr	r3, [r3, #0]
 80885f6:	68da      	ldr	r2, [r3, #12]
 80885f8:	68fb      	ldr	r3, [r7, #12]
 80885fa:	681b      	ldr	r3, [r3, #0]
 80885fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8088600:	60da      	str	r2, [r3, #12]
      break;
 8088602:	e023      	b.n	808864c <HAL_TIMEx_PWMN_Start_DMA+0x12a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8088604:	68fb      	ldr	r3, [r7, #12]
 8088606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088608:	4a23      	ldr	r2, [pc, #140]	; (8088698 <HAL_TIMEx_PWMN_Start_DMA+0x176>)
 808860a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 808860c:	68fb      	ldr	r3, [r7, #12]
 808860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088610:	4a22      	ldr	r2, [pc, #136]	; (808869c <HAL_TIMEx_PWMN_Start_DMA+0x17a>)
 8088612:	641a      	str	r2, [r3, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8088614:	68fb      	ldr	r3, [r7, #12]
 8088616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088618:	4a21      	ldr	r2, [pc, #132]	; (80886a0 <HAL_TIMEx_PWMN_Start_DMA+0x17e>)
 808861a:	64da      	str	r2, [r3, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 808861c:	68fb      	ldr	r3, [r7, #12]
 808861e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8088620:	6879      	ldr	r1, [r7, #4]
 8088622:	68fb      	ldr	r3, [r7, #12]
 8088624:	681b      	ldr	r3, [r3, #0]
 8088626:	333c      	adds	r3, #60	; 0x3c
 8088628:	461a      	mov	r2, r3
 808862a:	887b      	ldrh	r3, [r7, #2]
 808862c:	f7f9 fa11 	bl	8081a52 <HAL_DMA_Start_IT>
 8088630:	4603      	mov	r3, r0
 8088632:	2b00      	cmp	r3, #0
 8088634:	d001      	beq.n	808863a <HAL_TIMEx_PWMN_Start_DMA+0x118>
        return HAL_ERROR;
 8088636:	2301      	movs	r3, #1
 8088638:	e029      	b.n	808868e <HAL_TIMEx_PWMN_Start_DMA+0x16c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 808863a:	68fb      	ldr	r3, [r7, #12]
 808863c:	681b      	ldr	r3, [r3, #0]
 808863e:	68da      	ldr	r2, [r3, #12]
 8088640:	68fb      	ldr	r3, [r7, #12]
 8088642:	681b      	ldr	r3, [r3, #0]
 8088644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8088648:	60da      	str	r2, [r3, #12]
      break;
 808864a:	bf00      	nop
  }

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 808864c:	68fb      	ldr	r3, [r7, #12]
 808864e:	681b      	ldr	r3, [r3, #0]
 8088650:	2204      	movs	r2, #4
 8088652:	68b9      	ldr	r1, [r7, #8]
 8088654:	4618      	mov	r0, r3
 8088656:	f000 fba9 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 808865a:	68fb      	ldr	r3, [r7, #12]
 808865c:	681b      	ldr	r3, [r3, #0]
 808865e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8088660:	68fb      	ldr	r3, [r7, #12]
 8088662:	681b      	ldr	r3, [r3, #0]
 8088664:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8088668:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 808866a:	68fb      	ldr	r3, [r7, #12]
 808866c:	681b      	ldr	r3, [r3, #0]
 808866e:	689b      	ldr	r3, [r3, #8]
 8088670:	f003 0307 	and.w	r3, r3, #7
 8088674:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8088676:	697b      	ldr	r3, [r7, #20]
 8088678:	2b06      	cmp	r3, #6
 808867a:	d007      	beq.n	808868c <HAL_TIMEx_PWMN_Start_DMA+0x16a>
  {
    __HAL_TIM_ENABLE(htim);
 808867c:	68fb      	ldr	r3, [r7, #12]
 808867e:	681b      	ldr	r3, [r3, #0]
 8088680:	681a      	ldr	r2, [r3, #0]
 8088682:	68fb      	ldr	r3, [r7, #12]
 8088684:	681b      	ldr	r3, [r3, #0]
 8088686:	f042 0201 	orr.w	r2, r2, #1
 808868a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 808868c:	2300      	movs	r3, #0
}
 808868e:	4618      	mov	r0, r3
 8088690:	3718      	adds	r7, #24
 8088692:	46bd      	mov	sp, r7
 8088694:	bd80      	pop	{r7, pc}
 8088696:	bf00      	nop
 8088698:	08086ddd 	.word	0x08086ddd
 808869c:	08086e4d 	.word	0x08086e4d
 80886a0:	08086db9 	.word	0x08086db9

080886a4 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80886a4:	b580      	push	{r7, lr}
 80886a6:	b082      	sub	sp, #8
 80886a8:	af00      	add	r7, sp, #0
 80886aa:	6078      	str	r0, [r7, #4]
 80886ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80886ae:	683b      	ldr	r3, [r7, #0]
 80886b0:	2b04      	cmp	r3, #4
 80886b2:	d012      	beq.n	80886da <HAL_TIMEx_PWMN_Stop_DMA+0x36>
 80886b4:	2b08      	cmp	r3, #8
 80886b6:	d01e      	beq.n	80886f6 <HAL_TIMEx_PWMN_Stop_DMA+0x52>
 80886b8:	2b00      	cmp	r3, #0
 80886ba:	d000      	beq.n	80886be <HAL_TIMEx_PWMN_Stop_DMA+0x1a>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
      break;
    }

    default:
      break;
 80886bc:	e029      	b.n	8088712 <HAL_TIMEx_PWMN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80886be:	687b      	ldr	r3, [r7, #4]
 80886c0:	681b      	ldr	r3, [r3, #0]
 80886c2:	68da      	ldr	r2, [r3, #12]
 80886c4:	687b      	ldr	r3, [r7, #4]
 80886c6:	681b      	ldr	r3, [r3, #0]
 80886c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80886cc:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80886ce:	687b      	ldr	r3, [r7, #4]
 80886d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80886d2:	4618      	mov	r0, r3
 80886d4:	f7f9 fa8d 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 80886d8:	e01b      	b.n	8088712 <HAL_TIMEx_PWMN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80886da:	687b      	ldr	r3, [r7, #4]
 80886dc:	681b      	ldr	r3, [r3, #0]
 80886de:	68da      	ldr	r2, [r3, #12]
 80886e0:	687b      	ldr	r3, [r7, #4]
 80886e2:	681b      	ldr	r3, [r3, #0]
 80886e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80886e8:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80886ea:	687b      	ldr	r3, [r7, #4]
 80886ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80886ee:	4618      	mov	r0, r3
 80886f0:	f7f9 fa7f 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 80886f4:	e00d      	b.n	8088712 <HAL_TIMEx_PWMN_Stop_DMA+0x6e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80886f6:	687b      	ldr	r3, [r7, #4]
 80886f8:	681b      	ldr	r3, [r3, #0]
 80886fa:	68da      	ldr	r2, [r3, #12]
 80886fc:	687b      	ldr	r3, [r7, #4]
 80886fe:	681b      	ldr	r3, [r3, #0]
 8088700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8088704:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8088706:	687b      	ldr	r3, [r7, #4]
 8088708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808870a:	4618      	mov	r0, r3
 808870c:	f7f9 fa71 	bl	8081bf2 <HAL_DMA_Abort_IT>
      break;
 8088710:	bf00      	nop
  }

  /* Disable the complementary PWM output */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8088712:	687b      	ldr	r3, [r7, #4]
 8088714:	681b      	ldr	r3, [r3, #0]
 8088716:	2200      	movs	r2, #0
 8088718:	6839      	ldr	r1, [r7, #0]
 808871a:	4618      	mov	r0, r3
 808871c:	f000 fb46 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8088720:	687b      	ldr	r3, [r7, #4]
 8088722:	681b      	ldr	r3, [r3, #0]
 8088724:	6a1a      	ldr	r2, [r3, #32]
 8088726:	f241 1311 	movw	r3, #4369	; 0x1111
 808872a:	4013      	ands	r3, r2
 808872c:	2b00      	cmp	r3, #0
 808872e:	d10f      	bne.n	8088750 <HAL_TIMEx_PWMN_Stop_DMA+0xac>
 8088730:	687b      	ldr	r3, [r7, #4]
 8088732:	681b      	ldr	r3, [r3, #0]
 8088734:	6a1a      	ldr	r2, [r3, #32]
 8088736:	f240 4344 	movw	r3, #1092	; 0x444
 808873a:	4013      	ands	r3, r2
 808873c:	2b00      	cmp	r3, #0
 808873e:	d107      	bne.n	8088750 <HAL_TIMEx_PWMN_Stop_DMA+0xac>
 8088740:	687b      	ldr	r3, [r7, #4]
 8088742:	681b      	ldr	r3, [r3, #0]
 8088744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8088746:	687b      	ldr	r3, [r7, #4]
 8088748:	681b      	ldr	r3, [r3, #0]
 808874a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 808874e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8088750:	687b      	ldr	r3, [r7, #4]
 8088752:	681b      	ldr	r3, [r3, #0]
 8088754:	6a1a      	ldr	r2, [r3, #32]
 8088756:	f241 1311 	movw	r3, #4369	; 0x1111
 808875a:	4013      	ands	r3, r2
 808875c:	2b00      	cmp	r3, #0
 808875e:	d10f      	bne.n	8088780 <HAL_TIMEx_PWMN_Stop_DMA+0xdc>
 8088760:	687b      	ldr	r3, [r7, #4]
 8088762:	681b      	ldr	r3, [r3, #0]
 8088764:	6a1a      	ldr	r2, [r3, #32]
 8088766:	f240 4344 	movw	r3, #1092	; 0x444
 808876a:	4013      	ands	r3, r2
 808876c:	2b00      	cmp	r3, #0
 808876e:	d107      	bne.n	8088780 <HAL_TIMEx_PWMN_Stop_DMA+0xdc>
 8088770:	687b      	ldr	r3, [r7, #4]
 8088772:	681b      	ldr	r3, [r3, #0]
 8088774:	681a      	ldr	r2, [r3, #0]
 8088776:	687b      	ldr	r3, [r7, #4]
 8088778:	681b      	ldr	r3, [r3, #0]
 808877a:	f022 0201 	bic.w	r2, r2, #1
 808877e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8088780:	687b      	ldr	r3, [r7, #4]
 8088782:	2201      	movs	r2, #1
 8088784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8088788:	2300      	movs	r3, #0
}
 808878a:	4618      	mov	r0, r3
 808878c:	3708      	adds	r7, #8
 808878e:	46bd      	mov	sp, r7
 8088790:	bd80      	pop	{r7, pc}

08088792 <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8088792:	b580      	push	{r7, lr}
 8088794:	b082      	sub	sp, #8
 8088796:	af00      	add	r7, sp, #0
 8088798:	6078      	str	r0, [r7, #4]
 808879a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 808879c:	687b      	ldr	r3, [r7, #4]
 808879e:	681b      	ldr	r3, [r3, #0]
 80887a0:	2204      	movs	r2, #4
 80887a2:	6839      	ldr	r1, [r7, #0]
 80887a4:	4618      	mov	r0, r3
 80887a6:	f000 fb01 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80887aa:	687b      	ldr	r3, [r7, #4]
 80887ac:	681b      	ldr	r3, [r3, #0]
 80887ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80887b0:	687b      	ldr	r3, [r7, #4]
 80887b2:	681b      	ldr	r3, [r3, #0]
 80887b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80887b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80887ba:	2300      	movs	r3, #0
}
 80887bc:	4618      	mov	r0, r3
 80887be:	3708      	adds	r7, #8
 80887c0:	46bd      	mov	sp, r7
 80887c2:	bd80      	pop	{r7, pc}

080887c4 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80887c4:	b580      	push	{r7, lr}
 80887c6:	b082      	sub	sp, #8
 80887c8:	af00      	add	r7, sp, #0
 80887ca:	6078      	str	r0, [r7, #4]
 80887cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 80887ce:	687b      	ldr	r3, [r7, #4]
 80887d0:	681b      	ldr	r3, [r3, #0]
 80887d2:	2200      	movs	r2, #0
 80887d4:	6839      	ldr	r1, [r7, #0]
 80887d6:	4618      	mov	r0, r3
 80887d8:	f000 fae8 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80887dc:	687b      	ldr	r3, [r7, #4]
 80887de:	681b      	ldr	r3, [r3, #0]
 80887e0:	6a1a      	ldr	r2, [r3, #32]
 80887e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80887e6:	4013      	ands	r3, r2
 80887e8:	2b00      	cmp	r3, #0
 80887ea:	d10f      	bne.n	808880c <HAL_TIMEx_OnePulseN_Stop+0x48>
 80887ec:	687b      	ldr	r3, [r7, #4]
 80887ee:	681b      	ldr	r3, [r3, #0]
 80887f0:	6a1a      	ldr	r2, [r3, #32]
 80887f2:	f240 4344 	movw	r3, #1092	; 0x444
 80887f6:	4013      	ands	r3, r2
 80887f8:	2b00      	cmp	r3, #0
 80887fa:	d107      	bne.n	808880c <HAL_TIMEx_OnePulseN_Stop+0x48>
 80887fc:	687b      	ldr	r3, [r7, #4]
 80887fe:	681b      	ldr	r3, [r3, #0]
 8088800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8088802:	687b      	ldr	r3, [r7, #4]
 8088804:	681b      	ldr	r3, [r3, #0]
 8088806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 808880a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 808880c:	687b      	ldr	r3, [r7, #4]
 808880e:	681b      	ldr	r3, [r3, #0]
 8088810:	6a1a      	ldr	r2, [r3, #32]
 8088812:	f241 1311 	movw	r3, #4369	; 0x1111
 8088816:	4013      	ands	r3, r2
 8088818:	2b00      	cmp	r3, #0
 808881a:	d10f      	bne.n	808883c <HAL_TIMEx_OnePulseN_Stop+0x78>
 808881c:	687b      	ldr	r3, [r7, #4]
 808881e:	681b      	ldr	r3, [r3, #0]
 8088820:	6a1a      	ldr	r2, [r3, #32]
 8088822:	f240 4344 	movw	r3, #1092	; 0x444
 8088826:	4013      	ands	r3, r2
 8088828:	2b00      	cmp	r3, #0
 808882a:	d107      	bne.n	808883c <HAL_TIMEx_OnePulseN_Stop+0x78>
 808882c:	687b      	ldr	r3, [r7, #4]
 808882e:	681b      	ldr	r3, [r3, #0]
 8088830:	681a      	ldr	r2, [r3, #0]
 8088832:	687b      	ldr	r3, [r7, #4]
 8088834:	681b      	ldr	r3, [r3, #0]
 8088836:	f022 0201 	bic.w	r2, r2, #1
 808883a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 808883c:	2300      	movs	r3, #0
}
 808883e:	4618      	mov	r0, r3
 8088840:	3708      	adds	r7, #8
 8088842:	46bd      	mov	sp, r7
 8088844:	bd80      	pop	{r7, pc}

08088846 <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8088846:	b580      	push	{r7, lr}
 8088848:	b082      	sub	sp, #8
 808884a:	af00      	add	r7, sp, #0
 808884c:	6078      	str	r0, [r7, #4]
 808884e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8088850:	687b      	ldr	r3, [r7, #4]
 8088852:	681b      	ldr	r3, [r3, #0]
 8088854:	68da      	ldr	r2, [r3, #12]
 8088856:	687b      	ldr	r3, [r7, #4]
 8088858:	681b      	ldr	r3, [r3, #0]
 808885a:	f042 0202 	orr.w	r2, r2, #2
 808885e:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8088860:	687b      	ldr	r3, [r7, #4]
 8088862:	681b      	ldr	r3, [r3, #0]
 8088864:	68da      	ldr	r2, [r3, #12]
 8088866:	687b      	ldr	r3, [r7, #4]
 8088868:	681b      	ldr	r3, [r3, #0]
 808886a:	f042 0204 	orr.w	r2, r2, #4
 808886e:	60da      	str	r2, [r3, #12]

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8088870:	687b      	ldr	r3, [r7, #4]
 8088872:	681b      	ldr	r3, [r3, #0]
 8088874:	2204      	movs	r2, #4
 8088876:	6839      	ldr	r1, [r7, #0]
 8088878:	4618      	mov	r0, r3
 808887a:	f000 fa97 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 808887e:	687b      	ldr	r3, [r7, #4]
 8088880:	681b      	ldr	r3, [r3, #0]
 8088882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8088884:	687b      	ldr	r3, [r7, #4]
 8088886:	681b      	ldr	r3, [r3, #0]
 8088888:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 808888c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 808888e:	2300      	movs	r3, #0
}
 8088890:	4618      	mov	r0, r3
 8088892:	3708      	adds	r7, #8
 8088894:	46bd      	mov	sp, r7
 8088896:	bd80      	pop	{r7, pc}

08088898 <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8088898:	b580      	push	{r7, lr}
 808889a:	b082      	sub	sp, #8
 808889c:	af00      	add	r7, sp, #0
 808889e:	6078      	str	r0, [r7, #4]
 80888a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80888a2:	687b      	ldr	r3, [r7, #4]
 80888a4:	681b      	ldr	r3, [r3, #0]
 80888a6:	68da      	ldr	r2, [r3, #12]
 80888a8:	687b      	ldr	r3, [r7, #4]
 80888aa:	681b      	ldr	r3, [r3, #0]
 80888ac:	f022 0202 	bic.w	r2, r2, #2
 80888b0:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80888b2:	687b      	ldr	r3, [r7, #4]
 80888b4:	681b      	ldr	r3, [r3, #0]
 80888b6:	68da      	ldr	r2, [r3, #12]
 80888b8:	687b      	ldr	r3, [r7, #4]
 80888ba:	681b      	ldr	r3, [r3, #0]
 80888bc:	f022 0204 	bic.w	r2, r2, #4
 80888c0:	60da      	str	r2, [r3, #12]

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 80888c2:	687b      	ldr	r3, [r7, #4]
 80888c4:	681b      	ldr	r3, [r3, #0]
 80888c6:	2200      	movs	r2, #0
 80888c8:	6839      	ldr	r1, [r7, #0]
 80888ca:	4618      	mov	r0, r3
 80888cc:	f000 fa6e 	bl	8088dac <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80888d0:	687b      	ldr	r3, [r7, #4]
 80888d2:	681b      	ldr	r3, [r3, #0]
 80888d4:	6a1a      	ldr	r2, [r3, #32]
 80888d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80888da:	4013      	ands	r3, r2
 80888dc:	2b00      	cmp	r3, #0
 80888de:	d10f      	bne.n	8088900 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 80888e0:	687b      	ldr	r3, [r7, #4]
 80888e2:	681b      	ldr	r3, [r3, #0]
 80888e4:	6a1a      	ldr	r2, [r3, #32]
 80888e6:	f240 4344 	movw	r3, #1092	; 0x444
 80888ea:	4013      	ands	r3, r2
 80888ec:	2b00      	cmp	r3, #0
 80888ee:	d107      	bne.n	8088900 <HAL_TIMEx_OnePulseN_Stop_IT+0x68>
 80888f0:	687b      	ldr	r3, [r7, #4]
 80888f2:	681b      	ldr	r3, [r3, #0]
 80888f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80888f6:	687b      	ldr	r3, [r7, #4]
 80888f8:	681b      	ldr	r3, [r3, #0]
 80888fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80888fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8088900:	687b      	ldr	r3, [r7, #4]
 8088902:	681b      	ldr	r3, [r3, #0]
 8088904:	6a1a      	ldr	r2, [r3, #32]
 8088906:	f241 1311 	movw	r3, #4369	; 0x1111
 808890a:	4013      	ands	r3, r2
 808890c:	2b00      	cmp	r3, #0
 808890e:	d10f      	bne.n	8088930 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 8088910:	687b      	ldr	r3, [r7, #4]
 8088912:	681b      	ldr	r3, [r3, #0]
 8088914:	6a1a      	ldr	r2, [r3, #32]
 8088916:	f240 4344 	movw	r3, #1092	; 0x444
 808891a:	4013      	ands	r3, r2
 808891c:	2b00      	cmp	r3, #0
 808891e:	d107      	bne.n	8088930 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>
 8088920:	687b      	ldr	r3, [r7, #4]
 8088922:	681b      	ldr	r3, [r3, #0]
 8088924:	681a      	ldr	r2, [r3, #0]
 8088926:	687b      	ldr	r3, [r7, #4]
 8088928:	681b      	ldr	r3, [r3, #0]
 808892a:	f022 0201 	bic.w	r2, r2, #1
 808892e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8088930:	2300      	movs	r3, #0
}
 8088932:	4618      	mov	r0, r3
 8088934:	3708      	adds	r7, #8
 8088936:	46bd      	mov	sp, r7
 8088938:	bd80      	pop	{r7, pc}

0808893a <HAL_TIMEx_ConfigCommutEvent>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 808893a:	b480      	push	{r7}
 808893c:	b085      	sub	sp, #20
 808893e:	af00      	add	r7, sp, #0
 8088940:	60f8      	str	r0, [r7, #12]
 8088942:	60b9      	str	r1, [r7, #8]
 8088944:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8088946:	68fb      	ldr	r3, [r7, #12]
 8088948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 808894c:	2b01      	cmp	r3, #1
 808894e:	d101      	bne.n	8088954 <HAL_TIMEx_ConfigCommutEvent+0x1a>
 8088950:	2302      	movs	r3, #2
 8088952:	e04c      	b.n	80889ee <HAL_TIMEx_ConfigCommutEvent+0xb4>
 8088954:	68fb      	ldr	r3, [r7, #12]
 8088956:	2201      	movs	r2, #1
 8088958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 808895c:	68bb      	ldr	r3, [r7, #8]
 808895e:	2b00      	cmp	r3, #0
 8088960:	d008      	beq.n	8088974 <HAL_TIMEx_ConfigCommutEvent+0x3a>
 8088962:	68bb      	ldr	r3, [r7, #8]
 8088964:	2b10      	cmp	r3, #16
 8088966:	d005      	beq.n	8088974 <HAL_TIMEx_ConfigCommutEvent+0x3a>
 8088968:	68bb      	ldr	r3, [r7, #8]
 808896a:	2b20      	cmp	r3, #32
 808896c:	d002      	beq.n	8088974 <HAL_TIMEx_ConfigCommutEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 808896e:	68bb      	ldr	r3, [r7, #8]
 8088970:	2b30      	cmp	r3, #48	; 0x30
 8088972:	d10f      	bne.n	8088994 <HAL_TIMEx_ConfigCommutEvent+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8088974:	68fb      	ldr	r3, [r7, #12]
 8088976:	681b      	ldr	r3, [r3, #0]
 8088978:	689a      	ldr	r2, [r3, #8]
 808897a:	68fb      	ldr	r3, [r7, #12]
 808897c:	681b      	ldr	r3, [r3, #0]
 808897e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8088982:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8088984:	68fb      	ldr	r3, [r7, #12]
 8088986:	681b      	ldr	r3, [r3, #0]
 8088988:	6899      	ldr	r1, [r3, #8]
 808898a:	68fb      	ldr	r3, [r7, #12]
 808898c:	681b      	ldr	r3, [r3, #0]
 808898e:	68ba      	ldr	r2, [r7, #8]
 8088990:	430a      	orrs	r2, r1
 8088992:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8088994:	68fb      	ldr	r3, [r7, #12]
 8088996:	681b      	ldr	r3, [r3, #0]
 8088998:	685a      	ldr	r2, [r3, #4]
 808899a:	68fb      	ldr	r3, [r7, #12]
 808899c:	681b      	ldr	r3, [r3, #0]
 808899e:	f042 0201 	orr.w	r2, r2, #1
 80889a2:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 80889a4:	68fb      	ldr	r3, [r7, #12]
 80889a6:	681b      	ldr	r3, [r3, #0]
 80889a8:	685a      	ldr	r2, [r3, #4]
 80889aa:	68fb      	ldr	r3, [r7, #12]
 80889ac:	681b      	ldr	r3, [r3, #0]
 80889ae:	f022 0204 	bic.w	r2, r2, #4
 80889b2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 80889b4:	68fb      	ldr	r3, [r7, #12]
 80889b6:	681b      	ldr	r3, [r3, #0]
 80889b8:	6859      	ldr	r1, [r3, #4]
 80889ba:	68fb      	ldr	r3, [r7, #12]
 80889bc:	681b      	ldr	r3, [r3, #0]
 80889be:	687a      	ldr	r2, [r7, #4]
 80889c0:	430a      	orrs	r2, r1
 80889c2:	605a      	str	r2, [r3, #4]

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 80889c4:	68fb      	ldr	r3, [r7, #12]
 80889c6:	681b      	ldr	r3, [r3, #0]
 80889c8:	68da      	ldr	r2, [r3, #12]
 80889ca:	68fb      	ldr	r3, [r7, #12]
 80889cc:	681b      	ldr	r3, [r3, #0]
 80889ce:	f022 0220 	bic.w	r2, r2, #32
 80889d2:	60da      	str	r2, [r3, #12]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 80889d4:	68fb      	ldr	r3, [r7, #12]
 80889d6:	681b      	ldr	r3, [r3, #0]
 80889d8:	68da      	ldr	r2, [r3, #12]
 80889da:	68fb      	ldr	r3, [r7, #12]
 80889dc:	681b      	ldr	r3, [r3, #0]
 80889de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80889e2:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 80889e4:	68fb      	ldr	r3, [r7, #12]
 80889e6:	2200      	movs	r2, #0
 80889e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80889ec:	2300      	movs	r3, #0
}
 80889ee:	4618      	mov	r0, r3
 80889f0:	3714      	adds	r7, #20
 80889f2:	46bd      	mov	sp, r7
 80889f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80889f8:	4770      	bx	lr

080889fa <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 80889fa:	b480      	push	{r7}
 80889fc:	b085      	sub	sp, #20
 80889fe:	af00      	add	r7, sp, #0
 8088a00:	60f8      	str	r0, [r7, #12]
 8088a02:	60b9      	str	r1, [r7, #8]
 8088a04:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8088a06:	68fb      	ldr	r3, [r7, #12]
 8088a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8088a0c:	2b01      	cmp	r3, #1
 8088a0e:	d101      	bne.n	8088a14 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 8088a10:	2302      	movs	r3, #2
 8088a12:	e04c      	b.n	8088aae <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 8088a14:	68fb      	ldr	r3, [r7, #12]
 8088a16:	2201      	movs	r2, #1
 8088a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8088a1c:	68bb      	ldr	r3, [r7, #8]
 8088a1e:	2b00      	cmp	r3, #0
 8088a20:	d008      	beq.n	8088a34 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8088a22:	68bb      	ldr	r3, [r7, #8]
 8088a24:	2b10      	cmp	r3, #16
 8088a26:	d005      	beq.n	8088a34 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8088a28:	68bb      	ldr	r3, [r7, #8]
 8088a2a:	2b20      	cmp	r3, #32
 8088a2c:	d002      	beq.n	8088a34 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8088a2e:	68bb      	ldr	r3, [r7, #8]
 8088a30:	2b30      	cmp	r3, #48	; 0x30
 8088a32:	d10f      	bne.n	8088a54 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8088a34:	68fb      	ldr	r3, [r7, #12]
 8088a36:	681b      	ldr	r3, [r3, #0]
 8088a38:	689a      	ldr	r2, [r3, #8]
 8088a3a:	68fb      	ldr	r3, [r7, #12]
 8088a3c:	681b      	ldr	r3, [r3, #0]
 8088a3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8088a42:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8088a44:	68fb      	ldr	r3, [r7, #12]
 8088a46:	681b      	ldr	r3, [r3, #0]
 8088a48:	6899      	ldr	r1, [r3, #8]
 8088a4a:	68fb      	ldr	r3, [r7, #12]
 8088a4c:	681b      	ldr	r3, [r3, #0]
 8088a4e:	68ba      	ldr	r2, [r7, #8]
 8088a50:	430a      	orrs	r2, r1
 8088a52:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8088a54:	68fb      	ldr	r3, [r7, #12]
 8088a56:	681b      	ldr	r3, [r3, #0]
 8088a58:	685a      	ldr	r2, [r3, #4]
 8088a5a:	68fb      	ldr	r3, [r7, #12]
 8088a5c:	681b      	ldr	r3, [r3, #0]
 8088a5e:	f042 0201 	orr.w	r2, r2, #1
 8088a62:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8088a64:	68fb      	ldr	r3, [r7, #12]
 8088a66:	681b      	ldr	r3, [r3, #0]
 8088a68:	685a      	ldr	r2, [r3, #4]
 8088a6a:	68fb      	ldr	r3, [r7, #12]
 8088a6c:	681b      	ldr	r3, [r3, #0]
 8088a6e:	f022 0204 	bic.w	r2, r2, #4
 8088a72:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8088a74:	68fb      	ldr	r3, [r7, #12]
 8088a76:	681b      	ldr	r3, [r3, #0]
 8088a78:	6859      	ldr	r1, [r3, #4]
 8088a7a:	68fb      	ldr	r3, [r7, #12]
 8088a7c:	681b      	ldr	r3, [r3, #0]
 8088a7e:	687a      	ldr	r2, [r7, #4]
 8088a80:	430a      	orrs	r2, r1
 8088a82:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8088a84:	68fb      	ldr	r3, [r7, #12]
 8088a86:	681b      	ldr	r3, [r3, #0]
 8088a88:	68da      	ldr	r2, [r3, #12]
 8088a8a:	68fb      	ldr	r3, [r7, #12]
 8088a8c:	681b      	ldr	r3, [r3, #0]
 8088a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8088a92:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8088a94:	68fb      	ldr	r3, [r7, #12]
 8088a96:	681b      	ldr	r3, [r3, #0]
 8088a98:	68da      	ldr	r2, [r3, #12]
 8088a9a:	68fb      	ldr	r3, [r7, #12]
 8088a9c:	681b      	ldr	r3, [r3, #0]
 8088a9e:	f042 0220 	orr.w	r2, r2, #32
 8088aa2:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8088aa4:	68fb      	ldr	r3, [r7, #12]
 8088aa6:	2200      	movs	r2, #0
 8088aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8088aac:	2300      	movs	r3, #0
}
 8088aae:	4618      	mov	r0, r3
 8088ab0:	3714      	adds	r7, #20
 8088ab2:	46bd      	mov	sp, r7
 8088ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088ab8:	4770      	bx	lr

08088aba <HAL_TIMEx_ConfigCommutEvent_DMA>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 8088aba:	b480      	push	{r7}
 8088abc:	b085      	sub	sp, #20
 8088abe:	af00      	add	r7, sp, #0
 8088ac0:	60f8      	str	r0, [r7, #12]
 8088ac2:	60b9      	str	r1, [r7, #8]
 8088ac4:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8088ac6:	68fb      	ldr	r3, [r7, #12]
 8088ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8088acc:	2b01      	cmp	r3, #1
 8088ace:	d101      	bne.n	8088ad4 <HAL_TIMEx_ConfigCommutEvent_DMA+0x1a>
 8088ad0:	2302      	movs	r3, #2
 8088ad2:	e058      	b.n	8088b86 <HAL_TIMEx_ConfigCommutEvent_DMA+0xcc>
 8088ad4:	68fb      	ldr	r3, [r7, #12]
 8088ad6:	2201      	movs	r2, #1
 8088ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8088adc:	68bb      	ldr	r3, [r7, #8]
 8088ade:	2b00      	cmp	r3, #0
 8088ae0:	d008      	beq.n	8088af4 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 8088ae2:	68bb      	ldr	r3, [r7, #8]
 8088ae4:	2b10      	cmp	r3, #16
 8088ae6:	d005      	beq.n	8088af4 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 8088ae8:	68bb      	ldr	r3, [r7, #8]
 8088aea:	2b20      	cmp	r3, #32
 8088aec:	d002      	beq.n	8088af4 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8088aee:	68bb      	ldr	r3, [r7, #8]
 8088af0:	2b30      	cmp	r3, #48	; 0x30
 8088af2:	d10f      	bne.n	8088b14 <HAL_TIMEx_ConfigCommutEvent_DMA+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8088af4:	68fb      	ldr	r3, [r7, #12]
 8088af6:	681b      	ldr	r3, [r3, #0]
 8088af8:	689a      	ldr	r2, [r3, #8]
 8088afa:	68fb      	ldr	r3, [r7, #12]
 8088afc:	681b      	ldr	r3, [r3, #0]
 8088afe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8088b02:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8088b04:	68fb      	ldr	r3, [r7, #12]
 8088b06:	681b      	ldr	r3, [r3, #0]
 8088b08:	6899      	ldr	r1, [r3, #8]
 8088b0a:	68fb      	ldr	r3, [r7, #12]
 8088b0c:	681b      	ldr	r3, [r3, #0]
 8088b0e:	68ba      	ldr	r2, [r7, #8]
 8088b10:	430a      	orrs	r2, r1
 8088b12:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8088b14:	68fb      	ldr	r3, [r7, #12]
 8088b16:	681b      	ldr	r3, [r3, #0]
 8088b18:	685a      	ldr	r2, [r3, #4]
 8088b1a:	68fb      	ldr	r3, [r7, #12]
 8088b1c:	681b      	ldr	r3, [r3, #0]
 8088b1e:	f042 0201 	orr.w	r2, r2, #1
 8088b22:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8088b24:	68fb      	ldr	r3, [r7, #12]
 8088b26:	681b      	ldr	r3, [r3, #0]
 8088b28:	685a      	ldr	r2, [r3, #4]
 8088b2a:	68fb      	ldr	r3, [r7, #12]
 8088b2c:	681b      	ldr	r3, [r3, #0]
 8088b2e:	f022 0204 	bic.w	r2, r2, #4
 8088b32:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8088b34:	68fb      	ldr	r3, [r7, #12]
 8088b36:	681b      	ldr	r3, [r3, #0]
 8088b38:	6859      	ldr	r1, [r3, #4]
 8088b3a:	68fb      	ldr	r3, [r7, #12]
 8088b3c:	681b      	ldr	r3, [r3, #0]
 8088b3e:	687a      	ldr	r2, [r7, #4]
 8088b40:	430a      	orrs	r2, r1
 8088b42:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8088b44:	68fb      	ldr	r3, [r7, #12]
 8088b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088b48:	4a12      	ldr	r2, [pc, #72]	; (8088b94 <HAL_TIMEx_ConfigCommutEvent_DMA+0xda>)
 8088b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 8088b4c:	68fb      	ldr	r3, [r7, #12]
 8088b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088b50:	4a11      	ldr	r2, [pc, #68]	; (8088b98 <HAL_TIMEx_ConfigCommutEvent_DMA+0xde>)
 8088b52:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 8088b54:	68fb      	ldr	r3, [r7, #12]
 8088b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088b58:	4a10      	ldr	r2, [pc, #64]	; (8088b9c <HAL_TIMEx_ConfigCommutEvent_DMA+0xe2>)
 8088b5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 8088b5c:	68fb      	ldr	r3, [r7, #12]
 8088b5e:	681b      	ldr	r3, [r3, #0]
 8088b60:	68da      	ldr	r2, [r3, #12]
 8088b62:	68fb      	ldr	r3, [r7, #12]
 8088b64:	681b      	ldr	r3, [r3, #0]
 8088b66:	f022 0220 	bic.w	r2, r2, #32
 8088b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 8088b6c:	68fb      	ldr	r3, [r7, #12]
 8088b6e:	681b      	ldr	r3, [r3, #0]
 8088b70:	68da      	ldr	r2, [r3, #12]
 8088b72:	68fb      	ldr	r3, [r7, #12]
 8088b74:	681b      	ldr	r3, [r3, #0]
 8088b76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8088b7a:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8088b7c:	68fb      	ldr	r3, [r7, #12]
 8088b7e:	2200      	movs	r2, #0
 8088b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8088b84:	2300      	movs	r3, #0
}
 8088b86:	4618      	mov	r0, r3
 8088b88:	3714      	adds	r7, #20
 8088b8a:	46bd      	mov	sp, r7
 8088b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088b90:	4770      	bx	lr
 8088b92:	bf00      	nop
 8088b94:	08088d65 	.word	0x08088d65
 8088b98:	08088d89 	.word	0x08088d89
 8088b9c:	08086db9 	.word	0x08086db9

08088ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8088ba0:	b480      	push	{r7}
 8088ba2:	b085      	sub	sp, #20
 8088ba4:	af00      	add	r7, sp, #0
 8088ba6:	6078      	str	r0, [r7, #4]
 8088ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8088baa:	687b      	ldr	r3, [r7, #4]
 8088bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8088bb0:	2b01      	cmp	r3, #1
 8088bb2:	d101      	bne.n	8088bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8088bb4:	2302      	movs	r3, #2
 8088bb6:	e032      	b.n	8088c1e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8088bb8:	687b      	ldr	r3, [r7, #4]
 8088bba:	2201      	movs	r2, #1
 8088bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8088bc0:	687b      	ldr	r3, [r7, #4]
 8088bc2:	2202      	movs	r2, #2
 8088bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8088bc8:	687b      	ldr	r3, [r7, #4]
 8088bca:	681b      	ldr	r3, [r3, #0]
 8088bcc:	685b      	ldr	r3, [r3, #4]
 8088bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8088bd0:	687b      	ldr	r3, [r7, #4]
 8088bd2:	681b      	ldr	r3, [r3, #0]
 8088bd4:	689b      	ldr	r3, [r3, #8]
 8088bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8088bd8:	68fb      	ldr	r3, [r7, #12]
 8088bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8088bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8088be0:	683b      	ldr	r3, [r7, #0]
 8088be2:	681b      	ldr	r3, [r3, #0]
 8088be4:	68fa      	ldr	r2, [r7, #12]
 8088be6:	4313      	orrs	r3, r2
 8088be8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8088bea:	68bb      	ldr	r3, [r7, #8]
 8088bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8088bf0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8088bf2:	683b      	ldr	r3, [r7, #0]
 8088bf4:	685b      	ldr	r3, [r3, #4]
 8088bf6:	68ba      	ldr	r2, [r7, #8]
 8088bf8:	4313      	orrs	r3, r2
 8088bfa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8088bfc:	687b      	ldr	r3, [r7, #4]
 8088bfe:	681b      	ldr	r3, [r3, #0]
 8088c00:	68fa      	ldr	r2, [r7, #12]
 8088c02:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8088c04:	687b      	ldr	r3, [r7, #4]
 8088c06:	681b      	ldr	r3, [r3, #0]
 8088c08:	68ba      	ldr	r2, [r7, #8]
 8088c0a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8088c0c:	687b      	ldr	r3, [r7, #4]
 8088c0e:	2201      	movs	r2, #1
 8088c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8088c14:	687b      	ldr	r3, [r7, #4]
 8088c16:	2200      	movs	r2, #0
 8088c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8088c1c:	2300      	movs	r3, #0
}
 8088c1e:	4618      	mov	r0, r3
 8088c20:	3714      	adds	r7, #20
 8088c22:	46bd      	mov	sp, r7
 8088c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088c28:	4770      	bx	lr

08088c2a <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8088c2a:	b480      	push	{r7}
 8088c2c:	b085      	sub	sp, #20
 8088c2e:	af00      	add	r7, sp, #0
 8088c30:	6078      	str	r0, [r7, #4]
 8088c32:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8088c34:	2300      	movs	r3, #0
 8088c36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8088c38:	687b      	ldr	r3, [r7, #4]
 8088c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8088c3e:	2b01      	cmp	r3, #1
 8088c40:	d101      	bne.n	8088c46 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8088c42:	2302      	movs	r3, #2
 8088c44:	e03d      	b.n	8088cc2 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8088c46:	687b      	ldr	r3, [r7, #4]
 8088c48:	2201      	movs	r2, #1
 8088c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8088c4e:	68fb      	ldr	r3, [r7, #12]
 8088c50:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8088c54:	683b      	ldr	r3, [r7, #0]
 8088c56:	68db      	ldr	r3, [r3, #12]
 8088c58:	4313      	orrs	r3, r2
 8088c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8088c5c:	68fb      	ldr	r3, [r7, #12]
 8088c5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8088c62:	683b      	ldr	r3, [r7, #0]
 8088c64:	689b      	ldr	r3, [r3, #8]
 8088c66:	4313      	orrs	r3, r2
 8088c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8088c6a:	68fb      	ldr	r3, [r7, #12]
 8088c6c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8088c70:	683b      	ldr	r3, [r7, #0]
 8088c72:	685b      	ldr	r3, [r3, #4]
 8088c74:	4313      	orrs	r3, r2
 8088c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8088c78:	68fb      	ldr	r3, [r7, #12]
 8088c7a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8088c7e:	683b      	ldr	r3, [r7, #0]
 8088c80:	681b      	ldr	r3, [r3, #0]
 8088c82:	4313      	orrs	r3, r2
 8088c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8088c86:	68fb      	ldr	r3, [r7, #12]
 8088c88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8088c8c:	683b      	ldr	r3, [r7, #0]
 8088c8e:	691b      	ldr	r3, [r3, #16]
 8088c90:	4313      	orrs	r3, r2
 8088c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8088c94:	68fb      	ldr	r3, [r7, #12]
 8088c96:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8088c9a:	683b      	ldr	r3, [r7, #0]
 8088c9c:	695b      	ldr	r3, [r3, #20]
 8088c9e:	4313      	orrs	r3, r2
 8088ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8088ca2:	68fb      	ldr	r3, [r7, #12]
 8088ca4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8088ca8:	683b      	ldr	r3, [r7, #0]
 8088caa:	69db      	ldr	r3, [r3, #28]
 8088cac:	4313      	orrs	r3, r2
 8088cae:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8088cb0:	687b      	ldr	r3, [r7, #4]
 8088cb2:	681b      	ldr	r3, [r3, #0]
 8088cb4:	68fa      	ldr	r2, [r7, #12]
 8088cb6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8088cb8:	687b      	ldr	r3, [r7, #4]
 8088cba:	2200      	movs	r2, #0
 8088cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8088cc0:	2300      	movs	r3, #0
}
 8088cc2:	4618      	mov	r0, r3
 8088cc4:	3714      	adds	r7, #20
 8088cc6:	46bd      	mov	sp, r7
 8088cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088ccc:	4770      	bx	lr

08088cce <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8088cce:	b480      	push	{r7}
 8088cd0:	b083      	sub	sp, #12
 8088cd2:	af00      	add	r7, sp, #0
 8088cd4:	6078      	str	r0, [r7, #4]
 8088cd6:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8088cd8:	687b      	ldr	r3, [r7, #4]
 8088cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8088cde:	2b01      	cmp	r3, #1
 8088ce0:	d101      	bne.n	8088ce6 <HAL_TIMEx_RemapConfig+0x18>
 8088ce2:	2302      	movs	r3, #2
 8088ce4:	e00c      	b.n	8088d00 <HAL_TIMEx_RemapConfig+0x32>
 8088ce6:	687b      	ldr	r3, [r7, #4]
 8088ce8:	2201      	movs	r2, #1
 8088cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Set the Timer remapping configuration */
    WRITE_REG(htim->Instance->OR, Remap);
  }
#else
  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8088cee:	687b      	ldr	r3, [r7, #4]
 8088cf0:	681b      	ldr	r3, [r3, #0]
 8088cf2:	683a      	ldr	r2, [r7, #0]
 8088cf4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* LPTIM_OR_TIM1_ITR2_RMP &&  LPTIM_OR_TIM5_ITR1_RMP && LPTIM_OR_TIM5_ITR1_RMP */

  __HAL_UNLOCK(htim);
 8088cf6:	687b      	ldr	r3, [r7, #4]
 8088cf8:	2200      	movs	r2, #0
 8088cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8088cfe:	2300      	movs	r3, #0
}
 8088d00:	4618      	mov	r0, r3
 8088d02:	370c      	adds	r7, #12
 8088d04:	46bd      	mov	sp, r7
 8088d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088d0a:	4770      	bx	lr

08088d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8088d0c:	b480      	push	{r7}
 8088d0e:	b083      	sub	sp, #12
 8088d10:	af00      	add	r7, sp, #0
 8088d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8088d14:	bf00      	nop
 8088d16:	370c      	adds	r7, #12
 8088d18:	46bd      	mov	sp, r7
 8088d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088d1e:	4770      	bx	lr

08088d20 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8088d20:	b480      	push	{r7}
 8088d22:	b083      	sub	sp, #12
 8088d24:	af00      	add	r7, sp, #0
 8088d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8088d28:	bf00      	nop
 8088d2a:	370c      	adds	r7, #12
 8088d2c:	46bd      	mov	sp, r7
 8088d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088d32:	4770      	bx	lr

08088d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8088d34:	b480      	push	{r7}
 8088d36:	b083      	sub	sp, #12
 8088d38:	af00      	add	r7, sp, #0
 8088d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8088d3c:	bf00      	nop
 8088d3e:	370c      	adds	r7, #12
 8088d40:	46bd      	mov	sp, r7
 8088d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088d46:	4770      	bx	lr

08088d48 <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface handle state.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
{
 8088d48:	b480      	push	{r7}
 8088d4a:	b083      	sub	sp, #12
 8088d4c:	af00      	add	r7, sp, #0
 8088d4e:	6078      	str	r0, [r7, #4]
  return htim->State;
 8088d50:	687b      	ldr	r3, [r7, #4]
 8088d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8088d56:	b2db      	uxtb	r3, r3
}
 8088d58:	4618      	mov	r0, r3
 8088d5a:	370c      	adds	r7, #12
 8088d5c:	46bd      	mov	sp, r7
 8088d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088d62:	4770      	bx	lr

08088d64 <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 8088d64:	b580      	push	{r7, lr}
 8088d66:	b084      	sub	sp, #16
 8088d68:	af00      	add	r7, sp, #0
 8088d6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8088d6c:	687b      	ldr	r3, [r7, #4]
 8088d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8088d70:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8088d72:	68fb      	ldr	r3, [r7, #12]
 8088d74:	2201      	movs	r2, #1
 8088d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationCallback(htim);
#else
  HAL_TIMEx_CommutCallback(htim);
 8088d7a:	68f8      	ldr	r0, [r7, #12]
 8088d7c:	f7ff ffc6 	bl	8088d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8088d80:	bf00      	nop
 8088d82:	3710      	adds	r7, #16
 8088d84:	46bd      	mov	sp, r7
 8088d86:	bd80      	pop	{r7, pc}

08088d88 <TIMEx_DMACommutationHalfCplt>:
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
{
 8088d88:	b580      	push	{r7, lr}
 8088d8a:	b084      	sub	sp, #16
 8088d8c:	af00      	add	r7, sp, #0
 8088d8e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8088d90:	687b      	ldr	r3, [r7, #4]
 8088d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8088d94:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8088d96:	68fb      	ldr	r3, [r7, #12]
 8088d98:	2201      	movs	r2, #1
 8088d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationHalfCpltCallback(htim);
#else
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 8088d9e:	68f8      	ldr	r0, [r7, #12]
 8088da0:	f7ff ffbe 	bl	8088d20 <HAL_TIMEx_CommutHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8088da4:	bf00      	nop
 8088da6:	3710      	adds	r7, #16
 8088da8:	46bd      	mov	sp, r7
 8088daa:	bd80      	pop	{r7, pc}

08088dac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8088dac:	b480      	push	{r7}
 8088dae:	b087      	sub	sp, #28
 8088db0:	af00      	add	r7, sp, #0
 8088db2:	60f8      	str	r0, [r7, #12]
 8088db4:	60b9      	str	r1, [r7, #8]
 8088db6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8088db8:	68bb      	ldr	r3, [r7, #8]
 8088dba:	f003 031f 	and.w	r3, r3, #31
 8088dbe:	2204      	movs	r2, #4
 8088dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8088dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8088dc6:	68fb      	ldr	r3, [r7, #12]
 8088dc8:	6a1a      	ldr	r2, [r3, #32]
 8088dca:	697b      	ldr	r3, [r7, #20]
 8088dcc:	43db      	mvns	r3, r3
 8088dce:	401a      	ands	r2, r3
 8088dd0:	68fb      	ldr	r3, [r7, #12]
 8088dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8088dd4:	68fb      	ldr	r3, [r7, #12]
 8088dd6:	6a1a      	ldr	r2, [r3, #32]
 8088dd8:	68bb      	ldr	r3, [r7, #8]
 8088dda:	f003 031f 	and.w	r3, r3, #31
 8088dde:	6879      	ldr	r1, [r7, #4]
 8088de0:	fa01 f303 	lsl.w	r3, r1, r3
 8088de4:	431a      	orrs	r2, r3
 8088de6:	68fb      	ldr	r3, [r7, #12]
 8088de8:	621a      	str	r2, [r3, #32]
}
 8088dea:	bf00      	nop
 8088dec:	371c      	adds	r7, #28
 8088dee:	46bd      	mov	sp, r7
 8088df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088df4:	4770      	bx	lr
 8088df6:	bf00      	nop

08088df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8088df8:	b580      	push	{r7, lr}
 8088dfa:	b082      	sub	sp, #8
 8088dfc:	af00      	add	r7, sp, #0
 8088dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8088e00:	687b      	ldr	r3, [r7, #4]
 8088e02:	2b00      	cmp	r3, #0
 8088e04:	d101      	bne.n	8088e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8088e06:	2301      	movs	r3, #1
 8088e08:	e03f      	b.n	8088e8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8088e0a:	687b      	ldr	r3, [r7, #4]
 8088e0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8088e10:	b2db      	uxtb	r3, r3
 8088e12:	2b00      	cmp	r3, #0
 8088e14:	d106      	bne.n	8088e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8088e16:	687b      	ldr	r3, [r7, #4]
 8088e18:	2200      	movs	r2, #0
 8088e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8088e1e:	6878      	ldr	r0, [r7, #4]
 8088e20:	f7f7 ff08 	bl	8080c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8088e24:	687b      	ldr	r3, [r7, #4]
 8088e26:	2224      	movs	r2, #36	; 0x24
 8088e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8088e2c:	687b      	ldr	r3, [r7, #4]
 8088e2e:	681b      	ldr	r3, [r3, #0]
 8088e30:	68da      	ldr	r2, [r3, #12]
 8088e32:	687b      	ldr	r3, [r7, #4]
 8088e34:	681b      	ldr	r3, [r3, #0]
 8088e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8088e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8088e3c:	6878      	ldr	r0, [r7, #4]
 8088e3e:	f001 fceb 	bl	808a818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8088e42:	687b      	ldr	r3, [r7, #4]
 8088e44:	681b      	ldr	r3, [r3, #0]
 8088e46:	691a      	ldr	r2, [r3, #16]
 8088e48:	687b      	ldr	r3, [r7, #4]
 8088e4a:	681b      	ldr	r3, [r3, #0]
 8088e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8088e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8088e52:	687b      	ldr	r3, [r7, #4]
 8088e54:	681b      	ldr	r3, [r3, #0]
 8088e56:	695a      	ldr	r2, [r3, #20]
 8088e58:	687b      	ldr	r3, [r7, #4]
 8088e5a:	681b      	ldr	r3, [r3, #0]
 8088e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8088e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8088e62:	687b      	ldr	r3, [r7, #4]
 8088e64:	681b      	ldr	r3, [r3, #0]
 8088e66:	68da      	ldr	r2, [r3, #12]
 8088e68:	687b      	ldr	r3, [r7, #4]
 8088e6a:	681b      	ldr	r3, [r3, #0]
 8088e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8088e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8088e72:	687b      	ldr	r3, [r7, #4]
 8088e74:	2200      	movs	r2, #0
 8088e76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8088e78:	687b      	ldr	r3, [r7, #4]
 8088e7a:	2220      	movs	r2, #32
 8088e7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8088e80:	687b      	ldr	r3, [r7, #4]
 8088e82:	2220      	movs	r2, #32
 8088e84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8088e88:	2300      	movs	r3, #0
}
 8088e8a:	4618      	mov	r0, r3
 8088e8c:	3708      	adds	r7, #8
 8088e8e:	46bd      	mov	sp, r7
 8088e90:	bd80      	pop	{r7, pc}

08088e92 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8088e92:	b580      	push	{r7, lr}
 8088e94:	b082      	sub	sp, #8
 8088e96:	af00      	add	r7, sp, #0
 8088e98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8088e9a:	687b      	ldr	r3, [r7, #4]
 8088e9c:	2b00      	cmp	r3, #0
 8088e9e:	d101      	bne.n	8088ea4 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8088ea0:	2301      	movs	r3, #1
 8088ea2:	e047      	b.n	8088f34 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8088ea4:	687b      	ldr	r3, [r7, #4]
 8088ea6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8088eaa:	b2db      	uxtb	r3, r3
 8088eac:	2b00      	cmp	r3, #0
 8088eae:	d106      	bne.n	8088ebe <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8088eb0:	687b      	ldr	r3, [r7, #4]
 8088eb2:	2200      	movs	r2, #0
 8088eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8088eb8:	6878      	ldr	r0, [r7, #4]
 8088eba:	f7f7 febb 	bl	8080c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8088ebe:	687b      	ldr	r3, [r7, #4]
 8088ec0:	2224      	movs	r2, #36	; 0x24
 8088ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8088ec6:	687b      	ldr	r3, [r7, #4]
 8088ec8:	681b      	ldr	r3, [r3, #0]
 8088eca:	68da      	ldr	r2, [r3, #12]
 8088ecc:	687b      	ldr	r3, [r7, #4]
 8088ece:	681b      	ldr	r3, [r3, #0]
 8088ed0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8088ed4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8088ed6:	6878      	ldr	r0, [r7, #4]
 8088ed8:	f001 fc9e 	bl	808a818 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8088edc:	687b      	ldr	r3, [r7, #4]
 8088ede:	681b      	ldr	r3, [r3, #0]
 8088ee0:	691a      	ldr	r2, [r3, #16]
 8088ee2:	687b      	ldr	r3, [r7, #4]
 8088ee4:	681b      	ldr	r3, [r3, #0]
 8088ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8088eea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8088eec:	687b      	ldr	r3, [r7, #4]
 8088eee:	681b      	ldr	r3, [r3, #0]
 8088ef0:	695a      	ldr	r2, [r3, #20]
 8088ef2:	687b      	ldr	r3, [r7, #4]
 8088ef4:	681b      	ldr	r3, [r3, #0]
 8088ef6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8088efa:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8088efc:	687b      	ldr	r3, [r7, #4]
 8088efe:	681b      	ldr	r3, [r3, #0]
 8088f00:	695a      	ldr	r2, [r3, #20]
 8088f02:	687b      	ldr	r3, [r7, #4]
 8088f04:	681b      	ldr	r3, [r3, #0]
 8088f06:	f042 0208 	orr.w	r2, r2, #8
 8088f0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8088f0c:	687b      	ldr	r3, [r7, #4]
 8088f0e:	681b      	ldr	r3, [r3, #0]
 8088f10:	68da      	ldr	r2, [r3, #12]
 8088f12:	687b      	ldr	r3, [r7, #4]
 8088f14:	681b      	ldr	r3, [r3, #0]
 8088f16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8088f1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8088f1c:	687b      	ldr	r3, [r7, #4]
 8088f1e:	2200      	movs	r2, #0
 8088f20:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8088f22:	687b      	ldr	r3, [r7, #4]
 8088f24:	2220      	movs	r2, #32
 8088f26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8088f2a:	687b      	ldr	r3, [r7, #4]
 8088f2c:	2220      	movs	r2, #32
 8088f2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8088f32:	2300      	movs	r3, #0
}
 8088f34:	4618      	mov	r0, r3
 8088f36:	3708      	adds	r7, #8
 8088f38:	46bd      	mov	sp, r7
 8088f3a:	bd80      	pop	{r7, pc}

08088f3c <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8088f3c:	b580      	push	{r7, lr}
 8088f3e:	b082      	sub	sp, #8
 8088f40:	af00      	add	r7, sp, #0
 8088f42:	6078      	str	r0, [r7, #4]
 8088f44:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8088f46:	687b      	ldr	r3, [r7, #4]
 8088f48:	2b00      	cmp	r3, #0
 8088f4a:	d101      	bne.n	8088f50 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8088f4c:	2301      	movs	r3, #1
 8088f4e:	e057      	b.n	8089000 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8088f50:	687b      	ldr	r3, [r7, #4]
 8088f52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8088f56:	b2db      	uxtb	r3, r3
 8088f58:	2b00      	cmp	r3, #0
 8088f5a:	d106      	bne.n	8088f6a <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8088f5c:	687b      	ldr	r3, [r7, #4]
 8088f5e:	2200      	movs	r2, #0
 8088f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8088f64:	6878      	ldr	r0, [r7, #4]
 8088f66:	f7f7 fe65 	bl	8080c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8088f6a:	687b      	ldr	r3, [r7, #4]
 8088f6c:	2224      	movs	r2, #36	; 0x24
 8088f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8088f72:	687b      	ldr	r3, [r7, #4]
 8088f74:	681b      	ldr	r3, [r3, #0]
 8088f76:	68da      	ldr	r2, [r3, #12]
 8088f78:	687b      	ldr	r3, [r7, #4]
 8088f7a:	681b      	ldr	r3, [r3, #0]
 8088f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8088f80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8088f82:	6878      	ldr	r0, [r7, #4]
 8088f84:	f001 fc48 	bl	808a818 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8088f88:	687b      	ldr	r3, [r7, #4]
 8088f8a:	681b      	ldr	r3, [r3, #0]
 8088f8c:	691a      	ldr	r2, [r3, #16]
 8088f8e:	687b      	ldr	r3, [r7, #4]
 8088f90:	681b      	ldr	r3, [r3, #0]
 8088f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8088f96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8088f98:	687b      	ldr	r3, [r7, #4]
 8088f9a:	681b      	ldr	r3, [r3, #0]
 8088f9c:	695a      	ldr	r2, [r3, #20]
 8088f9e:	687b      	ldr	r3, [r7, #4]
 8088fa0:	681b      	ldr	r3, [r3, #0]
 8088fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8088fa6:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8088fa8:	687b      	ldr	r3, [r7, #4]
 8088faa:	681b      	ldr	r3, [r3, #0]
 8088fac:	691a      	ldr	r2, [r3, #16]
 8088fae:	687b      	ldr	r3, [r7, #4]
 8088fb0:	681b      	ldr	r3, [r3, #0]
 8088fb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8088fb6:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8088fb8:	687b      	ldr	r3, [r7, #4]
 8088fba:	681b      	ldr	r3, [r3, #0]
 8088fbc:	691a      	ldr	r2, [r3, #16]
 8088fbe:	687b      	ldr	r3, [r7, #4]
 8088fc0:	681b      	ldr	r3, [r3, #0]
 8088fc2:	f022 0220 	bic.w	r2, r2, #32
 8088fc6:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8088fc8:	687b      	ldr	r3, [r7, #4]
 8088fca:	681b      	ldr	r3, [r3, #0]
 8088fcc:	6919      	ldr	r1, [r3, #16]
 8088fce:	687b      	ldr	r3, [r7, #4]
 8088fd0:	681b      	ldr	r3, [r3, #0]
 8088fd2:	683a      	ldr	r2, [r7, #0]
 8088fd4:	430a      	orrs	r2, r1
 8088fd6:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8088fd8:	687b      	ldr	r3, [r7, #4]
 8088fda:	681b      	ldr	r3, [r3, #0]
 8088fdc:	68da      	ldr	r2, [r3, #12]
 8088fde:	687b      	ldr	r3, [r7, #4]
 8088fe0:	681b      	ldr	r3, [r3, #0]
 8088fe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8088fe6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8088fe8:	687b      	ldr	r3, [r7, #4]
 8088fea:	2200      	movs	r2, #0
 8088fec:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8088fee:	687b      	ldr	r3, [r7, #4]
 8088ff0:	2220      	movs	r2, #32
 8088ff2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8088ff6:	687b      	ldr	r3, [r7, #4]
 8088ff8:	2220      	movs	r2, #32
 8088ffa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8088ffe:	2300      	movs	r3, #0
}
 8089000:	4618      	mov	r0, r3
 8089002:	3708      	adds	r7, #8
 8089004:	46bd      	mov	sp, r7
 8089006:	bd80      	pop	{r7, pc}

08089008 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8089008:	b580      	push	{r7, lr}
 808900a:	b084      	sub	sp, #16
 808900c:	af00      	add	r7, sp, #0
 808900e:	60f8      	str	r0, [r7, #12]
 8089010:	460b      	mov	r3, r1
 8089012:	607a      	str	r2, [r7, #4]
 8089014:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8089016:	68fb      	ldr	r3, [r7, #12]
 8089018:	2b00      	cmp	r3, #0
 808901a:	d101      	bne.n	8089020 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 808901c:	2301      	movs	r3, #1
 808901e:	e05f      	b.n	80890e0 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8089020:	68fb      	ldr	r3, [r7, #12]
 8089022:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8089026:	b2db      	uxtb	r3, r3
 8089028:	2b00      	cmp	r3, #0
 808902a:	d106      	bne.n	808903a <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 808902c:	68fb      	ldr	r3, [r7, #12]
 808902e:	2200      	movs	r2, #0
 8089030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8089034:	68f8      	ldr	r0, [r7, #12]
 8089036:	f7f7 fdfd 	bl	8080c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 808903a:	68fb      	ldr	r3, [r7, #12]
 808903c:	2224      	movs	r2, #36	; 0x24
 808903e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8089042:	68fb      	ldr	r3, [r7, #12]
 8089044:	681b      	ldr	r3, [r3, #0]
 8089046:	68da      	ldr	r2, [r3, #12]
 8089048:	68fb      	ldr	r3, [r7, #12]
 808904a:	681b      	ldr	r3, [r3, #0]
 808904c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8089050:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8089052:	68f8      	ldr	r0, [r7, #12]
 8089054:	f001 fbe0 	bl	808a818 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8089058:	68fb      	ldr	r3, [r7, #12]
 808905a:	681b      	ldr	r3, [r3, #0]
 808905c:	691a      	ldr	r2, [r3, #16]
 808905e:	68fb      	ldr	r3, [r7, #12]
 8089060:	681b      	ldr	r3, [r3, #0]
 8089062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8089066:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8089068:	68fb      	ldr	r3, [r7, #12]
 808906a:	681b      	ldr	r3, [r3, #0]
 808906c:	695a      	ldr	r2, [r3, #20]
 808906e:	68fb      	ldr	r3, [r7, #12]
 8089070:	681b      	ldr	r3, [r3, #0]
 8089072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8089076:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8089078:	68fb      	ldr	r3, [r7, #12]
 808907a:	681b      	ldr	r3, [r3, #0]
 808907c:	691a      	ldr	r2, [r3, #16]
 808907e:	68fb      	ldr	r3, [r7, #12]
 8089080:	681b      	ldr	r3, [r3, #0]
 8089082:	f022 020f 	bic.w	r2, r2, #15
 8089086:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8089088:	68fb      	ldr	r3, [r7, #12]
 808908a:	681b      	ldr	r3, [r3, #0]
 808908c:	6919      	ldr	r1, [r3, #16]
 808908e:	7afa      	ldrb	r2, [r7, #11]
 8089090:	68fb      	ldr	r3, [r7, #12]
 8089092:	681b      	ldr	r3, [r3, #0]
 8089094:	430a      	orrs	r2, r1
 8089096:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8089098:	68fb      	ldr	r3, [r7, #12]
 808909a:	681b      	ldr	r3, [r3, #0]
 808909c:	68da      	ldr	r2, [r3, #12]
 808909e:	68fb      	ldr	r3, [r7, #12]
 80890a0:	681b      	ldr	r3, [r3, #0]
 80890a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80890a6:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 80890a8:	68fb      	ldr	r3, [r7, #12]
 80890aa:	681b      	ldr	r3, [r3, #0]
 80890ac:	68d9      	ldr	r1, [r3, #12]
 80890ae:	68fb      	ldr	r3, [r7, #12]
 80890b0:	681b      	ldr	r3, [r3, #0]
 80890b2:	687a      	ldr	r2, [r7, #4]
 80890b4:	430a      	orrs	r2, r1
 80890b6:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80890b8:	68fb      	ldr	r3, [r7, #12]
 80890ba:	681b      	ldr	r3, [r3, #0]
 80890bc:	68da      	ldr	r2, [r3, #12]
 80890be:	68fb      	ldr	r3, [r7, #12]
 80890c0:	681b      	ldr	r3, [r3, #0]
 80890c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80890c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80890c8:	68fb      	ldr	r3, [r7, #12]
 80890ca:	2200      	movs	r2, #0
 80890cc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80890ce:	68fb      	ldr	r3, [r7, #12]
 80890d0:	2220      	movs	r2, #32
 80890d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80890d6:	68fb      	ldr	r3, [r7, #12]
 80890d8:	2220      	movs	r2, #32
 80890da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80890de:	2300      	movs	r3, #0
}
 80890e0:	4618      	mov	r0, r3
 80890e2:	3710      	adds	r7, #16
 80890e4:	46bd      	mov	sp, r7
 80890e6:	bd80      	pop	{r7, pc}

080890e8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80890e8:	b580      	push	{r7, lr}
 80890ea:	b082      	sub	sp, #8
 80890ec:	af00      	add	r7, sp, #0
 80890ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80890f0:	687b      	ldr	r3, [r7, #4]
 80890f2:	2b00      	cmp	r3, #0
 80890f4:	d101      	bne.n	80890fa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80890f6:	2301      	movs	r3, #1
 80890f8:	e01e      	b.n	8089138 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80890fa:	687b      	ldr	r3, [r7, #4]
 80890fc:	2224      	movs	r2, #36	; 0x24
 80890fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8089102:	687b      	ldr	r3, [r7, #4]
 8089104:	681b      	ldr	r3, [r3, #0]
 8089106:	68da      	ldr	r2, [r3, #12]
 8089108:	687b      	ldr	r3, [r7, #4]
 808910a:	681b      	ldr	r3, [r3, #0]
 808910c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8089110:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8089112:	6878      	ldr	r0, [r7, #4]
 8089114:	f7f7 fdfe 	bl	8080d14 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8089118:	687b      	ldr	r3, [r7, #4]
 808911a:	2200      	movs	r2, #0
 808911c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 808911e:	687b      	ldr	r3, [r7, #4]
 8089120:	2200      	movs	r2, #0
 8089122:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8089126:	687b      	ldr	r3, [r7, #4]
 8089128:	2200      	movs	r2, #0
 808912a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 808912e:	687b      	ldr	r3, [r7, #4]
 8089130:	2200      	movs	r2, #0
 8089132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8089136:	2300      	movs	r3, #0
}
 8089138:	4618      	mov	r0, r3
 808913a:	3708      	adds	r7, #8
 808913c:	46bd      	mov	sp, r7
 808913e:	bd80      	pop	{r7, pc}
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8089140:	b480      	push	{r7}
 8089142:	b083      	sub	sp, #12
 8089144:	af00      	add	r7, sp, #0
 8089146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8089148:	bf00      	nop
 808914a:	370c      	adds	r7, #12
 808914c:	46bd      	mov	sp, r7
 808914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089152:	4770      	bx	lr
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8089154:	b480      	push	{r7}
 8089156:	b083      	sub	sp, #12
 8089158:	af00      	add	r7, sp, #0
 808915a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 808915c:	bf00      	nop
 808915e:	370c      	adds	r7, #12
 8089160:	46bd      	mov	sp, r7
 8089162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089166:	4770      	bx	lr

08089168 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8089168:	b580      	push	{r7, lr}
 808916a:	b088      	sub	sp, #32
 808916c:	af02      	add	r7, sp, #8
 808916e:	60f8      	str	r0, [r7, #12]
 8089170:	60b9      	str	r1, [r7, #8]
 8089172:	603b      	str	r3, [r7, #0]
 8089174:	4613      	mov	r3, r2
 8089176:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8089178:	2300      	movs	r3, #0
 808917a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 808917c:	68fb      	ldr	r3, [r7, #12]
 808917e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8089182:	b2db      	uxtb	r3, r3
 8089184:	2b20      	cmp	r3, #32
 8089186:	f040 8083 	bne.w	8089290 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 808918a:	68bb      	ldr	r3, [r7, #8]
 808918c:	2b00      	cmp	r3, #0
 808918e:	d002      	beq.n	8089196 <HAL_UART_Transmit+0x2e>
 8089190:	88fb      	ldrh	r3, [r7, #6]
 8089192:	2b00      	cmp	r3, #0
 8089194:	d101      	bne.n	808919a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8089196:	2301      	movs	r3, #1
 8089198:	e07b      	b.n	8089292 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 808919a:	68fb      	ldr	r3, [r7, #12]
 808919c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80891a0:	2b01      	cmp	r3, #1
 80891a2:	d101      	bne.n	80891a8 <HAL_UART_Transmit+0x40>
 80891a4:	2302      	movs	r3, #2
 80891a6:	e074      	b.n	8089292 <HAL_UART_Transmit+0x12a>
 80891a8:	68fb      	ldr	r3, [r7, #12]
 80891aa:	2201      	movs	r2, #1
 80891ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80891b0:	68fb      	ldr	r3, [r7, #12]
 80891b2:	2200      	movs	r2, #0
 80891b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80891b6:	68fb      	ldr	r3, [r7, #12]
 80891b8:	2221      	movs	r2, #33	; 0x21
 80891ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80891be:	f7f7 fe71 	bl	8080ea4 <HAL_GetTick>
 80891c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80891c4:	68fb      	ldr	r3, [r7, #12]
 80891c6:	88fa      	ldrh	r2, [r7, #6]
 80891c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80891ca:	68fb      	ldr	r3, [r7, #12]
 80891cc:	88fa      	ldrh	r2, [r7, #6]
 80891ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80891d0:	e042      	b.n	8089258 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80891d2:	68fb      	ldr	r3, [r7, #12]
 80891d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80891d6:	b29b      	uxth	r3, r3
 80891d8:	3b01      	subs	r3, #1
 80891da:	b29a      	uxth	r2, r3
 80891dc:	68fb      	ldr	r3, [r7, #12]
 80891de:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80891e0:	68fb      	ldr	r3, [r7, #12]
 80891e2:	689b      	ldr	r3, [r3, #8]
 80891e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80891e8:	d122      	bne.n	8089230 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80891ea:	683b      	ldr	r3, [r7, #0]
 80891ec:	9300      	str	r3, [sp, #0]
 80891ee:	697b      	ldr	r3, [r7, #20]
 80891f0:	2200      	movs	r2, #0
 80891f2:	2180      	movs	r1, #128	; 0x80
 80891f4:	68f8      	ldr	r0, [r7, #12]
 80891f6:	f001 f90a 	bl	808a40e <UART_WaitOnFlagUntilTimeout>
 80891fa:	4603      	mov	r3, r0
 80891fc:	2b00      	cmp	r3, #0
 80891fe:	d001      	beq.n	8089204 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8089200:	2303      	movs	r3, #3
 8089202:	e046      	b.n	8089292 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8089204:	68bb      	ldr	r3, [r7, #8]
 8089206:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8089208:	693b      	ldr	r3, [r7, #16]
 808920a:	881b      	ldrh	r3, [r3, #0]
 808920c:	461a      	mov	r2, r3
 808920e:	68fb      	ldr	r3, [r7, #12]
 8089210:	681b      	ldr	r3, [r3, #0]
 8089212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8089216:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8089218:	68fb      	ldr	r3, [r7, #12]
 808921a:	691b      	ldr	r3, [r3, #16]
 808921c:	2b00      	cmp	r3, #0
 808921e:	d103      	bne.n	8089228 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8089220:	68bb      	ldr	r3, [r7, #8]
 8089222:	3302      	adds	r3, #2
 8089224:	60bb      	str	r3, [r7, #8]
 8089226:	e017      	b.n	8089258 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8089228:	68bb      	ldr	r3, [r7, #8]
 808922a:	3301      	adds	r3, #1
 808922c:	60bb      	str	r3, [r7, #8]
 808922e:	e013      	b.n	8089258 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8089230:	683b      	ldr	r3, [r7, #0]
 8089232:	9300      	str	r3, [sp, #0]
 8089234:	697b      	ldr	r3, [r7, #20]
 8089236:	2200      	movs	r2, #0
 8089238:	2180      	movs	r1, #128	; 0x80
 808923a:	68f8      	ldr	r0, [r7, #12]
 808923c:	f001 f8e7 	bl	808a40e <UART_WaitOnFlagUntilTimeout>
 8089240:	4603      	mov	r3, r0
 8089242:	2b00      	cmp	r3, #0
 8089244:	d001      	beq.n	808924a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8089246:	2303      	movs	r3, #3
 8089248:	e023      	b.n	8089292 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 808924a:	68bb      	ldr	r3, [r7, #8]
 808924c:	1c5a      	adds	r2, r3, #1
 808924e:	60ba      	str	r2, [r7, #8]
 8089250:	781a      	ldrb	r2, [r3, #0]
 8089252:	68fb      	ldr	r3, [r7, #12]
 8089254:	681b      	ldr	r3, [r3, #0]
 8089256:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8089258:	68fb      	ldr	r3, [r7, #12]
 808925a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 808925c:	b29b      	uxth	r3, r3
 808925e:	2b00      	cmp	r3, #0
 8089260:	d1b7      	bne.n	80891d2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8089262:	683b      	ldr	r3, [r7, #0]
 8089264:	9300      	str	r3, [sp, #0]
 8089266:	697b      	ldr	r3, [r7, #20]
 8089268:	2200      	movs	r2, #0
 808926a:	2140      	movs	r1, #64	; 0x40
 808926c:	68f8      	ldr	r0, [r7, #12]
 808926e:	f001 f8ce 	bl	808a40e <UART_WaitOnFlagUntilTimeout>
 8089272:	4603      	mov	r3, r0
 8089274:	2b00      	cmp	r3, #0
 8089276:	d001      	beq.n	808927c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8089278:	2303      	movs	r3, #3
 808927a:	e00a      	b.n	8089292 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 808927c:	68fb      	ldr	r3, [r7, #12]
 808927e:	2220      	movs	r2, #32
 8089280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8089284:	68fb      	ldr	r3, [r7, #12]
 8089286:	2200      	movs	r2, #0
 8089288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 808928c:	2300      	movs	r3, #0
 808928e:	e000      	b.n	8089292 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8089290:	2302      	movs	r3, #2
  }
}
 8089292:	4618      	mov	r0, r3
 8089294:	3718      	adds	r7, #24
 8089296:	46bd      	mov	sp, r7
 8089298:	bd80      	pop	{r7, pc}

0808929a <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 808929a:	b580      	push	{r7, lr}
 808929c:	b088      	sub	sp, #32
 808929e:	af02      	add	r7, sp, #8
 80892a0:	60f8      	str	r0, [r7, #12]
 80892a2:	60b9      	str	r1, [r7, #8]
 80892a4:	603b      	str	r3, [r7, #0]
 80892a6:	4613      	mov	r3, r2
 80892a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80892aa:	2300      	movs	r3, #0
 80892ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80892ae:	68fb      	ldr	r3, [r7, #12]
 80892b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80892b4:	b2db      	uxtb	r3, r3
 80892b6:	2b20      	cmp	r3, #32
 80892b8:	f040 8090 	bne.w	80893dc <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80892bc:	68bb      	ldr	r3, [r7, #8]
 80892be:	2b00      	cmp	r3, #0
 80892c0:	d002      	beq.n	80892c8 <HAL_UART_Receive+0x2e>
 80892c2:	88fb      	ldrh	r3, [r7, #6]
 80892c4:	2b00      	cmp	r3, #0
 80892c6:	d101      	bne.n	80892cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80892c8:	2301      	movs	r3, #1
 80892ca:	e088      	b.n	80893de <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80892cc:	68fb      	ldr	r3, [r7, #12]
 80892ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80892d2:	2b01      	cmp	r3, #1
 80892d4:	d101      	bne.n	80892da <HAL_UART_Receive+0x40>
 80892d6:	2302      	movs	r3, #2
 80892d8:	e081      	b.n	80893de <HAL_UART_Receive+0x144>
 80892da:	68fb      	ldr	r3, [r7, #12]
 80892dc:	2201      	movs	r2, #1
 80892de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80892e2:	68fb      	ldr	r3, [r7, #12]
 80892e4:	2200      	movs	r2, #0
 80892e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80892e8:	68fb      	ldr	r3, [r7, #12]
 80892ea:	2222      	movs	r2, #34	; 0x22
 80892ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80892f0:	f7f7 fdd8 	bl	8080ea4 <HAL_GetTick>
 80892f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80892f6:	68fb      	ldr	r3, [r7, #12]
 80892f8:	88fa      	ldrh	r2, [r7, #6]
 80892fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80892fc:	68fb      	ldr	r3, [r7, #12]
 80892fe:	88fa      	ldrh	r2, [r7, #6]
 8089300:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8089302:	e05c      	b.n	80893be <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8089304:	68fb      	ldr	r3, [r7, #12]
 8089306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8089308:	b29b      	uxth	r3, r3
 808930a:	3b01      	subs	r3, #1
 808930c:	b29a      	uxth	r2, r3
 808930e:	68fb      	ldr	r3, [r7, #12]
 8089310:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8089312:	68fb      	ldr	r3, [r7, #12]
 8089314:	689b      	ldr	r3, [r3, #8]
 8089316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 808931a:	d12b      	bne.n	8089374 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 808931c:	683b      	ldr	r3, [r7, #0]
 808931e:	9300      	str	r3, [sp, #0]
 8089320:	697b      	ldr	r3, [r7, #20]
 8089322:	2200      	movs	r2, #0
 8089324:	2120      	movs	r1, #32
 8089326:	68f8      	ldr	r0, [r7, #12]
 8089328:	f001 f871 	bl	808a40e <UART_WaitOnFlagUntilTimeout>
 808932c:	4603      	mov	r3, r0
 808932e:	2b00      	cmp	r3, #0
 8089330:	d001      	beq.n	8089336 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8089332:	2303      	movs	r3, #3
 8089334:	e053      	b.n	80893de <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8089336:	68bb      	ldr	r3, [r7, #8]
 8089338:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 808933a:	68fb      	ldr	r3, [r7, #12]
 808933c:	691b      	ldr	r3, [r3, #16]
 808933e:	2b00      	cmp	r3, #0
 8089340:	d10c      	bne.n	808935c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8089342:	68fb      	ldr	r3, [r7, #12]
 8089344:	681b      	ldr	r3, [r3, #0]
 8089346:	685b      	ldr	r3, [r3, #4]
 8089348:	b29b      	uxth	r3, r3
 808934a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808934e:	b29a      	uxth	r2, r3
 8089350:	693b      	ldr	r3, [r7, #16]
 8089352:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8089354:	68bb      	ldr	r3, [r7, #8]
 8089356:	3302      	adds	r3, #2
 8089358:	60bb      	str	r3, [r7, #8]
 808935a:	e030      	b.n	80893be <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 808935c:	68fb      	ldr	r3, [r7, #12]
 808935e:	681b      	ldr	r3, [r3, #0]
 8089360:	685b      	ldr	r3, [r3, #4]
 8089362:	b29b      	uxth	r3, r3
 8089364:	b2db      	uxtb	r3, r3
 8089366:	b29a      	uxth	r2, r3
 8089368:	693b      	ldr	r3, [r7, #16]
 808936a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 808936c:	68bb      	ldr	r3, [r7, #8]
 808936e:	3301      	adds	r3, #1
 8089370:	60bb      	str	r3, [r7, #8]
 8089372:	e024      	b.n	80893be <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8089374:	683b      	ldr	r3, [r7, #0]
 8089376:	9300      	str	r3, [sp, #0]
 8089378:	697b      	ldr	r3, [r7, #20]
 808937a:	2200      	movs	r2, #0
 808937c:	2120      	movs	r1, #32
 808937e:	68f8      	ldr	r0, [r7, #12]
 8089380:	f001 f845 	bl	808a40e <UART_WaitOnFlagUntilTimeout>
 8089384:	4603      	mov	r3, r0
 8089386:	2b00      	cmp	r3, #0
 8089388:	d001      	beq.n	808938e <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 808938a:	2303      	movs	r3, #3
 808938c:	e027      	b.n	80893de <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 808938e:	68fb      	ldr	r3, [r7, #12]
 8089390:	691b      	ldr	r3, [r3, #16]
 8089392:	2b00      	cmp	r3, #0
 8089394:	d108      	bne.n	80893a8 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8089396:	68fb      	ldr	r3, [r7, #12]
 8089398:	681b      	ldr	r3, [r3, #0]
 808939a:	6859      	ldr	r1, [r3, #4]
 808939c:	68bb      	ldr	r3, [r7, #8]
 808939e:	1c5a      	adds	r2, r3, #1
 80893a0:	60ba      	str	r2, [r7, #8]
 80893a2:	b2ca      	uxtb	r2, r1
 80893a4:	701a      	strb	r2, [r3, #0]
 80893a6:	e00a      	b.n	80893be <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80893a8:	68fb      	ldr	r3, [r7, #12]
 80893aa:	681b      	ldr	r3, [r3, #0]
 80893ac:	685b      	ldr	r3, [r3, #4]
 80893ae:	b2da      	uxtb	r2, r3
 80893b0:	68bb      	ldr	r3, [r7, #8]
 80893b2:	1c59      	adds	r1, r3, #1
 80893b4:	60b9      	str	r1, [r7, #8]
 80893b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80893ba:	b2d2      	uxtb	r2, r2
 80893bc:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80893be:	68fb      	ldr	r3, [r7, #12]
 80893c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80893c2:	b29b      	uxth	r3, r3
 80893c4:	2b00      	cmp	r3, #0
 80893c6:	d19d      	bne.n	8089304 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80893c8:	68fb      	ldr	r3, [r7, #12]
 80893ca:	2220      	movs	r2, #32
 80893cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80893d0:	68fb      	ldr	r3, [r7, #12]
 80893d2:	2200      	movs	r2, #0
 80893d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80893d8:	2300      	movs	r3, #0
 80893da:	e000      	b.n	80893de <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80893dc:	2302      	movs	r3, #2
  }
}
 80893de:	4618      	mov	r0, r3
 80893e0:	3718      	adds	r7, #24
 80893e2:	46bd      	mov	sp, r7
 80893e4:	bd80      	pop	{r7, pc}

080893e6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80893e6:	b480      	push	{r7}
 80893e8:	b085      	sub	sp, #20
 80893ea:	af00      	add	r7, sp, #0
 80893ec:	60f8      	str	r0, [r7, #12]
 80893ee:	60b9      	str	r1, [r7, #8]
 80893f0:	4613      	mov	r3, r2
 80893f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80893f4:	68fb      	ldr	r3, [r7, #12]
 80893f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80893fa:	b2db      	uxtb	r3, r3
 80893fc:	2b20      	cmp	r3, #32
 80893fe:	d130      	bne.n	8089462 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8089400:	68bb      	ldr	r3, [r7, #8]
 8089402:	2b00      	cmp	r3, #0
 8089404:	d002      	beq.n	808940c <HAL_UART_Transmit_IT+0x26>
 8089406:	88fb      	ldrh	r3, [r7, #6]
 8089408:	2b00      	cmp	r3, #0
 808940a:	d101      	bne.n	8089410 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 808940c:	2301      	movs	r3, #1
 808940e:	e029      	b.n	8089464 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8089410:	68fb      	ldr	r3, [r7, #12]
 8089412:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8089416:	2b01      	cmp	r3, #1
 8089418:	d101      	bne.n	808941e <HAL_UART_Transmit_IT+0x38>
 808941a:	2302      	movs	r3, #2
 808941c:	e022      	b.n	8089464 <HAL_UART_Transmit_IT+0x7e>
 808941e:	68fb      	ldr	r3, [r7, #12]
 8089420:	2201      	movs	r2, #1
 8089422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8089426:	68fb      	ldr	r3, [r7, #12]
 8089428:	68ba      	ldr	r2, [r7, #8]
 808942a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 808942c:	68fb      	ldr	r3, [r7, #12]
 808942e:	88fa      	ldrh	r2, [r7, #6]
 8089430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8089432:	68fb      	ldr	r3, [r7, #12]
 8089434:	88fa      	ldrh	r2, [r7, #6]
 8089436:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8089438:	68fb      	ldr	r3, [r7, #12]
 808943a:	2200      	movs	r2, #0
 808943c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 808943e:	68fb      	ldr	r3, [r7, #12]
 8089440:	2221      	movs	r2, #33	; 0x21
 8089442:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8089446:	68fb      	ldr	r3, [r7, #12]
 8089448:	2200      	movs	r2, #0
 808944a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 808944e:	68fb      	ldr	r3, [r7, #12]
 8089450:	681b      	ldr	r3, [r3, #0]
 8089452:	68da      	ldr	r2, [r3, #12]
 8089454:	68fb      	ldr	r3, [r7, #12]
 8089456:	681b      	ldr	r3, [r3, #0]
 8089458:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 808945c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 808945e:	2300      	movs	r3, #0
 8089460:	e000      	b.n	8089464 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8089462:	2302      	movs	r3, #2
  }
}
 8089464:	4618      	mov	r0, r3
 8089466:	3714      	adds	r7, #20
 8089468:	46bd      	mov	sp, r7
 808946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808946e:	4770      	bx	lr

08089470 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8089470:	b480      	push	{r7}
 8089472:	b085      	sub	sp, #20
 8089474:	af00      	add	r7, sp, #0
 8089476:	60f8      	str	r0, [r7, #12]
 8089478:	60b9      	str	r1, [r7, #8]
 808947a:	4613      	mov	r3, r2
 808947c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 808947e:	68fb      	ldr	r3, [r7, #12]
 8089480:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8089484:	b2db      	uxtb	r3, r3
 8089486:	2b20      	cmp	r3, #32
 8089488:	d140      	bne.n	808950c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 808948a:	68bb      	ldr	r3, [r7, #8]
 808948c:	2b00      	cmp	r3, #0
 808948e:	d002      	beq.n	8089496 <HAL_UART_Receive_IT+0x26>
 8089490:	88fb      	ldrh	r3, [r7, #6]
 8089492:	2b00      	cmp	r3, #0
 8089494:	d101      	bne.n	808949a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8089496:	2301      	movs	r3, #1
 8089498:	e039      	b.n	808950e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 808949a:	68fb      	ldr	r3, [r7, #12]
 808949c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80894a0:	2b01      	cmp	r3, #1
 80894a2:	d101      	bne.n	80894a8 <HAL_UART_Receive_IT+0x38>
 80894a4:	2302      	movs	r3, #2
 80894a6:	e032      	b.n	808950e <HAL_UART_Receive_IT+0x9e>
 80894a8:	68fb      	ldr	r3, [r7, #12]
 80894aa:	2201      	movs	r2, #1
 80894ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80894b0:	68fb      	ldr	r3, [r7, #12]
 80894b2:	68ba      	ldr	r2, [r7, #8]
 80894b4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80894b6:	68fb      	ldr	r3, [r7, #12]
 80894b8:	88fa      	ldrh	r2, [r7, #6]
 80894ba:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80894bc:	68fb      	ldr	r3, [r7, #12]
 80894be:	88fa      	ldrh	r2, [r7, #6]
 80894c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80894c2:	68fb      	ldr	r3, [r7, #12]
 80894c4:	2200      	movs	r2, #0
 80894c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80894c8:	68fb      	ldr	r3, [r7, #12]
 80894ca:	2222      	movs	r2, #34	; 0x22
 80894cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80894d0:	68fb      	ldr	r3, [r7, #12]
 80894d2:	2200      	movs	r2, #0
 80894d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80894d8:	68fb      	ldr	r3, [r7, #12]
 80894da:	681b      	ldr	r3, [r3, #0]
 80894dc:	68da      	ldr	r2, [r3, #12]
 80894de:	68fb      	ldr	r3, [r7, #12]
 80894e0:	681b      	ldr	r3, [r3, #0]
 80894e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80894e6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80894e8:	68fb      	ldr	r3, [r7, #12]
 80894ea:	681b      	ldr	r3, [r3, #0]
 80894ec:	695a      	ldr	r2, [r3, #20]
 80894ee:	68fb      	ldr	r3, [r7, #12]
 80894f0:	681b      	ldr	r3, [r3, #0]
 80894f2:	f042 0201 	orr.w	r2, r2, #1
 80894f6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80894f8:	68fb      	ldr	r3, [r7, #12]
 80894fa:	681b      	ldr	r3, [r3, #0]
 80894fc:	68da      	ldr	r2, [r3, #12]
 80894fe:	68fb      	ldr	r3, [r7, #12]
 8089500:	681b      	ldr	r3, [r3, #0]
 8089502:	f042 0220 	orr.w	r2, r2, #32
 8089506:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8089508:	2300      	movs	r3, #0
 808950a:	e000      	b.n	808950e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 808950c:	2302      	movs	r3, #2
  }
}
 808950e:	4618      	mov	r0, r3
 8089510:	3714      	adds	r7, #20
 8089512:	46bd      	mov	sp, r7
 8089514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089518:	4770      	bx	lr

0808951a <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 808951a:	b580      	push	{r7, lr}
 808951c:	b086      	sub	sp, #24
 808951e:	af00      	add	r7, sp, #0
 8089520:	60f8      	str	r0, [r7, #12]
 8089522:	60b9      	str	r1, [r7, #8]
 8089524:	4613      	mov	r3, r2
 8089526:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8089528:	68fb      	ldr	r3, [r7, #12]
 808952a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 808952e:	b2db      	uxtb	r3, r3
 8089530:	2b20      	cmp	r3, #32
 8089532:	d153      	bne.n	80895dc <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8089534:	68bb      	ldr	r3, [r7, #8]
 8089536:	2b00      	cmp	r3, #0
 8089538:	d002      	beq.n	8089540 <HAL_UART_Transmit_DMA+0x26>
 808953a:	88fb      	ldrh	r3, [r7, #6]
 808953c:	2b00      	cmp	r3, #0
 808953e:	d101      	bne.n	8089544 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8089540:	2301      	movs	r3, #1
 8089542:	e04c      	b.n	80895de <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8089544:	68fb      	ldr	r3, [r7, #12]
 8089546:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 808954a:	2b01      	cmp	r3, #1
 808954c:	d101      	bne.n	8089552 <HAL_UART_Transmit_DMA+0x38>
 808954e:	2302      	movs	r3, #2
 8089550:	e045      	b.n	80895de <HAL_UART_Transmit_DMA+0xc4>
 8089552:	68fb      	ldr	r3, [r7, #12]
 8089554:	2201      	movs	r2, #1
 8089556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 808955a:	68ba      	ldr	r2, [r7, #8]
 808955c:	68fb      	ldr	r3, [r7, #12]
 808955e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8089560:	68fb      	ldr	r3, [r7, #12]
 8089562:	88fa      	ldrh	r2, [r7, #6]
 8089564:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8089566:	68fb      	ldr	r3, [r7, #12]
 8089568:	88fa      	ldrh	r2, [r7, #6]
 808956a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 808956c:	68fb      	ldr	r3, [r7, #12]
 808956e:	2200      	movs	r2, #0
 8089570:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8089572:	68fb      	ldr	r3, [r7, #12]
 8089574:	2221      	movs	r2, #33	; 0x21
 8089576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 808957a:	68fb      	ldr	r3, [r7, #12]
 808957c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808957e:	4a1a      	ldr	r2, [pc, #104]	; (80895e8 <HAL_UART_Transmit_DMA+0xce>)
 8089580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8089582:	68fb      	ldr	r3, [r7, #12]
 8089584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089586:	4a19      	ldr	r2, [pc, #100]	; (80895ec <HAL_UART_Transmit_DMA+0xd2>)
 8089588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 808958a:	68fb      	ldr	r3, [r7, #12]
 808958c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808958e:	4a18      	ldr	r2, [pc, #96]	; (80895f0 <HAL_UART_Transmit_DMA+0xd6>)
 8089590:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8089592:	68fb      	ldr	r3, [r7, #12]
 8089594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089596:	2200      	movs	r2, #0
 8089598:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 808959a:	f107 0308 	add.w	r3, r7, #8
 808959e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80895a0:	68fb      	ldr	r3, [r7, #12]
 80895a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80895a4:	697b      	ldr	r3, [r7, #20]
 80895a6:	6819      	ldr	r1, [r3, #0]
 80895a8:	68fb      	ldr	r3, [r7, #12]
 80895aa:	681b      	ldr	r3, [r3, #0]
 80895ac:	3304      	adds	r3, #4
 80895ae:	461a      	mov	r2, r3
 80895b0:	88fb      	ldrh	r3, [r7, #6]
 80895b2:	f7f8 fa4e 	bl	8081a52 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80895b6:	68fb      	ldr	r3, [r7, #12]
 80895b8:	681b      	ldr	r3, [r3, #0]
 80895ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80895be:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80895c0:	68fb      	ldr	r3, [r7, #12]
 80895c2:	2200      	movs	r2, #0
 80895c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80895c8:	68fb      	ldr	r3, [r7, #12]
 80895ca:	681b      	ldr	r3, [r3, #0]
 80895cc:	695a      	ldr	r2, [r3, #20]
 80895ce:	68fb      	ldr	r3, [r7, #12]
 80895d0:	681b      	ldr	r3, [r3, #0]
 80895d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80895d6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80895d8:	2300      	movs	r3, #0
 80895da:	e000      	b.n	80895de <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80895dc:	2302      	movs	r3, #2
  }
}
 80895de:	4618      	mov	r0, r3
 80895e0:	3718      	adds	r7, #24
 80895e2:	46bd      	mov	sp, r7
 80895e4:	bd80      	pop	{r7, pc}
 80895e6:	bf00      	nop
 80895e8:	0808a289 	.word	0x0808a289
 80895ec:	0808a2db 	.word	0x0808a2db
 80895f0:	0808a37b 	.word	0x0808a37b

080895f4 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80895f4:	b580      	push	{r7, lr}
 80895f6:	b086      	sub	sp, #24
 80895f8:	af00      	add	r7, sp, #0
 80895fa:	60f8      	str	r0, [r7, #12]
 80895fc:	60b9      	str	r1, [r7, #8]
 80895fe:	4613      	mov	r3, r2
 8089600:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8089602:	68fb      	ldr	r3, [r7, #12]
 8089604:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8089608:	b2db      	uxtb	r3, r3
 808960a:	2b20      	cmp	r3, #32
 808960c:	d166      	bne.n	80896dc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 808960e:	68bb      	ldr	r3, [r7, #8]
 8089610:	2b00      	cmp	r3, #0
 8089612:	d002      	beq.n	808961a <HAL_UART_Receive_DMA+0x26>
 8089614:	88fb      	ldrh	r3, [r7, #6]
 8089616:	2b00      	cmp	r3, #0
 8089618:	d101      	bne.n	808961e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 808961a:	2301      	movs	r3, #1
 808961c:	e05f      	b.n	80896de <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 808961e:	68fb      	ldr	r3, [r7, #12]
 8089620:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8089624:	2b01      	cmp	r3, #1
 8089626:	d101      	bne.n	808962c <HAL_UART_Receive_DMA+0x38>
 8089628:	2302      	movs	r3, #2
 808962a:	e058      	b.n	80896de <HAL_UART_Receive_DMA+0xea>
 808962c:	68fb      	ldr	r3, [r7, #12]
 808962e:	2201      	movs	r2, #1
 8089630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8089634:	68ba      	ldr	r2, [r7, #8]
 8089636:	68fb      	ldr	r3, [r7, #12]
 8089638:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 808963a:	68fb      	ldr	r3, [r7, #12]
 808963c:	88fa      	ldrh	r2, [r7, #6]
 808963e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8089640:	68fb      	ldr	r3, [r7, #12]
 8089642:	2200      	movs	r2, #0
 8089644:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8089646:	68fb      	ldr	r3, [r7, #12]
 8089648:	2222      	movs	r2, #34	; 0x22
 808964a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 808964e:	68fb      	ldr	r3, [r7, #12]
 8089650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089652:	4a25      	ldr	r2, [pc, #148]	; (80896e8 <HAL_UART_Receive_DMA+0xf4>)
 8089654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8089656:	68fb      	ldr	r3, [r7, #12]
 8089658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808965a:	4a24      	ldr	r2, [pc, #144]	; (80896ec <HAL_UART_Receive_DMA+0xf8>)
 808965c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 808965e:	68fb      	ldr	r3, [r7, #12]
 8089660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089662:	4a23      	ldr	r2, [pc, #140]	; (80896f0 <HAL_UART_Receive_DMA+0xfc>)
 8089664:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8089666:	68fb      	ldr	r3, [r7, #12]
 8089668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808966a:	2200      	movs	r2, #0
 808966c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 808966e:	f107 0308 	add.w	r3, r7, #8
 8089672:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8089674:	68fb      	ldr	r3, [r7, #12]
 8089676:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8089678:	68fb      	ldr	r3, [r7, #12]
 808967a:	681b      	ldr	r3, [r3, #0]
 808967c:	3304      	adds	r3, #4
 808967e:	4619      	mov	r1, r3
 8089680:	697b      	ldr	r3, [r7, #20]
 8089682:	681a      	ldr	r2, [r3, #0]
 8089684:	88fb      	ldrh	r3, [r7, #6]
 8089686:	f7f8 f9e4 	bl	8081a52 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 808968a:	2300      	movs	r3, #0
 808968c:	613b      	str	r3, [r7, #16]
 808968e:	68fb      	ldr	r3, [r7, #12]
 8089690:	681b      	ldr	r3, [r3, #0]
 8089692:	681b      	ldr	r3, [r3, #0]
 8089694:	613b      	str	r3, [r7, #16]
 8089696:	68fb      	ldr	r3, [r7, #12]
 8089698:	681b      	ldr	r3, [r3, #0]
 808969a:	685b      	ldr	r3, [r3, #4]
 808969c:	613b      	str	r3, [r7, #16]
 808969e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80896a0:	68fb      	ldr	r3, [r7, #12]
 80896a2:	2200      	movs	r2, #0
 80896a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80896a8:	68fb      	ldr	r3, [r7, #12]
 80896aa:	681b      	ldr	r3, [r3, #0]
 80896ac:	68da      	ldr	r2, [r3, #12]
 80896ae:	68fb      	ldr	r3, [r7, #12]
 80896b0:	681b      	ldr	r3, [r3, #0]
 80896b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80896b6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80896b8:	68fb      	ldr	r3, [r7, #12]
 80896ba:	681b      	ldr	r3, [r3, #0]
 80896bc:	695a      	ldr	r2, [r3, #20]
 80896be:	68fb      	ldr	r3, [r7, #12]
 80896c0:	681b      	ldr	r3, [r3, #0]
 80896c2:	f042 0201 	orr.w	r2, r2, #1
 80896c6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80896c8:	68fb      	ldr	r3, [r7, #12]
 80896ca:	681b      	ldr	r3, [r3, #0]
 80896cc:	695a      	ldr	r2, [r3, #20]
 80896ce:	68fb      	ldr	r3, [r7, #12]
 80896d0:	681b      	ldr	r3, [r3, #0]
 80896d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80896d6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80896d8:	2300      	movs	r3, #0
 80896da:	e000      	b.n	80896de <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80896dc:	2302      	movs	r3, #2
  }
}
 80896de:	4618      	mov	r0, r3
 80896e0:	3718      	adds	r7, #24
 80896e2:	46bd      	mov	sp, r7
 80896e4:	bd80      	pop	{r7, pc}
 80896e6:	bf00      	nop
 80896e8:	0808a2f7 	.word	0x0808a2f7
 80896ec:	0808a35f 	.word	0x0808a35f
 80896f0:	0808a37b 	.word	0x0808a37b

080896f4 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80896f4:	b480      	push	{r7}
 80896f6:	b085      	sub	sp, #20
 80896f8:	af00      	add	r7, sp, #0
 80896fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80896fc:	2300      	movs	r3, #0
 80896fe:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8089700:	687b      	ldr	r3, [r7, #4]
 8089702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8089706:	2b01      	cmp	r3, #1
 8089708:	d101      	bne.n	808970e <HAL_UART_DMAPause+0x1a>
 808970a:	2302      	movs	r3, #2
 808970c:	e050      	b.n	80897b0 <HAL_UART_DMAPause+0xbc>
 808970e:	687b      	ldr	r3, [r7, #4]
 8089710:	2201      	movs	r2, #1
 8089712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8089716:	687b      	ldr	r3, [r7, #4]
 8089718:	681b      	ldr	r3, [r3, #0]
 808971a:	695b      	ldr	r3, [r3, #20]
 808971c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8089720:	2b80      	cmp	r3, #128	; 0x80
 8089722:	bf0c      	ite	eq
 8089724:	2301      	moveq	r3, #1
 8089726:	2300      	movne	r3, #0
 8089728:	b2db      	uxtb	r3, r3
 808972a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 808972c:	687b      	ldr	r3, [r7, #4]
 808972e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8089732:	b2db      	uxtb	r3, r3
 8089734:	2b21      	cmp	r3, #33	; 0x21
 8089736:	d10a      	bne.n	808974e <HAL_UART_DMAPause+0x5a>
 8089738:	68fb      	ldr	r3, [r7, #12]
 808973a:	2b00      	cmp	r3, #0
 808973c:	d007      	beq.n	808974e <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 808973e:	687b      	ldr	r3, [r7, #4]
 8089740:	681b      	ldr	r3, [r3, #0]
 8089742:	695a      	ldr	r2, [r3, #20]
 8089744:	687b      	ldr	r3, [r7, #4]
 8089746:	681b      	ldr	r3, [r3, #0]
 8089748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 808974c:	615a      	str	r2, [r3, #20]
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 808974e:	687b      	ldr	r3, [r7, #4]
 8089750:	681b      	ldr	r3, [r3, #0]
 8089752:	695b      	ldr	r3, [r3, #20]
 8089754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8089758:	2b40      	cmp	r3, #64	; 0x40
 808975a:	bf0c      	ite	eq
 808975c:	2301      	moveq	r3, #1
 808975e:	2300      	movne	r3, #0
 8089760:	b2db      	uxtb	r3, r3
 8089762:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8089764:	687b      	ldr	r3, [r7, #4]
 8089766:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 808976a:	b2db      	uxtb	r3, r3
 808976c:	2b22      	cmp	r3, #34	; 0x22
 808976e:	d11a      	bne.n	80897a6 <HAL_UART_DMAPause+0xb2>
 8089770:	68fb      	ldr	r3, [r7, #12]
 8089772:	2b00      	cmp	r3, #0
 8089774:	d017      	beq.n	80897a6 <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8089776:	687b      	ldr	r3, [r7, #4]
 8089778:	681b      	ldr	r3, [r3, #0]
 808977a:	68da      	ldr	r2, [r3, #12]
 808977c:	687b      	ldr	r3, [r7, #4]
 808977e:	681b      	ldr	r3, [r3, #0]
 8089780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8089784:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8089786:	687b      	ldr	r3, [r7, #4]
 8089788:	681b      	ldr	r3, [r3, #0]
 808978a:	695a      	ldr	r2, [r3, #20]
 808978c:	687b      	ldr	r3, [r7, #4]
 808978e:	681b      	ldr	r3, [r3, #0]
 8089790:	f022 0201 	bic.w	r2, r2, #1
 8089794:	615a      	str	r2, [r3, #20]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8089796:	687b      	ldr	r3, [r7, #4]
 8089798:	681b      	ldr	r3, [r3, #0]
 808979a:	695a      	ldr	r2, [r3, #20]
 808979c:	687b      	ldr	r3, [r7, #4]
 808979e:	681b      	ldr	r3, [r3, #0]
 80897a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80897a4:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80897a6:	687b      	ldr	r3, [r7, #4]
 80897a8:	2200      	movs	r2, #0
 80897aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80897ae:	2300      	movs	r3, #0
}
 80897b0:	4618      	mov	r0, r3
 80897b2:	3714      	adds	r7, #20
 80897b4:	46bd      	mov	sp, r7
 80897b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80897ba:	4770      	bx	lr

080897bc <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 80897bc:	b480      	push	{r7}
 80897be:	b085      	sub	sp, #20
 80897c0:	af00      	add	r7, sp, #0
 80897c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80897c4:	687b      	ldr	r3, [r7, #4]
 80897c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80897ca:	2b01      	cmp	r3, #1
 80897cc:	d101      	bne.n	80897d2 <HAL_UART_DMAResume+0x16>
 80897ce:	2302      	movs	r3, #2
 80897d0:	e03f      	b.n	8089852 <HAL_UART_DMAResume+0x96>
 80897d2:	687b      	ldr	r3, [r7, #4]
 80897d4:	2201      	movs	r2, #1
 80897d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80897da:	687b      	ldr	r3, [r7, #4]
 80897dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80897e0:	b2db      	uxtb	r3, r3
 80897e2:	2b21      	cmp	r3, #33	; 0x21
 80897e4:	d107      	bne.n	80897f6 <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80897e6:	687b      	ldr	r3, [r7, #4]
 80897e8:	681b      	ldr	r3, [r3, #0]
 80897ea:	695a      	ldr	r2, [r3, #20]
 80897ec:	687b      	ldr	r3, [r7, #4]
 80897ee:	681b      	ldr	r3, [r3, #0]
 80897f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80897f4:	615a      	str	r2, [r3, #20]
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80897f6:	687b      	ldr	r3, [r7, #4]
 80897f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80897fc:	b2db      	uxtb	r3, r3
 80897fe:	2b22      	cmp	r3, #34	; 0x22
 8089800:	d122      	bne.n	8089848 <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8089802:	2300      	movs	r3, #0
 8089804:	60fb      	str	r3, [r7, #12]
 8089806:	687b      	ldr	r3, [r7, #4]
 8089808:	681b      	ldr	r3, [r3, #0]
 808980a:	681b      	ldr	r3, [r3, #0]
 808980c:	60fb      	str	r3, [r7, #12]
 808980e:	687b      	ldr	r3, [r7, #4]
 8089810:	681b      	ldr	r3, [r3, #0]
 8089812:	685b      	ldr	r3, [r3, #4]
 8089814:	60fb      	str	r3, [r7, #12]
 8089816:	68fb      	ldr	r3, [r7, #12]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8089818:	687b      	ldr	r3, [r7, #4]
 808981a:	681b      	ldr	r3, [r3, #0]
 808981c:	68da      	ldr	r2, [r3, #12]
 808981e:	687b      	ldr	r3, [r7, #4]
 8089820:	681b      	ldr	r3, [r3, #0]
 8089822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8089826:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8089828:	687b      	ldr	r3, [r7, #4]
 808982a:	681b      	ldr	r3, [r3, #0]
 808982c:	695a      	ldr	r2, [r3, #20]
 808982e:	687b      	ldr	r3, [r7, #4]
 8089830:	681b      	ldr	r3, [r3, #0]
 8089832:	f042 0201 	orr.w	r2, r2, #1
 8089836:	615a      	str	r2, [r3, #20]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8089838:	687b      	ldr	r3, [r7, #4]
 808983a:	681b      	ldr	r3, [r3, #0]
 808983c:	695a      	ldr	r2, [r3, #20]
 808983e:	687b      	ldr	r3, [r7, #4]
 8089840:	681b      	ldr	r3, [r3, #0]
 8089842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8089846:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8089848:	687b      	ldr	r3, [r7, #4]
 808984a:	2200      	movs	r2, #0
 808984c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8089850:	2300      	movs	r3, #0
}
 8089852:	4618      	mov	r0, r3
 8089854:	3714      	adds	r7, #20
 8089856:	46bd      	mov	sp, r7
 8089858:	f85d 7b04 	ldr.w	r7, [sp], #4
 808985c:	4770      	bx	lr

0808985e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 808985e:	b580      	push	{r7, lr}
 8089860:	b084      	sub	sp, #16
 8089862:	af00      	add	r7, sp, #0
 8089864:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8089866:	2300      	movs	r3, #0
 8089868:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 808986a:	687b      	ldr	r3, [r7, #4]
 808986c:	681b      	ldr	r3, [r3, #0]
 808986e:	695b      	ldr	r3, [r3, #20]
 8089870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8089874:	2b80      	cmp	r3, #128	; 0x80
 8089876:	bf0c      	ite	eq
 8089878:	2301      	moveq	r3, #1
 808987a:	2300      	movne	r3, #0
 808987c:	b2db      	uxtb	r3, r3
 808987e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8089880:	687b      	ldr	r3, [r7, #4]
 8089882:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8089886:	b2db      	uxtb	r3, r3
 8089888:	2b21      	cmp	r3, #33	; 0x21
 808988a:	d116      	bne.n	80898ba <HAL_UART_DMAStop+0x5c>
 808988c:	68fb      	ldr	r3, [r7, #12]
 808988e:	2b00      	cmp	r3, #0
 8089890:	d013      	beq.n	80898ba <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8089892:	687b      	ldr	r3, [r7, #4]
 8089894:	681b      	ldr	r3, [r3, #0]
 8089896:	695a      	ldr	r2, [r3, #20]
 8089898:	687b      	ldr	r3, [r7, #4]
 808989a:	681b      	ldr	r3, [r3, #0]
 808989c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80898a0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80898a2:	687b      	ldr	r3, [r7, #4]
 80898a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80898a6:	2b00      	cmp	r3, #0
 80898a8:	d004      	beq.n	80898b4 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80898aa:	687b      	ldr	r3, [r7, #4]
 80898ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80898ae:	4618      	mov	r0, r3
 80898b0:	f7f8 f92f 	bl	8081b12 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80898b4:	6878      	ldr	r0, [r7, #4]
 80898b6:	f000 fdf4 	bl	808a4a2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80898ba:	687b      	ldr	r3, [r7, #4]
 80898bc:	681b      	ldr	r3, [r3, #0]
 80898be:	695b      	ldr	r3, [r3, #20]
 80898c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80898c4:	2b40      	cmp	r3, #64	; 0x40
 80898c6:	bf0c      	ite	eq
 80898c8:	2301      	moveq	r3, #1
 80898ca:	2300      	movne	r3, #0
 80898cc:	b2db      	uxtb	r3, r3
 80898ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80898d0:	687b      	ldr	r3, [r7, #4]
 80898d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80898d6:	b2db      	uxtb	r3, r3
 80898d8:	2b22      	cmp	r3, #34	; 0x22
 80898da:	d116      	bne.n	808990a <HAL_UART_DMAStop+0xac>
 80898dc:	68fb      	ldr	r3, [r7, #12]
 80898de:	2b00      	cmp	r3, #0
 80898e0:	d013      	beq.n	808990a <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80898e2:	687b      	ldr	r3, [r7, #4]
 80898e4:	681b      	ldr	r3, [r3, #0]
 80898e6:	695a      	ldr	r2, [r3, #20]
 80898e8:	687b      	ldr	r3, [r7, #4]
 80898ea:	681b      	ldr	r3, [r3, #0]
 80898ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80898f0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80898f2:	687b      	ldr	r3, [r7, #4]
 80898f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80898f6:	2b00      	cmp	r3, #0
 80898f8:	d004      	beq.n	8089904 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80898fa:	687b      	ldr	r3, [r7, #4]
 80898fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80898fe:	4618      	mov	r0, r3
 8089900:	f7f8 f907 	bl	8081b12 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8089904:	6878      	ldr	r0, [r7, #4]
 8089906:	f000 fde2 	bl	808a4ce <UART_EndRxTransfer>
  }

  return HAL_OK;
 808990a:	2300      	movs	r3, #0
}
 808990c:	4618      	mov	r0, r3
 808990e:	3710      	adds	r7, #16
 8089910:	46bd      	mov	sp, r7
 8089912:	bd80      	pop	{r7, pc}

08089914 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8089914:	b580      	push	{r7, lr}
 8089916:	b082      	sub	sp, #8
 8089918:	af00      	add	r7, sp, #0
 808991a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 808991c:	687b      	ldr	r3, [r7, #4]
 808991e:	681b      	ldr	r3, [r3, #0]
 8089920:	68da      	ldr	r2, [r3, #12]
 8089922:	687b      	ldr	r3, [r7, #4]
 8089924:	681b      	ldr	r3, [r3, #0]
 8089926:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 808992a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 808992c:	687b      	ldr	r3, [r7, #4]
 808992e:	681b      	ldr	r3, [r3, #0]
 8089930:	695a      	ldr	r2, [r3, #20]
 8089932:	687b      	ldr	r3, [r7, #4]
 8089934:	681b      	ldr	r3, [r3, #0]
 8089936:	f022 0201 	bic.w	r2, r2, #1
 808993a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 808993c:	687b      	ldr	r3, [r7, #4]
 808993e:	681b      	ldr	r3, [r3, #0]
 8089940:	695b      	ldr	r3, [r3, #20]
 8089942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8089946:	2b80      	cmp	r3, #128	; 0x80
 8089948:	d124      	bne.n	8089994 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 808994a:	687b      	ldr	r3, [r7, #4]
 808994c:	681b      	ldr	r3, [r3, #0]
 808994e:	695a      	ldr	r2, [r3, #20]
 8089950:	687b      	ldr	r3, [r7, #4]
 8089952:	681b      	ldr	r3, [r3, #0]
 8089954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8089958:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 808995a:	687b      	ldr	r3, [r7, #4]
 808995c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808995e:	2b00      	cmp	r3, #0
 8089960:	d018      	beq.n	8089994 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8089962:	687b      	ldr	r3, [r7, #4]
 8089964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089966:	2200      	movs	r2, #0
 8089968:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 808996a:	687b      	ldr	r3, [r7, #4]
 808996c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808996e:	4618      	mov	r0, r3
 8089970:	f7f8 f8cf 	bl	8081b12 <HAL_DMA_Abort>
 8089974:	4603      	mov	r3, r0
 8089976:	2b00      	cmp	r3, #0
 8089978:	d00c      	beq.n	8089994 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 808997a:	687b      	ldr	r3, [r7, #4]
 808997c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808997e:	4618      	mov	r0, r3
 8089980:	f7f8 fc8c 	bl	808229c <HAL_DMA_GetError>
 8089984:	4603      	mov	r3, r0
 8089986:	2b20      	cmp	r3, #32
 8089988:	d104      	bne.n	8089994 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 808998a:	687b      	ldr	r3, [r7, #4]
 808998c:	2210      	movs	r2, #16
 808998e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8089990:	2303      	movs	r3, #3
 8089992:	e03d      	b.n	8089a10 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8089994:	687b      	ldr	r3, [r7, #4]
 8089996:	681b      	ldr	r3, [r3, #0]
 8089998:	695b      	ldr	r3, [r3, #20]
 808999a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 808999e:	2b40      	cmp	r3, #64	; 0x40
 80899a0:	d124      	bne.n	80899ec <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80899a2:	687b      	ldr	r3, [r7, #4]
 80899a4:	681b      	ldr	r3, [r3, #0]
 80899a6:	695a      	ldr	r2, [r3, #20]
 80899a8:	687b      	ldr	r3, [r7, #4]
 80899aa:	681b      	ldr	r3, [r3, #0]
 80899ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80899b0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80899b2:	687b      	ldr	r3, [r7, #4]
 80899b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80899b6:	2b00      	cmp	r3, #0
 80899b8:	d018      	beq.n	80899ec <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80899ba:	687b      	ldr	r3, [r7, #4]
 80899bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80899be:	2200      	movs	r2, #0
 80899c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80899c2:	687b      	ldr	r3, [r7, #4]
 80899c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80899c6:	4618      	mov	r0, r3
 80899c8:	f7f8 f8a3 	bl	8081b12 <HAL_DMA_Abort>
 80899cc:	4603      	mov	r3, r0
 80899ce:	2b00      	cmp	r3, #0
 80899d0:	d00c      	beq.n	80899ec <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80899d2:	687b      	ldr	r3, [r7, #4]
 80899d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80899d6:	4618      	mov	r0, r3
 80899d8:	f7f8 fc60 	bl	808229c <HAL_DMA_GetError>
 80899dc:	4603      	mov	r3, r0
 80899de:	2b20      	cmp	r3, #32
 80899e0:	d104      	bne.n	80899ec <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80899e2:	687b      	ldr	r3, [r7, #4]
 80899e4:	2210      	movs	r2, #16
 80899e6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80899e8:	2303      	movs	r3, #3
 80899ea:	e011      	b.n	8089a10 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80899ec:	687b      	ldr	r3, [r7, #4]
 80899ee:	2200      	movs	r2, #0
 80899f0:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80899f2:	687b      	ldr	r3, [r7, #4]
 80899f4:	2200      	movs	r2, #0
 80899f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80899f8:	687b      	ldr	r3, [r7, #4]
 80899fa:	2200      	movs	r2, #0
 80899fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80899fe:	687b      	ldr	r3, [r7, #4]
 8089a00:	2220      	movs	r2, #32
 8089a02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8089a06:	687b      	ldr	r3, [r7, #4]
 8089a08:	2220      	movs	r2, #32
 8089a0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8089a0e:	2300      	movs	r3, #0
}
 8089a10:	4618      	mov	r0, r3
 8089a12:	3708      	adds	r7, #8
 8089a14:	46bd      	mov	sp, r7
 8089a16:	bd80      	pop	{r7, pc}

08089a18 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8089a18:	b580      	push	{r7, lr}
 8089a1a:	b082      	sub	sp, #8
 8089a1c:	af00      	add	r7, sp, #0
 8089a1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8089a20:	687b      	ldr	r3, [r7, #4]
 8089a22:	681b      	ldr	r3, [r3, #0]
 8089a24:	68da      	ldr	r2, [r3, #12]
 8089a26:	687b      	ldr	r3, [r7, #4]
 8089a28:	681b      	ldr	r3, [r3, #0]
 8089a2a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8089a2e:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8089a30:	687b      	ldr	r3, [r7, #4]
 8089a32:	681b      	ldr	r3, [r3, #0]
 8089a34:	695b      	ldr	r3, [r3, #20]
 8089a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8089a3a:	2b80      	cmp	r3, #128	; 0x80
 8089a3c:	d124      	bne.n	8089a88 <HAL_UART_AbortTransmit+0x70>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8089a3e:	687b      	ldr	r3, [r7, #4]
 8089a40:	681b      	ldr	r3, [r3, #0]
 8089a42:	695a      	ldr	r2, [r3, #20]
 8089a44:	687b      	ldr	r3, [r7, #4]
 8089a46:	681b      	ldr	r3, [r3, #0]
 8089a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8089a4c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8089a4e:	687b      	ldr	r3, [r7, #4]
 8089a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089a52:	2b00      	cmp	r3, #0
 8089a54:	d018      	beq.n	8089a88 <HAL_UART_AbortTransmit+0x70>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8089a56:	687b      	ldr	r3, [r7, #4]
 8089a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089a5a:	2200      	movs	r2, #0
 8089a5c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8089a5e:	687b      	ldr	r3, [r7, #4]
 8089a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089a62:	4618      	mov	r0, r3
 8089a64:	f7f8 f855 	bl	8081b12 <HAL_DMA_Abort>
 8089a68:	4603      	mov	r3, r0
 8089a6a:	2b00      	cmp	r3, #0
 8089a6c:	d00c      	beq.n	8089a88 <HAL_UART_AbortTransmit+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8089a6e:	687b      	ldr	r3, [r7, #4]
 8089a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089a72:	4618      	mov	r0, r3
 8089a74:	f7f8 fc12 	bl	808229c <HAL_DMA_GetError>
 8089a78:	4603      	mov	r3, r0
 8089a7a:	2b20      	cmp	r3, #32
 8089a7c:	d104      	bne.n	8089a88 <HAL_UART_AbortTransmit+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8089a7e:	687b      	ldr	r3, [r7, #4]
 8089a80:	2210      	movs	r2, #16
 8089a82:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8089a84:	2303      	movs	r3, #3
 8089a86:	e007      	b.n	8089a98 <HAL_UART_AbortTransmit+0x80>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8089a88:	687b      	ldr	r3, [r7, #4]
 8089a8a:	2200      	movs	r2, #0
 8089a8c:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8089a8e:	687b      	ldr	r3, [r7, #4]
 8089a90:	2220      	movs	r2, #32
 8089a92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8089a96:	2300      	movs	r3, #0
}
 8089a98:	4618      	mov	r0, r3
 8089a9a:	3708      	adds	r7, #8
 8089a9c:	46bd      	mov	sp, r7
 8089a9e:	bd80      	pop	{r7, pc}

08089aa0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8089aa0:	b580      	push	{r7, lr}
 8089aa2:	b082      	sub	sp, #8
 8089aa4:	af00      	add	r7, sp, #0
 8089aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8089aa8:	687b      	ldr	r3, [r7, #4]
 8089aaa:	681b      	ldr	r3, [r3, #0]
 8089aac:	68da      	ldr	r2, [r3, #12]
 8089aae:	687b      	ldr	r3, [r7, #4]
 8089ab0:	681b      	ldr	r3, [r3, #0]
 8089ab2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8089ab6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8089ab8:	687b      	ldr	r3, [r7, #4]
 8089aba:	681b      	ldr	r3, [r3, #0]
 8089abc:	695a      	ldr	r2, [r3, #20]
 8089abe:	687b      	ldr	r3, [r7, #4]
 8089ac0:	681b      	ldr	r3, [r3, #0]
 8089ac2:	f022 0201 	bic.w	r2, r2, #1
 8089ac6:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8089ac8:	687b      	ldr	r3, [r7, #4]
 8089aca:	681b      	ldr	r3, [r3, #0]
 8089acc:	695b      	ldr	r3, [r3, #20]
 8089ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8089ad2:	2b40      	cmp	r3, #64	; 0x40
 8089ad4:	d124      	bne.n	8089b20 <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8089ad6:	687b      	ldr	r3, [r7, #4]
 8089ad8:	681b      	ldr	r3, [r3, #0]
 8089ada:	695a      	ldr	r2, [r3, #20]
 8089adc:	687b      	ldr	r3, [r7, #4]
 8089ade:	681b      	ldr	r3, [r3, #0]
 8089ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8089ae4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8089ae6:	687b      	ldr	r3, [r7, #4]
 8089ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089aea:	2b00      	cmp	r3, #0
 8089aec:	d018      	beq.n	8089b20 <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8089aee:	687b      	ldr	r3, [r7, #4]
 8089af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089af2:	2200      	movs	r2, #0
 8089af4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8089af6:	687b      	ldr	r3, [r7, #4]
 8089af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089afa:	4618      	mov	r0, r3
 8089afc:	f7f8 f809 	bl	8081b12 <HAL_DMA_Abort>
 8089b00:	4603      	mov	r3, r0
 8089b02:	2b00      	cmp	r3, #0
 8089b04:	d00c      	beq.n	8089b20 <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8089b06:	687b      	ldr	r3, [r7, #4]
 8089b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089b0a:	4618      	mov	r0, r3
 8089b0c:	f7f8 fbc6 	bl	808229c <HAL_DMA_GetError>
 8089b10:	4603      	mov	r3, r0
 8089b12:	2b20      	cmp	r3, #32
 8089b14:	d104      	bne.n	8089b20 <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8089b16:	687b      	ldr	r3, [r7, #4]
 8089b18:	2210      	movs	r2, #16
 8089b1a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8089b1c:	2303      	movs	r3, #3
 8089b1e:	e007      	b.n	8089b30 <HAL_UART_AbortReceive+0x90>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8089b20:	687b      	ldr	r3, [r7, #4]
 8089b22:	2200      	movs	r2, #0
 8089b24:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8089b26:	687b      	ldr	r3, [r7, #4]
 8089b28:	2220      	movs	r2, #32
 8089b2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8089b2e:	2300      	movs	r3, #0
}
 8089b30:	4618      	mov	r0, r3
 8089b32:	3708      	adds	r7, #8
 8089b34:	46bd      	mov	sp, r7
 8089b36:	bd80      	pop	{r7, pc}

08089b38 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8089b38:	b580      	push	{r7, lr}
 8089b3a:	b084      	sub	sp, #16
 8089b3c:	af00      	add	r7, sp, #0
 8089b3e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8089b40:	2301      	movs	r3, #1
 8089b42:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8089b44:	687b      	ldr	r3, [r7, #4]
 8089b46:	681b      	ldr	r3, [r3, #0]
 8089b48:	68da      	ldr	r2, [r3, #12]
 8089b4a:	687b      	ldr	r3, [r7, #4]
 8089b4c:	681b      	ldr	r3, [r3, #0]
 8089b4e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8089b52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8089b54:	687b      	ldr	r3, [r7, #4]
 8089b56:	681b      	ldr	r3, [r3, #0]
 8089b58:	695a      	ldr	r2, [r3, #20]
 8089b5a:	687b      	ldr	r3, [r7, #4]
 8089b5c:	681b      	ldr	r3, [r3, #0]
 8089b5e:	f022 0201 	bic.w	r2, r2, #1
 8089b62:	615a      	str	r2, [r3, #20]

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8089b64:	687b      	ldr	r3, [r7, #4]
 8089b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089b68:	2b00      	cmp	r3, #0
 8089b6a:	d00f      	beq.n	8089b8c <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8089b6c:	687b      	ldr	r3, [r7, #4]
 8089b6e:	681b      	ldr	r3, [r3, #0]
 8089b70:	695b      	ldr	r3, [r3, #20]
 8089b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8089b76:	2b80      	cmp	r3, #128	; 0x80
 8089b78:	d104      	bne.n	8089b84 <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8089b7a:	687b      	ldr	r3, [r7, #4]
 8089b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089b7e:	4a3e      	ldr	r2, [pc, #248]	; (8089c78 <HAL_UART_Abort_IT+0x140>)
 8089b80:	651a      	str	r2, [r3, #80]	; 0x50
 8089b82:	e003      	b.n	8089b8c <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8089b84:	687b      	ldr	r3, [r7, #4]
 8089b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089b88:	2200      	movs	r2, #0
 8089b8a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8089b8c:	687b      	ldr	r3, [r7, #4]
 8089b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089b90:	2b00      	cmp	r3, #0
 8089b92:	d00f      	beq.n	8089bb4 <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8089b94:	687b      	ldr	r3, [r7, #4]
 8089b96:	681b      	ldr	r3, [r3, #0]
 8089b98:	695b      	ldr	r3, [r3, #20]
 8089b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8089b9e:	2b40      	cmp	r3, #64	; 0x40
 8089ba0:	d104      	bne.n	8089bac <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8089ba2:	687b      	ldr	r3, [r7, #4]
 8089ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089ba6:	4a35      	ldr	r2, [pc, #212]	; (8089c7c <HAL_UART_Abort_IT+0x144>)
 8089ba8:	651a      	str	r2, [r3, #80]	; 0x50
 8089baa:	e003      	b.n	8089bb4 <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8089bac:	687b      	ldr	r3, [r7, #4]
 8089bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089bb0:	2200      	movs	r2, #0
 8089bb2:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8089bb4:	687b      	ldr	r3, [r7, #4]
 8089bb6:	681b      	ldr	r3, [r3, #0]
 8089bb8:	695b      	ldr	r3, [r3, #20]
 8089bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8089bbe:	2b80      	cmp	r3, #128	; 0x80
 8089bc0:	d11a      	bne.n	8089bf8 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8089bc2:	687b      	ldr	r3, [r7, #4]
 8089bc4:	681b      	ldr	r3, [r3, #0]
 8089bc6:	695a      	ldr	r2, [r3, #20]
 8089bc8:	687b      	ldr	r3, [r7, #4]
 8089bca:	681b      	ldr	r3, [r3, #0]
 8089bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8089bd0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8089bd2:	687b      	ldr	r3, [r7, #4]
 8089bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089bd6:	2b00      	cmp	r3, #0
 8089bd8:	d00e      	beq.n	8089bf8 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8089bda:	687b      	ldr	r3, [r7, #4]
 8089bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089bde:	4618      	mov	r0, r3
 8089be0:	f7f8 f807 	bl	8081bf2 <HAL_DMA_Abort_IT>
 8089be4:	4603      	mov	r3, r0
 8089be6:	2b00      	cmp	r3, #0
 8089be8:	d004      	beq.n	8089bf4 <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8089bea:	687b      	ldr	r3, [r7, #4]
 8089bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089bee:	2200      	movs	r2, #0
 8089bf0:	651a      	str	r2, [r3, #80]	; 0x50
 8089bf2:	e001      	b.n	8089bf8 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        AbortCplt = 0x00U;
 8089bf4:	2300      	movs	r3, #0
 8089bf6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8089bf8:	687b      	ldr	r3, [r7, #4]
 8089bfa:	681b      	ldr	r3, [r3, #0]
 8089bfc:	695b      	ldr	r3, [r3, #20]
 8089bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8089c02:	2b40      	cmp	r3, #64	; 0x40
 8089c04:	d11c      	bne.n	8089c40 <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8089c06:	687b      	ldr	r3, [r7, #4]
 8089c08:	681b      	ldr	r3, [r3, #0]
 8089c0a:	695a      	ldr	r2, [r3, #20]
 8089c0c:	687b      	ldr	r3, [r7, #4]
 8089c0e:	681b      	ldr	r3, [r3, #0]
 8089c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8089c14:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8089c16:	687b      	ldr	r3, [r7, #4]
 8089c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089c1a:	2b00      	cmp	r3, #0
 8089c1c:	d010      	beq.n	8089c40 <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8089c1e:	687b      	ldr	r3, [r7, #4]
 8089c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089c22:	4618      	mov	r0, r3
 8089c24:	f7f7 ffe5 	bl	8081bf2 <HAL_DMA_Abort_IT>
 8089c28:	4603      	mov	r3, r0
 8089c2a:	2b00      	cmp	r3, #0
 8089c2c:	d006      	beq.n	8089c3c <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8089c2e:	687b      	ldr	r3, [r7, #4]
 8089c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089c32:	2200      	movs	r2, #0
 8089c34:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8089c36:	2301      	movs	r3, #1
 8089c38:	60fb      	str	r3, [r7, #12]
 8089c3a:	e001      	b.n	8089c40 <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        AbortCplt = 0x00U;
 8089c3c:	2300      	movs	r3, #0
 8089c3e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8089c40:	68fb      	ldr	r3, [r7, #12]
 8089c42:	2b01      	cmp	r3, #1
 8089c44:	d113      	bne.n	8089c6e <HAL_UART_Abort_IT+0x136>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8089c46:	687b      	ldr	r3, [r7, #4]
 8089c48:	2200      	movs	r2, #0
 8089c4a:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8089c4c:	687b      	ldr	r3, [r7, #4]
 8089c4e:	2200      	movs	r2, #0
 8089c50:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8089c52:	687b      	ldr	r3, [r7, #4]
 8089c54:	2200      	movs	r2, #0
 8089c56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8089c58:	687b      	ldr	r3, [r7, #4]
 8089c5a:	2220      	movs	r2, #32
 8089c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 8089c60:	687b      	ldr	r3, [r7, #4]
 8089c62:	2220      	movs	r2, #32
 8089c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8089c68:	6878      	ldr	r0, [r7, #4]
 8089c6a:	f000 f9df 	bl	808a02c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8089c6e:	2300      	movs	r3, #0
}
 8089c70:	4618      	mov	r0, r3
 8089c72:	3710      	adds	r7, #16
 8089c74:	46bd      	mov	sp, r7
 8089c76:	bd80      	pop	{r7, pc}
 8089c78:	0808a533 	.word	0x0808a533
 8089c7c:	0808a58d 	.word	0x0808a58d

08089c80 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8089c80:	b580      	push	{r7, lr}
 8089c82:	b082      	sub	sp, #8
 8089c84:	af00      	add	r7, sp, #0
 8089c86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8089c88:	687b      	ldr	r3, [r7, #4]
 8089c8a:	681b      	ldr	r3, [r3, #0]
 8089c8c:	68da      	ldr	r2, [r3, #12]
 8089c8e:	687b      	ldr	r3, [r7, #4]
 8089c90:	681b      	ldr	r3, [r3, #0]
 8089c92:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8089c96:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8089c98:	687b      	ldr	r3, [r7, #4]
 8089c9a:	681b      	ldr	r3, [r3, #0]
 8089c9c:	695b      	ldr	r3, [r3, #20]
 8089c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8089ca2:	2b80      	cmp	r3, #128	; 0x80
 8089ca4:	d12a      	bne.n	8089cfc <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8089ca6:	687b      	ldr	r3, [r7, #4]
 8089ca8:	681b      	ldr	r3, [r3, #0]
 8089caa:	695a      	ldr	r2, [r3, #20]
 8089cac:	687b      	ldr	r3, [r7, #4]
 8089cae:	681b      	ldr	r3, [r3, #0]
 8089cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8089cb4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8089cb6:	687b      	ldr	r3, [r7, #4]
 8089cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089cba:	2b00      	cmp	r3, #0
 8089cbc:	d013      	beq.n	8089ce6 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8089cbe:	687b      	ldr	r3, [r7, #4]
 8089cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089cc2:	4a16      	ldr	r2, [pc, #88]	; (8089d1c <HAL_UART_AbortTransmit_IT+0x9c>)
 8089cc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8089cc6:	687b      	ldr	r3, [r7, #4]
 8089cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089cca:	4618      	mov	r0, r3
 8089ccc:	f7f7 ff91 	bl	8081bf2 <HAL_DMA_Abort_IT>
 8089cd0:	4603      	mov	r3, r0
 8089cd2:	2b00      	cmp	r3, #0
 8089cd4:	d01c      	beq.n	8089d10 <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8089cd6:	687b      	ldr	r3, [r7, #4]
 8089cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8089cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8089cdc:	687a      	ldr	r2, [r7, #4]
 8089cde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8089ce0:	4610      	mov	r0, r2
 8089ce2:	4798      	blx	r3
 8089ce4:	e014      	b.n	8089d10 <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8089ce6:	687b      	ldr	r3, [r7, #4]
 8089ce8:	2200      	movs	r2, #0
 8089cea:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8089cec:	687b      	ldr	r3, [r7, #4]
 8089cee:	2220      	movs	r2, #32
 8089cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8089cf4:	6878      	ldr	r0, [r7, #4]
 8089cf6:	f000 f9a3 	bl	808a040 <HAL_UART_AbortTransmitCpltCallback>
 8089cfa:	e009      	b.n	8089d10 <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8089cfc:	687b      	ldr	r3, [r7, #4]
 8089cfe:	2200      	movs	r2, #0
 8089d00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8089d02:	687b      	ldr	r3, [r7, #4]
 8089d04:	2220      	movs	r2, #32
 8089d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8089d0a:	6878      	ldr	r0, [r7, #4]
 8089d0c:	f000 f998 	bl	808a040 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8089d10:	2300      	movs	r3, #0
}
 8089d12:	4618      	mov	r0, r3
 8089d14:	3708      	adds	r7, #8
 8089d16:	46bd      	mov	sp, r7
 8089d18:	bd80      	pop	{r7, pc}
 8089d1a:	bf00      	nop
 8089d1c:	0808a5e7 	.word	0x0808a5e7

08089d20 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8089d20:	b580      	push	{r7, lr}
 8089d22:	b082      	sub	sp, #8
 8089d24:	af00      	add	r7, sp, #0
 8089d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8089d28:	687b      	ldr	r3, [r7, #4]
 8089d2a:	681b      	ldr	r3, [r3, #0]
 8089d2c:	68da      	ldr	r2, [r3, #12]
 8089d2e:	687b      	ldr	r3, [r7, #4]
 8089d30:	681b      	ldr	r3, [r3, #0]
 8089d32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8089d36:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8089d38:	687b      	ldr	r3, [r7, #4]
 8089d3a:	681b      	ldr	r3, [r3, #0]
 8089d3c:	695a      	ldr	r2, [r3, #20]
 8089d3e:	687b      	ldr	r3, [r7, #4]
 8089d40:	681b      	ldr	r3, [r3, #0]
 8089d42:	f022 0201 	bic.w	r2, r2, #1
 8089d46:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8089d48:	687b      	ldr	r3, [r7, #4]
 8089d4a:	681b      	ldr	r3, [r3, #0]
 8089d4c:	695b      	ldr	r3, [r3, #20]
 8089d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8089d52:	2b40      	cmp	r3, #64	; 0x40
 8089d54:	d12a      	bne.n	8089dac <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8089d56:	687b      	ldr	r3, [r7, #4]
 8089d58:	681b      	ldr	r3, [r3, #0]
 8089d5a:	695a      	ldr	r2, [r3, #20]
 8089d5c:	687b      	ldr	r3, [r7, #4]
 8089d5e:	681b      	ldr	r3, [r3, #0]
 8089d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8089d64:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8089d66:	687b      	ldr	r3, [r7, #4]
 8089d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089d6a:	2b00      	cmp	r3, #0
 8089d6c:	d013      	beq.n	8089d96 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8089d6e:	687b      	ldr	r3, [r7, #4]
 8089d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089d72:	4a16      	ldr	r2, [pc, #88]	; (8089dcc <HAL_UART_AbortReceive_IT+0xac>)
 8089d74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8089d76:	687b      	ldr	r3, [r7, #4]
 8089d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089d7a:	4618      	mov	r0, r3
 8089d7c:	f7f7 ff39 	bl	8081bf2 <HAL_DMA_Abort_IT>
 8089d80:	4603      	mov	r3, r0
 8089d82:	2b00      	cmp	r3, #0
 8089d84:	d01c      	beq.n	8089dc0 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8089d86:	687b      	ldr	r3, [r7, #4]
 8089d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8089d8c:	687a      	ldr	r2, [r7, #4]
 8089d8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8089d90:	4610      	mov	r0, r2
 8089d92:	4798      	blx	r3
 8089d94:	e014      	b.n	8089dc0 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8089d96:	687b      	ldr	r3, [r7, #4]
 8089d98:	2200      	movs	r2, #0
 8089d9a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8089d9c:	687b      	ldr	r3, [r7, #4]
 8089d9e:	2220      	movs	r2, #32
 8089da0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8089da4:	6878      	ldr	r0, [r7, #4]
 8089da6:	f000 f955 	bl	808a054 <HAL_UART_AbortReceiveCpltCallback>
 8089daa:	e009      	b.n	8089dc0 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8089dac:	687b      	ldr	r3, [r7, #4]
 8089dae:	2200      	movs	r2, #0
 8089db0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8089db2:	687b      	ldr	r3, [r7, #4]
 8089db4:	2220      	movs	r2, #32
 8089db6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8089dba:	6878      	ldr	r0, [r7, #4]
 8089dbc:	f000 f94a 	bl	808a054 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8089dc0:	2300      	movs	r3, #0
}
 8089dc2:	4618      	mov	r0, r3
 8089dc4:	3708      	adds	r7, #8
 8089dc6:	46bd      	mov	sp, r7
 8089dc8:	bd80      	pop	{r7, pc}
 8089dca:	bf00      	nop
 8089dcc:	0808a611 	.word	0x0808a611

08089dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8089dd0:	b580      	push	{r7, lr}
 8089dd2:	b088      	sub	sp, #32
 8089dd4:	af00      	add	r7, sp, #0
 8089dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8089dd8:	687b      	ldr	r3, [r7, #4]
 8089dda:	681b      	ldr	r3, [r3, #0]
 8089ddc:	681b      	ldr	r3, [r3, #0]
 8089dde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8089de0:	687b      	ldr	r3, [r7, #4]
 8089de2:	681b      	ldr	r3, [r3, #0]
 8089de4:	68db      	ldr	r3, [r3, #12]
 8089de6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8089de8:	687b      	ldr	r3, [r7, #4]
 8089dea:	681b      	ldr	r3, [r3, #0]
 8089dec:	695b      	ldr	r3, [r3, #20]
 8089dee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8089df0:	2300      	movs	r3, #0
 8089df2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8089df4:	2300      	movs	r3, #0
 8089df6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8089df8:	69fb      	ldr	r3, [r7, #28]
 8089dfa:	f003 030f 	and.w	r3, r3, #15
 8089dfe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8089e00:	693b      	ldr	r3, [r7, #16]
 8089e02:	2b00      	cmp	r3, #0
 8089e04:	d10d      	bne.n	8089e22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8089e06:	69fb      	ldr	r3, [r7, #28]
 8089e08:	f003 0320 	and.w	r3, r3, #32
 8089e0c:	2b00      	cmp	r3, #0
 8089e0e:	d008      	beq.n	8089e22 <HAL_UART_IRQHandler+0x52>
 8089e10:	69bb      	ldr	r3, [r7, #24]
 8089e12:	f003 0320 	and.w	r3, r3, #32
 8089e16:	2b00      	cmp	r3, #0
 8089e18:	d003      	beq.n	8089e22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8089e1a:	6878      	ldr	r0, [r7, #4]
 8089e1c:	f000 fc7b 	bl	808a716 <UART_Receive_IT>
      return;
 8089e20:	e0cc      	b.n	8089fbc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8089e22:	693b      	ldr	r3, [r7, #16]
 8089e24:	2b00      	cmp	r3, #0
 8089e26:	f000 80ab 	beq.w	8089f80 <HAL_UART_IRQHandler+0x1b0>
 8089e2a:	697b      	ldr	r3, [r7, #20]
 8089e2c:	f003 0301 	and.w	r3, r3, #1
 8089e30:	2b00      	cmp	r3, #0
 8089e32:	d105      	bne.n	8089e40 <HAL_UART_IRQHandler+0x70>
 8089e34:	69bb      	ldr	r3, [r7, #24]
 8089e36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8089e3a:	2b00      	cmp	r3, #0
 8089e3c:	f000 80a0 	beq.w	8089f80 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8089e40:	69fb      	ldr	r3, [r7, #28]
 8089e42:	f003 0301 	and.w	r3, r3, #1
 8089e46:	2b00      	cmp	r3, #0
 8089e48:	d00a      	beq.n	8089e60 <HAL_UART_IRQHandler+0x90>
 8089e4a:	69bb      	ldr	r3, [r7, #24]
 8089e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8089e50:	2b00      	cmp	r3, #0
 8089e52:	d005      	beq.n	8089e60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8089e54:	687b      	ldr	r3, [r7, #4]
 8089e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089e58:	f043 0201 	orr.w	r2, r3, #1
 8089e5c:	687b      	ldr	r3, [r7, #4]
 8089e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8089e60:	69fb      	ldr	r3, [r7, #28]
 8089e62:	f003 0304 	and.w	r3, r3, #4
 8089e66:	2b00      	cmp	r3, #0
 8089e68:	d00a      	beq.n	8089e80 <HAL_UART_IRQHandler+0xb0>
 8089e6a:	697b      	ldr	r3, [r7, #20]
 8089e6c:	f003 0301 	and.w	r3, r3, #1
 8089e70:	2b00      	cmp	r3, #0
 8089e72:	d005      	beq.n	8089e80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8089e74:	687b      	ldr	r3, [r7, #4]
 8089e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089e78:	f043 0202 	orr.w	r2, r3, #2
 8089e7c:	687b      	ldr	r3, [r7, #4]
 8089e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8089e80:	69fb      	ldr	r3, [r7, #28]
 8089e82:	f003 0302 	and.w	r3, r3, #2
 8089e86:	2b00      	cmp	r3, #0
 8089e88:	d00a      	beq.n	8089ea0 <HAL_UART_IRQHandler+0xd0>
 8089e8a:	697b      	ldr	r3, [r7, #20]
 8089e8c:	f003 0301 	and.w	r3, r3, #1
 8089e90:	2b00      	cmp	r3, #0
 8089e92:	d005      	beq.n	8089ea0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8089e94:	687b      	ldr	r3, [r7, #4]
 8089e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089e98:	f043 0204 	orr.w	r2, r3, #4
 8089e9c:	687b      	ldr	r3, [r7, #4]
 8089e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8089ea0:	69fb      	ldr	r3, [r7, #28]
 8089ea2:	f003 0308 	and.w	r3, r3, #8
 8089ea6:	2b00      	cmp	r3, #0
 8089ea8:	d00a      	beq.n	8089ec0 <HAL_UART_IRQHandler+0xf0>
 8089eaa:	697b      	ldr	r3, [r7, #20]
 8089eac:	f003 0301 	and.w	r3, r3, #1
 8089eb0:	2b00      	cmp	r3, #0
 8089eb2:	d005      	beq.n	8089ec0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8089eb4:	687b      	ldr	r3, [r7, #4]
 8089eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089eb8:	f043 0208 	orr.w	r2, r3, #8
 8089ebc:	687b      	ldr	r3, [r7, #4]
 8089ebe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8089ec0:	687b      	ldr	r3, [r7, #4]
 8089ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089ec4:	2b00      	cmp	r3, #0
 8089ec6:	d078      	beq.n	8089fba <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8089ec8:	69fb      	ldr	r3, [r7, #28]
 8089eca:	f003 0320 	and.w	r3, r3, #32
 8089ece:	2b00      	cmp	r3, #0
 8089ed0:	d007      	beq.n	8089ee2 <HAL_UART_IRQHandler+0x112>
 8089ed2:	69bb      	ldr	r3, [r7, #24]
 8089ed4:	f003 0320 	and.w	r3, r3, #32
 8089ed8:	2b00      	cmp	r3, #0
 8089eda:	d002      	beq.n	8089ee2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8089edc:	6878      	ldr	r0, [r7, #4]
 8089ede:	f000 fc1a 	bl	808a716 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8089ee2:	687b      	ldr	r3, [r7, #4]
 8089ee4:	681b      	ldr	r3, [r3, #0]
 8089ee6:	695b      	ldr	r3, [r3, #20]
 8089ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8089eec:	2b40      	cmp	r3, #64	; 0x40
 8089eee:	bf0c      	ite	eq
 8089ef0:	2301      	moveq	r3, #1
 8089ef2:	2300      	movne	r3, #0
 8089ef4:	b2db      	uxtb	r3, r3
 8089ef6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8089ef8:	687b      	ldr	r3, [r7, #4]
 8089efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8089efc:	f003 0308 	and.w	r3, r3, #8
 8089f00:	2b00      	cmp	r3, #0
 8089f02:	d102      	bne.n	8089f0a <HAL_UART_IRQHandler+0x13a>
 8089f04:	68fb      	ldr	r3, [r7, #12]
 8089f06:	2b00      	cmp	r3, #0
 8089f08:	d031      	beq.n	8089f6e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8089f0a:	6878      	ldr	r0, [r7, #4]
 8089f0c:	f000 fadf 	bl	808a4ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8089f10:	687b      	ldr	r3, [r7, #4]
 8089f12:	681b      	ldr	r3, [r3, #0]
 8089f14:	695b      	ldr	r3, [r3, #20]
 8089f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8089f1a:	2b40      	cmp	r3, #64	; 0x40
 8089f1c:	d123      	bne.n	8089f66 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8089f1e:	687b      	ldr	r3, [r7, #4]
 8089f20:	681b      	ldr	r3, [r3, #0]
 8089f22:	695a      	ldr	r2, [r3, #20]
 8089f24:	687b      	ldr	r3, [r7, #4]
 8089f26:	681b      	ldr	r3, [r3, #0]
 8089f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8089f2c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8089f2e:	687b      	ldr	r3, [r7, #4]
 8089f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089f32:	2b00      	cmp	r3, #0
 8089f34:	d013      	beq.n	8089f5e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8089f36:	687b      	ldr	r3, [r7, #4]
 8089f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089f3a:	4a22      	ldr	r2, [pc, #136]	; (8089fc4 <HAL_UART_IRQHandler+0x1f4>)
 8089f3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8089f3e:	687b      	ldr	r3, [r7, #4]
 8089f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089f42:	4618      	mov	r0, r3
 8089f44:	f7f7 fe55 	bl	8081bf2 <HAL_DMA_Abort_IT>
 8089f48:	4603      	mov	r3, r0
 8089f4a:	2b00      	cmp	r3, #0
 8089f4c:	d016      	beq.n	8089f7c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8089f4e:	687b      	ldr	r3, [r7, #4]
 8089f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8089f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8089f54:	687a      	ldr	r2, [r7, #4]
 8089f56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8089f58:	4610      	mov	r0, r2
 8089f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8089f5c:	e00e      	b.n	8089f7c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8089f5e:	6878      	ldr	r0, [r7, #4]
 8089f60:	f000 f85a 	bl	808a018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8089f64:	e00a      	b.n	8089f7c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8089f66:	6878      	ldr	r0, [r7, #4]
 8089f68:	f000 f856 	bl	808a018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8089f6c:	e006      	b.n	8089f7c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8089f6e:	6878      	ldr	r0, [r7, #4]
 8089f70:	f000 f852 	bl	808a018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8089f74:	687b      	ldr	r3, [r7, #4]
 8089f76:	2200      	movs	r2, #0
 8089f78:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8089f7a:	e01e      	b.n	8089fba <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8089f7c:	bf00      	nop
    return;
 8089f7e:	e01c      	b.n	8089fba <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8089f80:	69fb      	ldr	r3, [r7, #28]
 8089f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8089f86:	2b00      	cmp	r3, #0
 8089f88:	d008      	beq.n	8089f9c <HAL_UART_IRQHandler+0x1cc>
 8089f8a:	69bb      	ldr	r3, [r7, #24]
 8089f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8089f90:	2b00      	cmp	r3, #0
 8089f92:	d003      	beq.n	8089f9c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8089f94:	6878      	ldr	r0, [r7, #4]
 8089f96:	f000 fb50 	bl	808a63a <UART_Transmit_IT>
    return;
 8089f9a:	e00f      	b.n	8089fbc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8089f9c:	69fb      	ldr	r3, [r7, #28]
 8089f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8089fa2:	2b00      	cmp	r3, #0
 8089fa4:	d00a      	beq.n	8089fbc <HAL_UART_IRQHandler+0x1ec>
 8089fa6:	69bb      	ldr	r3, [r7, #24]
 8089fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8089fac:	2b00      	cmp	r3, #0
 8089fae:	d005      	beq.n	8089fbc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8089fb0:	6878      	ldr	r0, [r7, #4]
 8089fb2:	f000 fb98 	bl	808a6e6 <UART_EndTransmit_IT>
    return;
 8089fb6:	bf00      	nop
 8089fb8:	e000      	b.n	8089fbc <HAL_UART_IRQHandler+0x1ec>
    return;
 8089fba:	bf00      	nop
  }
}
 8089fbc:	3720      	adds	r7, #32
 8089fbe:	46bd      	mov	sp, r7
 8089fc0:	bd80      	pop	{r7, pc}
 8089fc2:	bf00      	nop
 8089fc4:	0808a50b 	.word	0x0808a50b

08089fc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8089fc8:	b480      	push	{r7}
 8089fca:	b083      	sub	sp, #12
 8089fcc:	af00      	add	r7, sp, #0
 8089fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8089fd0:	bf00      	nop
 8089fd2:	370c      	adds	r7, #12
 8089fd4:	46bd      	mov	sp, r7
 8089fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089fda:	4770      	bx	lr

08089fdc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8089fdc:	b480      	push	{r7}
 8089fde:	b083      	sub	sp, #12
 8089fe0:	af00      	add	r7, sp, #0
 8089fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8089fe4:	bf00      	nop
 8089fe6:	370c      	adds	r7, #12
 8089fe8:	46bd      	mov	sp, r7
 8089fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8089fee:	4770      	bx	lr

08089ff0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8089ff0:	b480      	push	{r7}
 8089ff2:	b083      	sub	sp, #12
 8089ff4:	af00      	add	r7, sp, #0
 8089ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8089ff8:	bf00      	nop
 8089ffa:	370c      	adds	r7, #12
 8089ffc:	46bd      	mov	sp, r7
 8089ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a002:	4770      	bx	lr

0808a004 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 808a004:	b480      	push	{r7}
 808a006:	b083      	sub	sp, #12
 808a008:	af00      	add	r7, sp, #0
 808a00a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 808a00c:	bf00      	nop
 808a00e:	370c      	adds	r7, #12
 808a010:	46bd      	mov	sp, r7
 808a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a016:	4770      	bx	lr

0808a018 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 808a018:	b480      	push	{r7}
 808a01a:	b083      	sub	sp, #12
 808a01c:	af00      	add	r7, sp, #0
 808a01e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 808a020:	bf00      	nop
 808a022:	370c      	adds	r7, #12
 808a024:	46bd      	mov	sp, r7
 808a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a02a:	4770      	bx	lr

0808a02c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 808a02c:	b480      	push	{r7}
 808a02e:	b083      	sub	sp, #12
 808a030:	af00      	add	r7, sp, #0
 808a032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 808a034:	bf00      	nop
 808a036:	370c      	adds	r7, #12
 808a038:	46bd      	mov	sp, r7
 808a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a03e:	4770      	bx	lr

0808a040 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 808a040:	b480      	push	{r7}
 808a042:	b083      	sub	sp, #12
 808a044:	af00      	add	r7, sp, #0
 808a046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 808a048:	bf00      	nop
 808a04a:	370c      	adds	r7, #12
 808a04c:	46bd      	mov	sp, r7
 808a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a052:	4770      	bx	lr

0808a054 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 808a054:	b480      	push	{r7}
 808a056:	b083      	sub	sp, #12
 808a058:	af00      	add	r7, sp, #0
 808a05a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 808a05c:	bf00      	nop
 808a05e:	370c      	adds	r7, #12
 808a060:	46bd      	mov	sp, r7
 808a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a066:	4770      	bx	lr

0808a068 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 808a068:	b480      	push	{r7}
 808a06a:	b083      	sub	sp, #12
 808a06c:	af00      	add	r7, sp, #0
 808a06e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 808a070:	687b      	ldr	r3, [r7, #4]
 808a072:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 808a076:	2b01      	cmp	r3, #1
 808a078:	d101      	bne.n	808a07e <HAL_LIN_SendBreak+0x16>
 808a07a:	2302      	movs	r3, #2
 808a07c:	e018      	b.n	808a0b0 <HAL_LIN_SendBreak+0x48>
 808a07e:	687b      	ldr	r3, [r7, #4]
 808a080:	2201      	movs	r2, #1
 808a082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 808a086:	687b      	ldr	r3, [r7, #4]
 808a088:	2224      	movs	r2, #36	; 0x24
 808a08a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Send break characters */
  SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 808a08e:	687b      	ldr	r3, [r7, #4]
 808a090:	681b      	ldr	r3, [r3, #0]
 808a092:	68da      	ldr	r2, [r3, #12]
 808a094:	687b      	ldr	r3, [r7, #4]
 808a096:	681b      	ldr	r3, [r3, #0]
 808a098:	f042 0201 	orr.w	r2, r2, #1
 808a09c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 808a09e:	687b      	ldr	r3, [r7, #4]
 808a0a0:	2220      	movs	r2, #32
 808a0a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 808a0a6:	687b      	ldr	r3, [r7, #4]
 808a0a8:	2200      	movs	r2, #0
 808a0aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 808a0ae:	2300      	movs	r3, #0
}
 808a0b0:	4618      	mov	r0, r3
 808a0b2:	370c      	adds	r7, #12
 808a0b4:	46bd      	mov	sp, r7
 808a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a0ba:	4770      	bx	lr

0808a0bc <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 808a0bc:	b480      	push	{r7}
 808a0be:	b083      	sub	sp, #12
 808a0c0:	af00      	add	r7, sp, #0
 808a0c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 808a0c4:	687b      	ldr	r3, [r7, #4]
 808a0c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 808a0ca:	2b01      	cmp	r3, #1
 808a0cc:	d101      	bne.n	808a0d2 <HAL_MultiProcessor_EnterMuteMode+0x16>
 808a0ce:	2302      	movs	r3, #2
 808a0d0:	e018      	b.n	808a104 <HAL_MultiProcessor_EnterMuteMode+0x48>
 808a0d2:	687b      	ldr	r3, [r7, #4]
 808a0d4:	2201      	movs	r2, #1
 808a0d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 808a0da:	687b      	ldr	r3, [r7, #4]
 808a0dc:	2224      	movs	r2, #36	; 0x24
 808a0de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 808a0e2:	687b      	ldr	r3, [r7, #4]
 808a0e4:	681b      	ldr	r3, [r3, #0]
 808a0e6:	68da      	ldr	r2, [r3, #12]
 808a0e8:	687b      	ldr	r3, [r7, #4]
 808a0ea:	681b      	ldr	r3, [r3, #0]
 808a0ec:	f042 0202 	orr.w	r2, r2, #2
 808a0f0:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 808a0f2:	687b      	ldr	r3, [r7, #4]
 808a0f4:	2220      	movs	r2, #32
 808a0f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 808a0fa:	687b      	ldr	r3, [r7, #4]
 808a0fc:	2200      	movs	r2, #0
 808a0fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 808a102:	2300      	movs	r3, #0
}
 808a104:	4618      	mov	r0, r3
 808a106:	370c      	adds	r7, #12
 808a108:	46bd      	mov	sp, r7
 808a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a10e:	4770      	bx	lr

0808a110 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 808a110:	b480      	push	{r7}
 808a112:	b083      	sub	sp, #12
 808a114:	af00      	add	r7, sp, #0
 808a116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 808a118:	687b      	ldr	r3, [r7, #4]
 808a11a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 808a11e:	2b01      	cmp	r3, #1
 808a120:	d101      	bne.n	808a126 <HAL_MultiProcessor_ExitMuteMode+0x16>
 808a122:	2302      	movs	r3, #2
 808a124:	e018      	b.n	808a158 <HAL_MultiProcessor_ExitMuteMode+0x48>
 808a126:	687b      	ldr	r3, [r7, #4]
 808a128:	2201      	movs	r2, #1
 808a12a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 808a12e:	687b      	ldr	r3, [r7, #4]
 808a130:	2224      	movs	r2, #36	; 0x24
 808a132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 808a136:	687b      	ldr	r3, [r7, #4]
 808a138:	681b      	ldr	r3, [r3, #0]
 808a13a:	68da      	ldr	r2, [r3, #12]
 808a13c:	687b      	ldr	r3, [r7, #4]
 808a13e:	681b      	ldr	r3, [r3, #0]
 808a140:	f022 0202 	bic.w	r2, r2, #2
 808a144:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 808a146:	687b      	ldr	r3, [r7, #4]
 808a148:	2220      	movs	r2, #32
 808a14a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 808a14e:	687b      	ldr	r3, [r7, #4]
 808a150:	2200      	movs	r2, #0
 808a152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 808a156:	2300      	movs	r3, #0
}
 808a158:	4618      	mov	r0, r3
 808a15a:	370c      	adds	r7, #12
 808a15c:	46bd      	mov	sp, r7
 808a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a162:	4770      	bx	lr

0808a164 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 808a164:	b480      	push	{r7}
 808a166:	b085      	sub	sp, #20
 808a168:	af00      	add	r7, sp, #0
 808a16a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 808a16c:	2300      	movs	r3, #0
 808a16e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 808a170:	687b      	ldr	r3, [r7, #4]
 808a172:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 808a176:	2b01      	cmp	r3, #1
 808a178:	d101      	bne.n	808a17e <HAL_HalfDuplex_EnableTransmitter+0x1a>
 808a17a:	2302      	movs	r3, #2
 808a17c:	e020      	b.n	808a1c0 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 808a17e:	687b      	ldr	r3, [r7, #4]
 808a180:	2201      	movs	r2, #1
 808a182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 808a186:	687b      	ldr	r3, [r7, #4]
 808a188:	2224      	movs	r2, #36	; 0x24
 808a18a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 808a18e:	687b      	ldr	r3, [r7, #4]
 808a190:	681b      	ldr	r3, [r3, #0]
 808a192:	68db      	ldr	r3, [r3, #12]
 808a194:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 808a196:	68fb      	ldr	r3, [r7, #12]
 808a198:	f023 030c 	bic.w	r3, r3, #12
 808a19c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 808a19e:	68fb      	ldr	r3, [r7, #12]
 808a1a0:	f043 0308 	orr.w	r3, r3, #8
 808a1a4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 808a1a6:	687b      	ldr	r3, [r7, #4]
 808a1a8:	681b      	ldr	r3, [r3, #0]
 808a1aa:	68fa      	ldr	r2, [r7, #12]
 808a1ac:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 808a1ae:	687b      	ldr	r3, [r7, #4]
 808a1b0:	2220      	movs	r2, #32
 808a1b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 808a1b6:	687b      	ldr	r3, [r7, #4]
 808a1b8:	2200      	movs	r2, #0
 808a1ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 808a1be:	2300      	movs	r3, #0
}
 808a1c0:	4618      	mov	r0, r3
 808a1c2:	3714      	adds	r7, #20
 808a1c4:	46bd      	mov	sp, r7
 808a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a1ca:	4770      	bx	lr

0808a1cc <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 808a1cc:	b480      	push	{r7}
 808a1ce:	b085      	sub	sp, #20
 808a1d0:	af00      	add	r7, sp, #0
 808a1d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 808a1d4:	2300      	movs	r3, #0
 808a1d6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 808a1d8:	687b      	ldr	r3, [r7, #4]
 808a1da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 808a1de:	2b01      	cmp	r3, #1
 808a1e0:	d101      	bne.n	808a1e6 <HAL_HalfDuplex_EnableReceiver+0x1a>
 808a1e2:	2302      	movs	r3, #2
 808a1e4:	e020      	b.n	808a228 <HAL_HalfDuplex_EnableReceiver+0x5c>
 808a1e6:	687b      	ldr	r3, [r7, #4]
 808a1e8:	2201      	movs	r2, #1
 808a1ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 808a1ee:	687b      	ldr	r3, [r7, #4]
 808a1f0:	2224      	movs	r2, #36	; 0x24
 808a1f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 808a1f6:	687b      	ldr	r3, [r7, #4]
 808a1f8:	681b      	ldr	r3, [r3, #0]
 808a1fa:	68db      	ldr	r3, [r3, #12]
 808a1fc:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 808a1fe:	68fb      	ldr	r3, [r7, #12]
 808a200:	f023 030c 	bic.w	r3, r3, #12
 808a204:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 808a206:	68fb      	ldr	r3, [r7, #12]
 808a208:	f043 0304 	orr.w	r3, r3, #4
 808a20c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 808a20e:	687b      	ldr	r3, [r7, #4]
 808a210:	681b      	ldr	r3, [r3, #0]
 808a212:	68fa      	ldr	r2, [r7, #12]
 808a214:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 808a216:	687b      	ldr	r3, [r7, #4]
 808a218:	2220      	movs	r2, #32
 808a21a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 808a21e:	687b      	ldr	r3, [r7, #4]
 808a220:	2200      	movs	r2, #0
 808a222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 808a226:	2300      	movs	r3, #0
}
 808a228:	4618      	mov	r0, r3
 808a22a:	3714      	adds	r7, #20
 808a22c:	46bd      	mov	sp, r7
 808a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a232:	4770      	bx	lr

0808a234 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 808a234:	b480      	push	{r7}
 808a236:	b085      	sub	sp, #20
 808a238:	af00      	add	r7, sp, #0
 808a23a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 808a23c:	2300      	movs	r3, #0
 808a23e:	60fb      	str	r3, [r7, #12]
 808a240:	2300      	movs	r3, #0
 808a242:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 808a244:	687b      	ldr	r3, [r7, #4]
 808a246:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 808a24a:	b2db      	uxtb	r3, r3
 808a24c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 808a24e:	687b      	ldr	r3, [r7, #4]
 808a250:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 808a254:	b2db      	uxtb	r3, r3
 808a256:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 808a258:	68fb      	ldr	r3, [r7, #12]
 808a25a:	b2da      	uxtb	r2, r3
 808a25c:	68bb      	ldr	r3, [r7, #8]
 808a25e:	b2db      	uxtb	r3, r3
 808a260:	4313      	orrs	r3, r2
 808a262:	b2db      	uxtb	r3, r3
}
 808a264:	4618      	mov	r0, r3
 808a266:	3714      	adds	r7, #20
 808a268:	46bd      	mov	sp, r7
 808a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a26e:	4770      	bx	lr

0808a270 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 808a270:	b480      	push	{r7}
 808a272:	b083      	sub	sp, #12
 808a274:	af00      	add	r7, sp, #0
 808a276:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 808a278:	687b      	ldr	r3, [r7, #4]
 808a27a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 808a27c:	4618      	mov	r0, r3
 808a27e:	370c      	adds	r7, #12
 808a280:	46bd      	mov	sp, r7
 808a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a286:	4770      	bx	lr

0808a288 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 808a288:	b580      	push	{r7, lr}
 808a28a:	b084      	sub	sp, #16
 808a28c:	af00      	add	r7, sp, #0
 808a28e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808a290:	687b      	ldr	r3, [r7, #4]
 808a292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a294:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 808a296:	687b      	ldr	r3, [r7, #4]
 808a298:	681b      	ldr	r3, [r3, #0]
 808a29a:	681b      	ldr	r3, [r3, #0]
 808a29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808a2a0:	2b00      	cmp	r3, #0
 808a2a2:	d113      	bne.n	808a2cc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 808a2a4:	68fb      	ldr	r3, [r7, #12]
 808a2a6:	2200      	movs	r2, #0
 808a2a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 808a2aa:	68fb      	ldr	r3, [r7, #12]
 808a2ac:	681b      	ldr	r3, [r3, #0]
 808a2ae:	695a      	ldr	r2, [r3, #20]
 808a2b0:	68fb      	ldr	r3, [r7, #12]
 808a2b2:	681b      	ldr	r3, [r3, #0]
 808a2b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 808a2b8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 808a2ba:	68fb      	ldr	r3, [r7, #12]
 808a2bc:	681b      	ldr	r3, [r3, #0]
 808a2be:	68da      	ldr	r2, [r3, #12]
 808a2c0:	68fb      	ldr	r3, [r7, #12]
 808a2c2:	681b      	ldr	r3, [r3, #0]
 808a2c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 808a2c8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 808a2ca:	e002      	b.n	808a2d2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 808a2cc:	68f8      	ldr	r0, [r7, #12]
 808a2ce:	f7ff fe7b 	bl	8089fc8 <HAL_UART_TxCpltCallback>
}
 808a2d2:	bf00      	nop
 808a2d4:	3710      	adds	r7, #16
 808a2d6:	46bd      	mov	sp, r7
 808a2d8:	bd80      	pop	{r7, pc}

0808a2da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 808a2da:	b580      	push	{r7, lr}
 808a2dc:	b084      	sub	sp, #16
 808a2de:	af00      	add	r7, sp, #0
 808a2e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808a2e2:	687b      	ldr	r3, [r7, #4]
 808a2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a2e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 808a2e8:	68f8      	ldr	r0, [r7, #12]
 808a2ea:	f7ff fe77 	bl	8089fdc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 808a2ee:	bf00      	nop
 808a2f0:	3710      	adds	r7, #16
 808a2f2:	46bd      	mov	sp, r7
 808a2f4:	bd80      	pop	{r7, pc}

0808a2f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 808a2f6:	b580      	push	{r7, lr}
 808a2f8:	b084      	sub	sp, #16
 808a2fa:	af00      	add	r7, sp, #0
 808a2fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808a2fe:	687b      	ldr	r3, [r7, #4]
 808a300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a302:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 808a304:	687b      	ldr	r3, [r7, #4]
 808a306:	681b      	ldr	r3, [r3, #0]
 808a308:	681b      	ldr	r3, [r3, #0]
 808a30a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808a30e:	2b00      	cmp	r3, #0
 808a310:	d11e      	bne.n	808a350 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 808a312:	68fb      	ldr	r3, [r7, #12]
 808a314:	2200      	movs	r2, #0
 808a316:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 808a318:	68fb      	ldr	r3, [r7, #12]
 808a31a:	681b      	ldr	r3, [r3, #0]
 808a31c:	68da      	ldr	r2, [r3, #12]
 808a31e:	68fb      	ldr	r3, [r7, #12]
 808a320:	681b      	ldr	r3, [r3, #0]
 808a322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 808a326:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 808a328:	68fb      	ldr	r3, [r7, #12]
 808a32a:	681b      	ldr	r3, [r3, #0]
 808a32c:	695a      	ldr	r2, [r3, #20]
 808a32e:	68fb      	ldr	r3, [r7, #12]
 808a330:	681b      	ldr	r3, [r3, #0]
 808a332:	f022 0201 	bic.w	r2, r2, #1
 808a336:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 808a338:	68fb      	ldr	r3, [r7, #12]
 808a33a:	681b      	ldr	r3, [r3, #0]
 808a33c:	695a      	ldr	r2, [r3, #20]
 808a33e:	68fb      	ldr	r3, [r7, #12]
 808a340:	681b      	ldr	r3, [r3, #0]
 808a342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 808a346:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 808a348:	68fb      	ldr	r3, [r7, #12]
 808a34a:	2220      	movs	r2, #32
 808a34c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 808a350:	68f8      	ldr	r0, [r7, #12]
 808a352:	f7ff fe4d 	bl	8089ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 808a356:	bf00      	nop
 808a358:	3710      	adds	r7, #16
 808a35a:	46bd      	mov	sp, r7
 808a35c:	bd80      	pop	{r7, pc}

0808a35e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 808a35e:	b580      	push	{r7, lr}
 808a360:	b084      	sub	sp, #16
 808a362:	af00      	add	r7, sp, #0
 808a364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808a366:	687b      	ldr	r3, [r7, #4]
 808a368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a36a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 808a36c:	68f8      	ldr	r0, [r7, #12]
 808a36e:	f7ff fe49 	bl	808a004 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 808a372:	bf00      	nop
 808a374:	3710      	adds	r7, #16
 808a376:	46bd      	mov	sp, r7
 808a378:	bd80      	pop	{r7, pc}

0808a37a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 808a37a:	b580      	push	{r7, lr}
 808a37c:	b084      	sub	sp, #16
 808a37e:	af00      	add	r7, sp, #0
 808a380:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 808a382:	2300      	movs	r3, #0
 808a384:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808a386:	687b      	ldr	r3, [r7, #4]
 808a388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a38a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 808a38c:	68bb      	ldr	r3, [r7, #8]
 808a38e:	681b      	ldr	r3, [r3, #0]
 808a390:	695b      	ldr	r3, [r3, #20]
 808a392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 808a396:	2b80      	cmp	r3, #128	; 0x80
 808a398:	bf0c      	ite	eq
 808a39a:	2301      	moveq	r3, #1
 808a39c:	2300      	movne	r3, #0
 808a39e:	b2db      	uxtb	r3, r3
 808a3a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 808a3a2:	68bb      	ldr	r3, [r7, #8]
 808a3a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 808a3a8:	b2db      	uxtb	r3, r3
 808a3aa:	2b21      	cmp	r3, #33	; 0x21
 808a3ac:	d108      	bne.n	808a3c0 <UART_DMAError+0x46>
 808a3ae:	68fb      	ldr	r3, [r7, #12]
 808a3b0:	2b00      	cmp	r3, #0
 808a3b2:	d005      	beq.n	808a3c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 808a3b4:	68bb      	ldr	r3, [r7, #8]
 808a3b6:	2200      	movs	r2, #0
 808a3b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 808a3ba:	68b8      	ldr	r0, [r7, #8]
 808a3bc:	f000 f871 	bl	808a4a2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 808a3c0:	68bb      	ldr	r3, [r7, #8]
 808a3c2:	681b      	ldr	r3, [r3, #0]
 808a3c4:	695b      	ldr	r3, [r3, #20]
 808a3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 808a3ca:	2b40      	cmp	r3, #64	; 0x40
 808a3cc:	bf0c      	ite	eq
 808a3ce:	2301      	moveq	r3, #1
 808a3d0:	2300      	movne	r3, #0
 808a3d2:	b2db      	uxtb	r3, r3
 808a3d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 808a3d6:	68bb      	ldr	r3, [r7, #8]
 808a3d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 808a3dc:	b2db      	uxtb	r3, r3
 808a3de:	2b22      	cmp	r3, #34	; 0x22
 808a3e0:	d108      	bne.n	808a3f4 <UART_DMAError+0x7a>
 808a3e2:	68fb      	ldr	r3, [r7, #12]
 808a3e4:	2b00      	cmp	r3, #0
 808a3e6:	d005      	beq.n	808a3f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 808a3e8:	68bb      	ldr	r3, [r7, #8]
 808a3ea:	2200      	movs	r2, #0
 808a3ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 808a3ee:	68b8      	ldr	r0, [r7, #8]
 808a3f0:	f000 f86d 	bl	808a4ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 808a3f4:	68bb      	ldr	r3, [r7, #8]
 808a3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808a3f8:	f043 0210 	orr.w	r2, r3, #16
 808a3fc:	68bb      	ldr	r3, [r7, #8]
 808a3fe:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 808a400:	68b8      	ldr	r0, [r7, #8]
 808a402:	f7ff fe09 	bl	808a018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 808a406:	bf00      	nop
 808a408:	3710      	adds	r7, #16
 808a40a:	46bd      	mov	sp, r7
 808a40c:	bd80      	pop	{r7, pc}

0808a40e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 808a40e:	b580      	push	{r7, lr}
 808a410:	b084      	sub	sp, #16
 808a412:	af00      	add	r7, sp, #0
 808a414:	60f8      	str	r0, [r7, #12]
 808a416:	60b9      	str	r1, [r7, #8]
 808a418:	603b      	str	r3, [r7, #0]
 808a41a:	4613      	mov	r3, r2
 808a41c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 808a41e:	e02c      	b.n	808a47a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 808a420:	69bb      	ldr	r3, [r7, #24]
 808a422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 808a426:	d028      	beq.n	808a47a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 808a428:	69bb      	ldr	r3, [r7, #24]
 808a42a:	2b00      	cmp	r3, #0
 808a42c:	d007      	beq.n	808a43e <UART_WaitOnFlagUntilTimeout+0x30>
 808a42e:	f7f6 fd39 	bl	8080ea4 <HAL_GetTick>
 808a432:	4602      	mov	r2, r0
 808a434:	683b      	ldr	r3, [r7, #0]
 808a436:	1ad3      	subs	r3, r2, r3
 808a438:	69ba      	ldr	r2, [r7, #24]
 808a43a:	429a      	cmp	r2, r3
 808a43c:	d21d      	bcs.n	808a47a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 808a43e:	68fb      	ldr	r3, [r7, #12]
 808a440:	681b      	ldr	r3, [r3, #0]
 808a442:	68da      	ldr	r2, [r3, #12]
 808a444:	68fb      	ldr	r3, [r7, #12]
 808a446:	681b      	ldr	r3, [r3, #0]
 808a448:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 808a44c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 808a44e:	68fb      	ldr	r3, [r7, #12]
 808a450:	681b      	ldr	r3, [r3, #0]
 808a452:	695a      	ldr	r2, [r3, #20]
 808a454:	68fb      	ldr	r3, [r7, #12]
 808a456:	681b      	ldr	r3, [r3, #0]
 808a458:	f022 0201 	bic.w	r2, r2, #1
 808a45c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 808a45e:	68fb      	ldr	r3, [r7, #12]
 808a460:	2220      	movs	r2, #32
 808a462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 808a466:	68fb      	ldr	r3, [r7, #12]
 808a468:	2220      	movs	r2, #32
 808a46a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 808a46e:	68fb      	ldr	r3, [r7, #12]
 808a470:	2200      	movs	r2, #0
 808a472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 808a476:	2303      	movs	r3, #3
 808a478:	e00f      	b.n	808a49a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 808a47a:	68fb      	ldr	r3, [r7, #12]
 808a47c:	681b      	ldr	r3, [r3, #0]
 808a47e:	681a      	ldr	r2, [r3, #0]
 808a480:	68bb      	ldr	r3, [r7, #8]
 808a482:	4013      	ands	r3, r2
 808a484:	68ba      	ldr	r2, [r7, #8]
 808a486:	429a      	cmp	r2, r3
 808a488:	bf0c      	ite	eq
 808a48a:	2301      	moveq	r3, #1
 808a48c:	2300      	movne	r3, #0
 808a48e:	b2db      	uxtb	r3, r3
 808a490:	461a      	mov	r2, r3
 808a492:	79fb      	ldrb	r3, [r7, #7]
 808a494:	429a      	cmp	r2, r3
 808a496:	d0c3      	beq.n	808a420 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 808a498:	2300      	movs	r3, #0
}
 808a49a:	4618      	mov	r0, r3
 808a49c:	3710      	adds	r7, #16
 808a49e:	46bd      	mov	sp, r7
 808a4a0:	bd80      	pop	{r7, pc}

0808a4a2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 808a4a2:	b480      	push	{r7}
 808a4a4:	b083      	sub	sp, #12
 808a4a6:	af00      	add	r7, sp, #0
 808a4a8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 808a4aa:	687b      	ldr	r3, [r7, #4]
 808a4ac:	681b      	ldr	r3, [r3, #0]
 808a4ae:	68da      	ldr	r2, [r3, #12]
 808a4b0:	687b      	ldr	r3, [r7, #4]
 808a4b2:	681b      	ldr	r3, [r3, #0]
 808a4b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 808a4b8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 808a4ba:	687b      	ldr	r3, [r7, #4]
 808a4bc:	2220      	movs	r2, #32
 808a4be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 808a4c2:	bf00      	nop
 808a4c4:	370c      	adds	r7, #12
 808a4c6:	46bd      	mov	sp, r7
 808a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a4cc:	4770      	bx	lr

0808a4ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 808a4ce:	b480      	push	{r7}
 808a4d0:	b083      	sub	sp, #12
 808a4d2:	af00      	add	r7, sp, #0
 808a4d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 808a4d6:	687b      	ldr	r3, [r7, #4]
 808a4d8:	681b      	ldr	r3, [r3, #0]
 808a4da:	68da      	ldr	r2, [r3, #12]
 808a4dc:	687b      	ldr	r3, [r7, #4]
 808a4de:	681b      	ldr	r3, [r3, #0]
 808a4e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 808a4e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 808a4e6:	687b      	ldr	r3, [r7, #4]
 808a4e8:	681b      	ldr	r3, [r3, #0]
 808a4ea:	695a      	ldr	r2, [r3, #20]
 808a4ec:	687b      	ldr	r3, [r7, #4]
 808a4ee:	681b      	ldr	r3, [r3, #0]
 808a4f0:	f022 0201 	bic.w	r2, r2, #1
 808a4f4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 808a4f6:	687b      	ldr	r3, [r7, #4]
 808a4f8:	2220      	movs	r2, #32
 808a4fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 808a4fe:	bf00      	nop
 808a500:	370c      	adds	r7, #12
 808a502:	46bd      	mov	sp, r7
 808a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a508:	4770      	bx	lr

0808a50a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 808a50a:	b580      	push	{r7, lr}
 808a50c:	b084      	sub	sp, #16
 808a50e:	af00      	add	r7, sp, #0
 808a510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808a512:	687b      	ldr	r3, [r7, #4]
 808a514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a516:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 808a518:	68fb      	ldr	r3, [r7, #12]
 808a51a:	2200      	movs	r2, #0
 808a51c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 808a51e:	68fb      	ldr	r3, [r7, #12]
 808a520:	2200      	movs	r2, #0
 808a522:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 808a524:	68f8      	ldr	r0, [r7, #12]
 808a526:	f7ff fd77 	bl	808a018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 808a52a:	bf00      	nop
 808a52c:	3710      	adds	r7, #16
 808a52e:	46bd      	mov	sp, r7
 808a530:	bd80      	pop	{r7, pc}

0808a532 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 808a532:	b580      	push	{r7, lr}
 808a534:	b084      	sub	sp, #16
 808a536:	af00      	add	r7, sp, #0
 808a538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808a53a:	687b      	ldr	r3, [r7, #4]
 808a53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a53e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 808a540:	68fb      	ldr	r3, [r7, #12]
 808a542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a544:	2200      	movs	r2, #0
 808a546:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 808a548:	68fb      	ldr	r3, [r7, #12]
 808a54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a54c:	2b00      	cmp	r3, #0
 808a54e:	d004      	beq.n	808a55a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 808a550:	68fb      	ldr	r3, [r7, #12]
 808a552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808a556:	2b00      	cmp	r3, #0
 808a558:	d114      	bne.n	808a584 <UART_DMATxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 808a55a:	68fb      	ldr	r3, [r7, #12]
 808a55c:	2200      	movs	r2, #0
 808a55e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 808a560:	68fb      	ldr	r3, [r7, #12]
 808a562:	2200      	movs	r2, #0
 808a564:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 808a566:	68fb      	ldr	r3, [r7, #12]
 808a568:	2200      	movs	r2, #0
 808a56a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 808a56c:	68fb      	ldr	r3, [r7, #12]
 808a56e:	2220      	movs	r2, #32
 808a570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 808a574:	68fb      	ldr	r3, [r7, #12]
 808a576:	2220      	movs	r2, #32
 808a578:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 808a57c:	68f8      	ldr	r0, [r7, #12]
 808a57e:	f7ff fd55 	bl	808a02c <HAL_UART_AbortCpltCallback>
 808a582:	e000      	b.n	808a586 <UART_DMATxAbortCallback+0x54>
      return;
 808a584:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 808a586:	3710      	adds	r7, #16
 808a588:	46bd      	mov	sp, r7
 808a58a:	bd80      	pop	{r7, pc}

0808a58c <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 808a58c:	b580      	push	{r7, lr}
 808a58e:	b084      	sub	sp, #16
 808a590:	af00      	add	r7, sp, #0
 808a592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808a594:	687b      	ldr	r3, [r7, #4]
 808a596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a598:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 808a59a:	68fb      	ldr	r3, [r7, #12]
 808a59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a59e:	2200      	movs	r2, #0
 808a5a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 808a5a2:	68fb      	ldr	r3, [r7, #12]
 808a5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a5a6:	2b00      	cmp	r3, #0
 808a5a8:	d004      	beq.n	808a5b4 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 808a5aa:	68fb      	ldr	r3, [r7, #12]
 808a5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a5ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808a5b0:	2b00      	cmp	r3, #0
 808a5b2:	d114      	bne.n	808a5de <UART_DMARxAbortCallback+0x52>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 808a5b4:	68fb      	ldr	r3, [r7, #12]
 808a5b6:	2200      	movs	r2, #0
 808a5b8:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 808a5ba:	68fb      	ldr	r3, [r7, #12]
 808a5bc:	2200      	movs	r2, #0
 808a5be:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 808a5c0:	68fb      	ldr	r3, [r7, #12]
 808a5c2:	2200      	movs	r2, #0
 808a5c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 808a5c6:	68fb      	ldr	r3, [r7, #12]
 808a5c8:	2220      	movs	r2, #32
 808a5ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 808a5ce:	68fb      	ldr	r3, [r7, #12]
 808a5d0:	2220      	movs	r2, #32
 808a5d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 808a5d6:	68f8      	ldr	r0, [r7, #12]
 808a5d8:	f7ff fd28 	bl	808a02c <HAL_UART_AbortCpltCallback>
 808a5dc:	e000      	b.n	808a5e0 <UART_DMARxAbortCallback+0x54>
      return;
 808a5de:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 808a5e0:	3710      	adds	r7, #16
 808a5e2:	46bd      	mov	sp, r7
 808a5e4:	bd80      	pop	{r7, pc}

0808a5e6 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 808a5e6:	b580      	push	{r7, lr}
 808a5e8:	b084      	sub	sp, #16
 808a5ea:	af00      	add	r7, sp, #0
 808a5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808a5ee:	687b      	ldr	r3, [r7, #4]
 808a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a5f2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 808a5f4:	68fb      	ldr	r3, [r7, #12]
 808a5f6:	2200      	movs	r2, #0
 808a5f8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 808a5fa:	68fb      	ldr	r3, [r7, #12]
 808a5fc:	2220      	movs	r2, #32
 808a5fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 808a602:	68f8      	ldr	r0, [r7, #12]
 808a604:	f7ff fd1c 	bl	808a040 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 808a608:	bf00      	nop
 808a60a:	3710      	adds	r7, #16
 808a60c:	46bd      	mov	sp, r7
 808a60e:	bd80      	pop	{r7, pc}

0808a610 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 808a610:	b580      	push	{r7, lr}
 808a612:	b084      	sub	sp, #16
 808a614:	af00      	add	r7, sp, #0
 808a616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808a618:	687b      	ldr	r3, [r7, #4]
 808a61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a61c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 808a61e:	68fb      	ldr	r3, [r7, #12]
 808a620:	2200      	movs	r2, #0
 808a622:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 808a624:	68fb      	ldr	r3, [r7, #12]
 808a626:	2220      	movs	r2, #32
 808a628:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 808a62c:	68f8      	ldr	r0, [r7, #12]
 808a62e:	f7ff fd11 	bl	808a054 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 808a632:	bf00      	nop
 808a634:	3710      	adds	r7, #16
 808a636:	46bd      	mov	sp, r7
 808a638:	bd80      	pop	{r7, pc}

0808a63a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 808a63a:	b480      	push	{r7}
 808a63c:	b085      	sub	sp, #20
 808a63e:	af00      	add	r7, sp, #0
 808a640:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 808a642:	687b      	ldr	r3, [r7, #4]
 808a644:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 808a648:	b2db      	uxtb	r3, r3
 808a64a:	2b21      	cmp	r3, #33	; 0x21
 808a64c:	d144      	bne.n	808a6d8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 808a64e:	687b      	ldr	r3, [r7, #4]
 808a650:	689b      	ldr	r3, [r3, #8]
 808a652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 808a656:	d11a      	bne.n	808a68e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 808a658:	687b      	ldr	r3, [r7, #4]
 808a65a:	6a1b      	ldr	r3, [r3, #32]
 808a65c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 808a65e:	68fb      	ldr	r3, [r7, #12]
 808a660:	881b      	ldrh	r3, [r3, #0]
 808a662:	461a      	mov	r2, r3
 808a664:	687b      	ldr	r3, [r7, #4]
 808a666:	681b      	ldr	r3, [r3, #0]
 808a668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 808a66c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 808a66e:	687b      	ldr	r3, [r7, #4]
 808a670:	691b      	ldr	r3, [r3, #16]
 808a672:	2b00      	cmp	r3, #0
 808a674:	d105      	bne.n	808a682 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 808a676:	687b      	ldr	r3, [r7, #4]
 808a678:	6a1b      	ldr	r3, [r3, #32]
 808a67a:	1c9a      	adds	r2, r3, #2
 808a67c:	687b      	ldr	r3, [r7, #4]
 808a67e:	621a      	str	r2, [r3, #32]
 808a680:	e00e      	b.n	808a6a0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 808a682:	687b      	ldr	r3, [r7, #4]
 808a684:	6a1b      	ldr	r3, [r3, #32]
 808a686:	1c5a      	adds	r2, r3, #1
 808a688:	687b      	ldr	r3, [r7, #4]
 808a68a:	621a      	str	r2, [r3, #32]
 808a68c:	e008      	b.n	808a6a0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 808a68e:	687b      	ldr	r3, [r7, #4]
 808a690:	6a1b      	ldr	r3, [r3, #32]
 808a692:	1c59      	adds	r1, r3, #1
 808a694:	687a      	ldr	r2, [r7, #4]
 808a696:	6211      	str	r1, [r2, #32]
 808a698:	781a      	ldrb	r2, [r3, #0]
 808a69a:	687b      	ldr	r3, [r7, #4]
 808a69c:	681b      	ldr	r3, [r3, #0]
 808a69e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 808a6a0:	687b      	ldr	r3, [r7, #4]
 808a6a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 808a6a4:	b29b      	uxth	r3, r3
 808a6a6:	3b01      	subs	r3, #1
 808a6a8:	b29b      	uxth	r3, r3
 808a6aa:	687a      	ldr	r2, [r7, #4]
 808a6ac:	4619      	mov	r1, r3
 808a6ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 808a6b0:	2b00      	cmp	r3, #0
 808a6b2:	d10f      	bne.n	808a6d4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 808a6b4:	687b      	ldr	r3, [r7, #4]
 808a6b6:	681b      	ldr	r3, [r3, #0]
 808a6b8:	68da      	ldr	r2, [r3, #12]
 808a6ba:	687b      	ldr	r3, [r7, #4]
 808a6bc:	681b      	ldr	r3, [r3, #0]
 808a6be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 808a6c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 808a6c4:	687b      	ldr	r3, [r7, #4]
 808a6c6:	681b      	ldr	r3, [r3, #0]
 808a6c8:	68da      	ldr	r2, [r3, #12]
 808a6ca:	687b      	ldr	r3, [r7, #4]
 808a6cc:	681b      	ldr	r3, [r3, #0]
 808a6ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 808a6d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 808a6d4:	2300      	movs	r3, #0
 808a6d6:	e000      	b.n	808a6da <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 808a6d8:	2302      	movs	r3, #2
  }
}
 808a6da:	4618      	mov	r0, r3
 808a6dc:	3714      	adds	r7, #20
 808a6de:	46bd      	mov	sp, r7
 808a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 808a6e4:	4770      	bx	lr

0808a6e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 808a6e6:	b580      	push	{r7, lr}
 808a6e8:	b082      	sub	sp, #8
 808a6ea:	af00      	add	r7, sp, #0
 808a6ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 808a6ee:	687b      	ldr	r3, [r7, #4]
 808a6f0:	681b      	ldr	r3, [r3, #0]
 808a6f2:	68da      	ldr	r2, [r3, #12]
 808a6f4:	687b      	ldr	r3, [r7, #4]
 808a6f6:	681b      	ldr	r3, [r3, #0]
 808a6f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 808a6fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 808a6fe:	687b      	ldr	r3, [r7, #4]
 808a700:	2220      	movs	r2, #32
 808a702:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 808a706:	6878      	ldr	r0, [r7, #4]
 808a708:	f7ff fc5e 	bl	8089fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 808a70c:	2300      	movs	r3, #0
}
 808a70e:	4618      	mov	r0, r3
 808a710:	3708      	adds	r7, #8
 808a712:	46bd      	mov	sp, r7
 808a714:	bd80      	pop	{r7, pc}

0808a716 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 808a716:	b580      	push	{r7, lr}
 808a718:	b084      	sub	sp, #16
 808a71a:	af00      	add	r7, sp, #0
 808a71c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 808a71e:	687b      	ldr	r3, [r7, #4]
 808a720:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 808a724:	b2db      	uxtb	r3, r3
 808a726:	2b22      	cmp	r3, #34	; 0x22
 808a728:	d171      	bne.n	808a80e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 808a72a:	687b      	ldr	r3, [r7, #4]
 808a72c:	689b      	ldr	r3, [r3, #8]
 808a72e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 808a732:	d123      	bne.n	808a77c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 808a734:	687b      	ldr	r3, [r7, #4]
 808a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a738:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 808a73a:	687b      	ldr	r3, [r7, #4]
 808a73c:	691b      	ldr	r3, [r3, #16]
 808a73e:	2b00      	cmp	r3, #0
 808a740:	d10e      	bne.n	808a760 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 808a742:	687b      	ldr	r3, [r7, #4]
 808a744:	681b      	ldr	r3, [r3, #0]
 808a746:	685b      	ldr	r3, [r3, #4]
 808a748:	b29b      	uxth	r3, r3
 808a74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808a74e:	b29a      	uxth	r2, r3
 808a750:	68fb      	ldr	r3, [r7, #12]
 808a752:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 808a754:	687b      	ldr	r3, [r7, #4]
 808a756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a758:	1c9a      	adds	r2, r3, #2
 808a75a:	687b      	ldr	r3, [r7, #4]
 808a75c:	629a      	str	r2, [r3, #40]	; 0x28
 808a75e:	e029      	b.n	808a7b4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 808a760:	687b      	ldr	r3, [r7, #4]
 808a762:	681b      	ldr	r3, [r3, #0]
 808a764:	685b      	ldr	r3, [r3, #4]
 808a766:	b29b      	uxth	r3, r3
 808a768:	b2db      	uxtb	r3, r3
 808a76a:	b29a      	uxth	r2, r3
 808a76c:	68fb      	ldr	r3, [r7, #12]
 808a76e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 808a770:	687b      	ldr	r3, [r7, #4]
 808a772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a774:	1c5a      	adds	r2, r3, #1
 808a776:	687b      	ldr	r3, [r7, #4]
 808a778:	629a      	str	r2, [r3, #40]	; 0x28
 808a77a:	e01b      	b.n	808a7b4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 808a77c:	687b      	ldr	r3, [r7, #4]
 808a77e:	691b      	ldr	r3, [r3, #16]
 808a780:	2b00      	cmp	r3, #0
 808a782:	d10a      	bne.n	808a79a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 808a784:	687b      	ldr	r3, [r7, #4]
 808a786:	681b      	ldr	r3, [r3, #0]
 808a788:	6858      	ldr	r0, [r3, #4]
 808a78a:	687b      	ldr	r3, [r7, #4]
 808a78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a78e:	1c59      	adds	r1, r3, #1
 808a790:	687a      	ldr	r2, [r7, #4]
 808a792:	6291      	str	r1, [r2, #40]	; 0x28
 808a794:	b2c2      	uxtb	r2, r0
 808a796:	701a      	strb	r2, [r3, #0]
 808a798:	e00c      	b.n	808a7b4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 808a79a:	687b      	ldr	r3, [r7, #4]
 808a79c:	681b      	ldr	r3, [r3, #0]
 808a79e:	685b      	ldr	r3, [r3, #4]
 808a7a0:	b2da      	uxtb	r2, r3
 808a7a2:	687b      	ldr	r3, [r7, #4]
 808a7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a7a6:	1c58      	adds	r0, r3, #1
 808a7a8:	6879      	ldr	r1, [r7, #4]
 808a7aa:	6288      	str	r0, [r1, #40]	; 0x28
 808a7ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 808a7b0:	b2d2      	uxtb	r2, r2
 808a7b2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 808a7b4:	687b      	ldr	r3, [r7, #4]
 808a7b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 808a7b8:	b29b      	uxth	r3, r3
 808a7ba:	3b01      	subs	r3, #1
 808a7bc:	b29b      	uxth	r3, r3
 808a7be:	687a      	ldr	r2, [r7, #4]
 808a7c0:	4619      	mov	r1, r3
 808a7c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 808a7c4:	2b00      	cmp	r3, #0
 808a7c6:	d120      	bne.n	808a80a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 808a7c8:	687b      	ldr	r3, [r7, #4]
 808a7ca:	681b      	ldr	r3, [r3, #0]
 808a7cc:	68da      	ldr	r2, [r3, #12]
 808a7ce:	687b      	ldr	r3, [r7, #4]
 808a7d0:	681b      	ldr	r3, [r3, #0]
 808a7d2:	f022 0220 	bic.w	r2, r2, #32
 808a7d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 808a7d8:	687b      	ldr	r3, [r7, #4]
 808a7da:	681b      	ldr	r3, [r3, #0]
 808a7dc:	68da      	ldr	r2, [r3, #12]
 808a7de:	687b      	ldr	r3, [r7, #4]
 808a7e0:	681b      	ldr	r3, [r3, #0]
 808a7e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 808a7e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 808a7e8:	687b      	ldr	r3, [r7, #4]
 808a7ea:	681b      	ldr	r3, [r3, #0]
 808a7ec:	695a      	ldr	r2, [r3, #20]
 808a7ee:	687b      	ldr	r3, [r7, #4]
 808a7f0:	681b      	ldr	r3, [r3, #0]
 808a7f2:	f022 0201 	bic.w	r2, r2, #1
 808a7f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 808a7f8:	687b      	ldr	r3, [r7, #4]
 808a7fa:	2220      	movs	r2, #32
 808a7fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 808a800:	6878      	ldr	r0, [r7, #4]
 808a802:	f7ff fbf5 	bl	8089ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 808a806:	2300      	movs	r3, #0
 808a808:	e002      	b.n	808a810 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 808a80a:	2300      	movs	r3, #0
 808a80c:	e000      	b.n	808a810 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 808a80e:	2302      	movs	r3, #2
  }
}
 808a810:	4618      	mov	r0, r3
 808a812:	3710      	adds	r7, #16
 808a814:	46bd      	mov	sp, r7
 808a816:	bd80      	pop	{r7, pc}

0808a818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 808a818:	b5b0      	push	{r4, r5, r7, lr}
 808a81a:	b084      	sub	sp, #16
 808a81c:	af00      	add	r7, sp, #0
 808a81e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 808a820:	687b      	ldr	r3, [r7, #4]
 808a822:	681b      	ldr	r3, [r3, #0]
 808a824:	691b      	ldr	r3, [r3, #16]
 808a826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 808a82a:	687b      	ldr	r3, [r7, #4]
 808a82c:	68da      	ldr	r2, [r3, #12]
 808a82e:	687b      	ldr	r3, [r7, #4]
 808a830:	681b      	ldr	r3, [r3, #0]
 808a832:	430a      	orrs	r2, r1
 808a834:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 808a836:	687b      	ldr	r3, [r7, #4]
 808a838:	689a      	ldr	r2, [r3, #8]
 808a83a:	687b      	ldr	r3, [r7, #4]
 808a83c:	691b      	ldr	r3, [r3, #16]
 808a83e:	431a      	orrs	r2, r3
 808a840:	687b      	ldr	r3, [r7, #4]
 808a842:	695b      	ldr	r3, [r3, #20]
 808a844:	431a      	orrs	r2, r3
 808a846:	687b      	ldr	r3, [r7, #4]
 808a848:	69db      	ldr	r3, [r3, #28]
 808a84a:	4313      	orrs	r3, r2
 808a84c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 808a84e:	687b      	ldr	r3, [r7, #4]
 808a850:	681b      	ldr	r3, [r3, #0]
 808a852:	68db      	ldr	r3, [r3, #12]
 808a854:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 808a858:	f023 030c 	bic.w	r3, r3, #12
 808a85c:	687a      	ldr	r2, [r7, #4]
 808a85e:	6812      	ldr	r2, [r2, #0]
 808a860:	68f9      	ldr	r1, [r7, #12]
 808a862:	430b      	orrs	r3, r1
 808a864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 808a866:	687b      	ldr	r3, [r7, #4]
 808a868:	681b      	ldr	r3, [r3, #0]
 808a86a:	695b      	ldr	r3, [r3, #20]
 808a86c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 808a870:	687b      	ldr	r3, [r7, #4]
 808a872:	699a      	ldr	r2, [r3, #24]
 808a874:	687b      	ldr	r3, [r7, #4]
 808a876:	681b      	ldr	r3, [r3, #0]
 808a878:	430a      	orrs	r2, r1
 808a87a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 808a87c:	687b      	ldr	r3, [r7, #4]
 808a87e:	69db      	ldr	r3, [r3, #28]
 808a880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 808a884:	f040 80e4 	bne.w	808aa50 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 808a888:	687b      	ldr	r3, [r7, #4]
 808a88a:	681b      	ldr	r3, [r3, #0]
 808a88c:	4aab      	ldr	r2, [pc, #684]	; (808ab3c <UART_SetConfig+0x324>)
 808a88e:	4293      	cmp	r3, r2
 808a890:	d004      	beq.n	808a89c <UART_SetConfig+0x84>
 808a892:	687b      	ldr	r3, [r7, #4]
 808a894:	681b      	ldr	r3, [r3, #0]
 808a896:	4aaa      	ldr	r2, [pc, #680]	; (808ab40 <UART_SetConfig+0x328>)
 808a898:	4293      	cmp	r3, r2
 808a89a:	d16c      	bne.n	808a976 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 808a89c:	f7f8 fdb2 	bl	8083404 <HAL_RCC_GetPCLK2Freq>
 808a8a0:	4602      	mov	r2, r0
 808a8a2:	4613      	mov	r3, r2
 808a8a4:	009b      	lsls	r3, r3, #2
 808a8a6:	4413      	add	r3, r2
 808a8a8:	009a      	lsls	r2, r3, #2
 808a8aa:	441a      	add	r2, r3
 808a8ac:	687b      	ldr	r3, [r7, #4]
 808a8ae:	685b      	ldr	r3, [r3, #4]
 808a8b0:	005b      	lsls	r3, r3, #1
 808a8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 808a8b6:	4aa3      	ldr	r2, [pc, #652]	; (808ab44 <UART_SetConfig+0x32c>)
 808a8b8:	fba2 2303 	umull	r2, r3, r2, r3
 808a8bc:	095b      	lsrs	r3, r3, #5
 808a8be:	011c      	lsls	r4, r3, #4
 808a8c0:	f7f8 fda0 	bl	8083404 <HAL_RCC_GetPCLK2Freq>
 808a8c4:	4602      	mov	r2, r0
 808a8c6:	4613      	mov	r3, r2
 808a8c8:	009b      	lsls	r3, r3, #2
 808a8ca:	4413      	add	r3, r2
 808a8cc:	009a      	lsls	r2, r3, #2
 808a8ce:	441a      	add	r2, r3
 808a8d0:	687b      	ldr	r3, [r7, #4]
 808a8d2:	685b      	ldr	r3, [r3, #4]
 808a8d4:	005b      	lsls	r3, r3, #1
 808a8d6:	fbb2 f5f3 	udiv	r5, r2, r3
 808a8da:	f7f8 fd93 	bl	8083404 <HAL_RCC_GetPCLK2Freq>
 808a8de:	4602      	mov	r2, r0
 808a8e0:	4613      	mov	r3, r2
 808a8e2:	009b      	lsls	r3, r3, #2
 808a8e4:	4413      	add	r3, r2
 808a8e6:	009a      	lsls	r2, r3, #2
 808a8e8:	441a      	add	r2, r3
 808a8ea:	687b      	ldr	r3, [r7, #4]
 808a8ec:	685b      	ldr	r3, [r3, #4]
 808a8ee:	005b      	lsls	r3, r3, #1
 808a8f0:	fbb2 f3f3 	udiv	r3, r2, r3
 808a8f4:	4a93      	ldr	r2, [pc, #588]	; (808ab44 <UART_SetConfig+0x32c>)
 808a8f6:	fba2 2303 	umull	r2, r3, r2, r3
 808a8fa:	095b      	lsrs	r3, r3, #5
 808a8fc:	2264      	movs	r2, #100	; 0x64
 808a8fe:	fb02 f303 	mul.w	r3, r2, r3
 808a902:	1aeb      	subs	r3, r5, r3
 808a904:	00db      	lsls	r3, r3, #3
 808a906:	3332      	adds	r3, #50	; 0x32
 808a908:	4a8e      	ldr	r2, [pc, #568]	; (808ab44 <UART_SetConfig+0x32c>)
 808a90a:	fba2 2303 	umull	r2, r3, r2, r3
 808a90e:	095b      	lsrs	r3, r3, #5
 808a910:	005b      	lsls	r3, r3, #1
 808a912:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 808a916:	441c      	add	r4, r3
 808a918:	f7f8 fd74 	bl	8083404 <HAL_RCC_GetPCLK2Freq>
 808a91c:	4602      	mov	r2, r0
 808a91e:	4613      	mov	r3, r2
 808a920:	009b      	lsls	r3, r3, #2
 808a922:	4413      	add	r3, r2
 808a924:	009a      	lsls	r2, r3, #2
 808a926:	441a      	add	r2, r3
 808a928:	687b      	ldr	r3, [r7, #4]
 808a92a:	685b      	ldr	r3, [r3, #4]
 808a92c:	005b      	lsls	r3, r3, #1
 808a92e:	fbb2 f5f3 	udiv	r5, r2, r3
 808a932:	f7f8 fd67 	bl	8083404 <HAL_RCC_GetPCLK2Freq>
 808a936:	4602      	mov	r2, r0
 808a938:	4613      	mov	r3, r2
 808a93a:	009b      	lsls	r3, r3, #2
 808a93c:	4413      	add	r3, r2
 808a93e:	009a      	lsls	r2, r3, #2
 808a940:	441a      	add	r2, r3
 808a942:	687b      	ldr	r3, [r7, #4]
 808a944:	685b      	ldr	r3, [r3, #4]
 808a946:	005b      	lsls	r3, r3, #1
 808a948:	fbb2 f3f3 	udiv	r3, r2, r3
 808a94c:	4a7d      	ldr	r2, [pc, #500]	; (808ab44 <UART_SetConfig+0x32c>)
 808a94e:	fba2 2303 	umull	r2, r3, r2, r3
 808a952:	095b      	lsrs	r3, r3, #5
 808a954:	2264      	movs	r2, #100	; 0x64
 808a956:	fb02 f303 	mul.w	r3, r2, r3
 808a95a:	1aeb      	subs	r3, r5, r3
 808a95c:	00db      	lsls	r3, r3, #3
 808a95e:	3332      	adds	r3, #50	; 0x32
 808a960:	4a78      	ldr	r2, [pc, #480]	; (808ab44 <UART_SetConfig+0x32c>)
 808a962:	fba2 2303 	umull	r2, r3, r2, r3
 808a966:	095b      	lsrs	r3, r3, #5
 808a968:	f003 0207 	and.w	r2, r3, #7
 808a96c:	687b      	ldr	r3, [r7, #4]
 808a96e:	681b      	ldr	r3, [r3, #0]
 808a970:	4422      	add	r2, r4
 808a972:	609a      	str	r2, [r3, #8]
 808a974:	e154      	b.n	808ac20 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 808a976:	f7f8 fd31 	bl	80833dc <HAL_RCC_GetPCLK1Freq>
 808a97a:	4602      	mov	r2, r0
 808a97c:	4613      	mov	r3, r2
 808a97e:	009b      	lsls	r3, r3, #2
 808a980:	4413      	add	r3, r2
 808a982:	009a      	lsls	r2, r3, #2
 808a984:	441a      	add	r2, r3
 808a986:	687b      	ldr	r3, [r7, #4]
 808a988:	685b      	ldr	r3, [r3, #4]
 808a98a:	005b      	lsls	r3, r3, #1
 808a98c:	fbb2 f3f3 	udiv	r3, r2, r3
 808a990:	4a6c      	ldr	r2, [pc, #432]	; (808ab44 <UART_SetConfig+0x32c>)
 808a992:	fba2 2303 	umull	r2, r3, r2, r3
 808a996:	095b      	lsrs	r3, r3, #5
 808a998:	011c      	lsls	r4, r3, #4
 808a99a:	f7f8 fd1f 	bl	80833dc <HAL_RCC_GetPCLK1Freq>
 808a99e:	4602      	mov	r2, r0
 808a9a0:	4613      	mov	r3, r2
 808a9a2:	009b      	lsls	r3, r3, #2
 808a9a4:	4413      	add	r3, r2
 808a9a6:	009a      	lsls	r2, r3, #2
 808a9a8:	441a      	add	r2, r3
 808a9aa:	687b      	ldr	r3, [r7, #4]
 808a9ac:	685b      	ldr	r3, [r3, #4]
 808a9ae:	005b      	lsls	r3, r3, #1
 808a9b0:	fbb2 f5f3 	udiv	r5, r2, r3
 808a9b4:	f7f8 fd12 	bl	80833dc <HAL_RCC_GetPCLK1Freq>
 808a9b8:	4602      	mov	r2, r0
 808a9ba:	4613      	mov	r3, r2
 808a9bc:	009b      	lsls	r3, r3, #2
 808a9be:	4413      	add	r3, r2
 808a9c0:	009a      	lsls	r2, r3, #2
 808a9c2:	441a      	add	r2, r3
 808a9c4:	687b      	ldr	r3, [r7, #4]
 808a9c6:	685b      	ldr	r3, [r3, #4]
 808a9c8:	005b      	lsls	r3, r3, #1
 808a9ca:	fbb2 f3f3 	udiv	r3, r2, r3
 808a9ce:	4a5d      	ldr	r2, [pc, #372]	; (808ab44 <UART_SetConfig+0x32c>)
 808a9d0:	fba2 2303 	umull	r2, r3, r2, r3
 808a9d4:	095b      	lsrs	r3, r3, #5
 808a9d6:	2264      	movs	r2, #100	; 0x64
 808a9d8:	fb02 f303 	mul.w	r3, r2, r3
 808a9dc:	1aeb      	subs	r3, r5, r3
 808a9de:	00db      	lsls	r3, r3, #3
 808a9e0:	3332      	adds	r3, #50	; 0x32
 808a9e2:	4a58      	ldr	r2, [pc, #352]	; (808ab44 <UART_SetConfig+0x32c>)
 808a9e4:	fba2 2303 	umull	r2, r3, r2, r3
 808a9e8:	095b      	lsrs	r3, r3, #5
 808a9ea:	005b      	lsls	r3, r3, #1
 808a9ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 808a9f0:	441c      	add	r4, r3
 808a9f2:	f7f8 fcf3 	bl	80833dc <HAL_RCC_GetPCLK1Freq>
 808a9f6:	4602      	mov	r2, r0
 808a9f8:	4613      	mov	r3, r2
 808a9fa:	009b      	lsls	r3, r3, #2
 808a9fc:	4413      	add	r3, r2
 808a9fe:	009a      	lsls	r2, r3, #2
 808aa00:	441a      	add	r2, r3
 808aa02:	687b      	ldr	r3, [r7, #4]
 808aa04:	685b      	ldr	r3, [r3, #4]
 808aa06:	005b      	lsls	r3, r3, #1
 808aa08:	fbb2 f5f3 	udiv	r5, r2, r3
 808aa0c:	f7f8 fce6 	bl	80833dc <HAL_RCC_GetPCLK1Freq>
 808aa10:	4602      	mov	r2, r0
 808aa12:	4613      	mov	r3, r2
 808aa14:	009b      	lsls	r3, r3, #2
 808aa16:	4413      	add	r3, r2
 808aa18:	009a      	lsls	r2, r3, #2
 808aa1a:	441a      	add	r2, r3
 808aa1c:	687b      	ldr	r3, [r7, #4]
 808aa1e:	685b      	ldr	r3, [r3, #4]
 808aa20:	005b      	lsls	r3, r3, #1
 808aa22:	fbb2 f3f3 	udiv	r3, r2, r3
 808aa26:	4a47      	ldr	r2, [pc, #284]	; (808ab44 <UART_SetConfig+0x32c>)
 808aa28:	fba2 2303 	umull	r2, r3, r2, r3
 808aa2c:	095b      	lsrs	r3, r3, #5
 808aa2e:	2264      	movs	r2, #100	; 0x64
 808aa30:	fb02 f303 	mul.w	r3, r2, r3
 808aa34:	1aeb      	subs	r3, r5, r3
 808aa36:	00db      	lsls	r3, r3, #3
 808aa38:	3332      	adds	r3, #50	; 0x32
 808aa3a:	4a42      	ldr	r2, [pc, #264]	; (808ab44 <UART_SetConfig+0x32c>)
 808aa3c:	fba2 2303 	umull	r2, r3, r2, r3
 808aa40:	095b      	lsrs	r3, r3, #5
 808aa42:	f003 0207 	and.w	r2, r3, #7
 808aa46:	687b      	ldr	r3, [r7, #4]
 808aa48:	681b      	ldr	r3, [r3, #0]
 808aa4a:	4422      	add	r2, r4
 808aa4c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 808aa4e:	e0e7      	b.n	808ac20 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 808aa50:	687b      	ldr	r3, [r7, #4]
 808aa52:	681b      	ldr	r3, [r3, #0]
 808aa54:	4a39      	ldr	r2, [pc, #228]	; (808ab3c <UART_SetConfig+0x324>)
 808aa56:	4293      	cmp	r3, r2
 808aa58:	d004      	beq.n	808aa64 <UART_SetConfig+0x24c>
 808aa5a:	687b      	ldr	r3, [r7, #4]
 808aa5c:	681b      	ldr	r3, [r3, #0]
 808aa5e:	4a38      	ldr	r2, [pc, #224]	; (808ab40 <UART_SetConfig+0x328>)
 808aa60:	4293      	cmp	r3, r2
 808aa62:	d171      	bne.n	808ab48 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 808aa64:	f7f8 fcce 	bl	8083404 <HAL_RCC_GetPCLK2Freq>
 808aa68:	4602      	mov	r2, r0
 808aa6a:	4613      	mov	r3, r2
 808aa6c:	009b      	lsls	r3, r3, #2
 808aa6e:	4413      	add	r3, r2
 808aa70:	009a      	lsls	r2, r3, #2
 808aa72:	441a      	add	r2, r3
 808aa74:	687b      	ldr	r3, [r7, #4]
 808aa76:	685b      	ldr	r3, [r3, #4]
 808aa78:	009b      	lsls	r3, r3, #2
 808aa7a:	fbb2 f3f3 	udiv	r3, r2, r3
 808aa7e:	4a31      	ldr	r2, [pc, #196]	; (808ab44 <UART_SetConfig+0x32c>)
 808aa80:	fba2 2303 	umull	r2, r3, r2, r3
 808aa84:	095b      	lsrs	r3, r3, #5
 808aa86:	011c      	lsls	r4, r3, #4
 808aa88:	f7f8 fcbc 	bl	8083404 <HAL_RCC_GetPCLK2Freq>
 808aa8c:	4602      	mov	r2, r0
 808aa8e:	4613      	mov	r3, r2
 808aa90:	009b      	lsls	r3, r3, #2
 808aa92:	4413      	add	r3, r2
 808aa94:	009a      	lsls	r2, r3, #2
 808aa96:	441a      	add	r2, r3
 808aa98:	687b      	ldr	r3, [r7, #4]
 808aa9a:	685b      	ldr	r3, [r3, #4]
 808aa9c:	009b      	lsls	r3, r3, #2
 808aa9e:	fbb2 f5f3 	udiv	r5, r2, r3
 808aaa2:	f7f8 fcaf 	bl	8083404 <HAL_RCC_GetPCLK2Freq>
 808aaa6:	4602      	mov	r2, r0
 808aaa8:	4613      	mov	r3, r2
 808aaaa:	009b      	lsls	r3, r3, #2
 808aaac:	4413      	add	r3, r2
 808aaae:	009a      	lsls	r2, r3, #2
 808aab0:	441a      	add	r2, r3
 808aab2:	687b      	ldr	r3, [r7, #4]
 808aab4:	685b      	ldr	r3, [r3, #4]
 808aab6:	009b      	lsls	r3, r3, #2
 808aab8:	fbb2 f3f3 	udiv	r3, r2, r3
 808aabc:	4a21      	ldr	r2, [pc, #132]	; (808ab44 <UART_SetConfig+0x32c>)
 808aabe:	fba2 2303 	umull	r2, r3, r2, r3
 808aac2:	095b      	lsrs	r3, r3, #5
 808aac4:	2264      	movs	r2, #100	; 0x64
 808aac6:	fb02 f303 	mul.w	r3, r2, r3
 808aaca:	1aeb      	subs	r3, r5, r3
 808aacc:	011b      	lsls	r3, r3, #4
 808aace:	3332      	adds	r3, #50	; 0x32
 808aad0:	4a1c      	ldr	r2, [pc, #112]	; (808ab44 <UART_SetConfig+0x32c>)
 808aad2:	fba2 2303 	umull	r2, r3, r2, r3
 808aad6:	095b      	lsrs	r3, r3, #5
 808aad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 808aadc:	441c      	add	r4, r3
 808aade:	f7f8 fc91 	bl	8083404 <HAL_RCC_GetPCLK2Freq>
 808aae2:	4602      	mov	r2, r0
 808aae4:	4613      	mov	r3, r2
 808aae6:	009b      	lsls	r3, r3, #2
 808aae8:	4413      	add	r3, r2
 808aaea:	009a      	lsls	r2, r3, #2
 808aaec:	441a      	add	r2, r3
 808aaee:	687b      	ldr	r3, [r7, #4]
 808aaf0:	685b      	ldr	r3, [r3, #4]
 808aaf2:	009b      	lsls	r3, r3, #2
 808aaf4:	fbb2 f5f3 	udiv	r5, r2, r3
 808aaf8:	f7f8 fc84 	bl	8083404 <HAL_RCC_GetPCLK2Freq>
 808aafc:	4602      	mov	r2, r0
 808aafe:	4613      	mov	r3, r2
 808ab00:	009b      	lsls	r3, r3, #2
 808ab02:	4413      	add	r3, r2
 808ab04:	009a      	lsls	r2, r3, #2
 808ab06:	441a      	add	r2, r3
 808ab08:	687b      	ldr	r3, [r7, #4]
 808ab0a:	685b      	ldr	r3, [r3, #4]
 808ab0c:	009b      	lsls	r3, r3, #2
 808ab0e:	fbb2 f3f3 	udiv	r3, r2, r3
 808ab12:	4a0c      	ldr	r2, [pc, #48]	; (808ab44 <UART_SetConfig+0x32c>)
 808ab14:	fba2 2303 	umull	r2, r3, r2, r3
 808ab18:	095b      	lsrs	r3, r3, #5
 808ab1a:	2264      	movs	r2, #100	; 0x64
 808ab1c:	fb02 f303 	mul.w	r3, r2, r3
 808ab20:	1aeb      	subs	r3, r5, r3
 808ab22:	011b      	lsls	r3, r3, #4
 808ab24:	3332      	adds	r3, #50	; 0x32
 808ab26:	4a07      	ldr	r2, [pc, #28]	; (808ab44 <UART_SetConfig+0x32c>)
 808ab28:	fba2 2303 	umull	r2, r3, r2, r3
 808ab2c:	095b      	lsrs	r3, r3, #5
 808ab2e:	f003 020f 	and.w	r2, r3, #15
 808ab32:	687b      	ldr	r3, [r7, #4]
 808ab34:	681b      	ldr	r3, [r3, #0]
 808ab36:	4422      	add	r2, r4
 808ab38:	609a      	str	r2, [r3, #8]
 808ab3a:	e071      	b.n	808ac20 <UART_SetConfig+0x408>
 808ab3c:	40011000 	.word	0x40011000
 808ab40:	40011400 	.word	0x40011400
 808ab44:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 808ab48:	f7f8 fc48 	bl	80833dc <HAL_RCC_GetPCLK1Freq>
 808ab4c:	4602      	mov	r2, r0
 808ab4e:	4613      	mov	r3, r2
 808ab50:	009b      	lsls	r3, r3, #2
 808ab52:	4413      	add	r3, r2
 808ab54:	009a      	lsls	r2, r3, #2
 808ab56:	441a      	add	r2, r3
 808ab58:	687b      	ldr	r3, [r7, #4]
 808ab5a:	685b      	ldr	r3, [r3, #4]
 808ab5c:	009b      	lsls	r3, r3, #2
 808ab5e:	fbb2 f3f3 	udiv	r3, r2, r3
 808ab62:	4a31      	ldr	r2, [pc, #196]	; (808ac28 <UART_SetConfig+0x410>)
 808ab64:	fba2 2303 	umull	r2, r3, r2, r3
 808ab68:	095b      	lsrs	r3, r3, #5
 808ab6a:	011c      	lsls	r4, r3, #4
 808ab6c:	f7f8 fc36 	bl	80833dc <HAL_RCC_GetPCLK1Freq>
 808ab70:	4602      	mov	r2, r0
 808ab72:	4613      	mov	r3, r2
 808ab74:	009b      	lsls	r3, r3, #2
 808ab76:	4413      	add	r3, r2
 808ab78:	009a      	lsls	r2, r3, #2
 808ab7a:	441a      	add	r2, r3
 808ab7c:	687b      	ldr	r3, [r7, #4]
 808ab7e:	685b      	ldr	r3, [r3, #4]
 808ab80:	009b      	lsls	r3, r3, #2
 808ab82:	fbb2 f5f3 	udiv	r5, r2, r3
 808ab86:	f7f8 fc29 	bl	80833dc <HAL_RCC_GetPCLK1Freq>
 808ab8a:	4602      	mov	r2, r0
 808ab8c:	4613      	mov	r3, r2
 808ab8e:	009b      	lsls	r3, r3, #2
 808ab90:	4413      	add	r3, r2
 808ab92:	009a      	lsls	r2, r3, #2
 808ab94:	441a      	add	r2, r3
 808ab96:	687b      	ldr	r3, [r7, #4]
 808ab98:	685b      	ldr	r3, [r3, #4]
 808ab9a:	009b      	lsls	r3, r3, #2
 808ab9c:	fbb2 f3f3 	udiv	r3, r2, r3
 808aba0:	4a21      	ldr	r2, [pc, #132]	; (808ac28 <UART_SetConfig+0x410>)
 808aba2:	fba2 2303 	umull	r2, r3, r2, r3
 808aba6:	095b      	lsrs	r3, r3, #5
 808aba8:	2264      	movs	r2, #100	; 0x64
 808abaa:	fb02 f303 	mul.w	r3, r2, r3
 808abae:	1aeb      	subs	r3, r5, r3
 808abb0:	011b      	lsls	r3, r3, #4
 808abb2:	3332      	adds	r3, #50	; 0x32
 808abb4:	4a1c      	ldr	r2, [pc, #112]	; (808ac28 <UART_SetConfig+0x410>)
 808abb6:	fba2 2303 	umull	r2, r3, r2, r3
 808abba:	095b      	lsrs	r3, r3, #5
 808abbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 808abc0:	441c      	add	r4, r3
 808abc2:	f7f8 fc0b 	bl	80833dc <HAL_RCC_GetPCLK1Freq>
 808abc6:	4602      	mov	r2, r0
 808abc8:	4613      	mov	r3, r2
 808abca:	009b      	lsls	r3, r3, #2
 808abcc:	4413      	add	r3, r2
 808abce:	009a      	lsls	r2, r3, #2
 808abd0:	441a      	add	r2, r3
 808abd2:	687b      	ldr	r3, [r7, #4]
 808abd4:	685b      	ldr	r3, [r3, #4]
 808abd6:	009b      	lsls	r3, r3, #2
 808abd8:	fbb2 f5f3 	udiv	r5, r2, r3
 808abdc:	f7f8 fbfe 	bl	80833dc <HAL_RCC_GetPCLK1Freq>
 808abe0:	4602      	mov	r2, r0
 808abe2:	4613      	mov	r3, r2
 808abe4:	009b      	lsls	r3, r3, #2
 808abe6:	4413      	add	r3, r2
 808abe8:	009a      	lsls	r2, r3, #2
 808abea:	441a      	add	r2, r3
 808abec:	687b      	ldr	r3, [r7, #4]
 808abee:	685b      	ldr	r3, [r3, #4]
 808abf0:	009b      	lsls	r3, r3, #2
 808abf2:	fbb2 f3f3 	udiv	r3, r2, r3
 808abf6:	4a0c      	ldr	r2, [pc, #48]	; (808ac28 <UART_SetConfig+0x410>)
 808abf8:	fba2 2303 	umull	r2, r3, r2, r3
 808abfc:	095b      	lsrs	r3, r3, #5
 808abfe:	2264      	movs	r2, #100	; 0x64
 808ac00:	fb02 f303 	mul.w	r3, r2, r3
 808ac04:	1aeb      	subs	r3, r5, r3
 808ac06:	011b      	lsls	r3, r3, #4
 808ac08:	3332      	adds	r3, #50	; 0x32
 808ac0a:	4a07      	ldr	r2, [pc, #28]	; (808ac28 <UART_SetConfig+0x410>)
 808ac0c:	fba2 2303 	umull	r2, r3, r2, r3
 808ac10:	095b      	lsrs	r3, r3, #5
 808ac12:	f003 020f 	and.w	r2, r3, #15
 808ac16:	687b      	ldr	r3, [r7, #4]
 808ac18:	681b      	ldr	r3, [r3, #0]
 808ac1a:	4422      	add	r2, r4
 808ac1c:	609a      	str	r2, [r3, #8]
}
 808ac1e:	e7ff      	b.n	808ac20 <UART_SetConfig+0x408>
 808ac20:	bf00      	nop
 808ac22:	3710      	adds	r7, #16
 808ac24:	46bd      	mov	sp, r7
 808ac26:	bdb0      	pop	{r4, r5, r7, pc}
 808ac28:	51eb851f 	.word	0x51eb851f

0808ac2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 808ac2c:	b5b0      	push	{r4, r5, r7, lr}
 808ac2e:	b0be      	sub	sp, #248	; 0xf8
 808ac30:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	uint32_t tim_value = 0;
 808ac32:	2300      	movs	r3, #0
 808ac34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 808ac38:	f7f6 f894 	bl	8080d64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 808ac3c:	f000 f872 	bl	808ad24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 808ac40:	f7f5 fad6 	bl	80801f0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 808ac44:	f7f5 ffcc 	bl	8080be0 <MX_USART1_UART_Init>
	MX_TIM5_Init();
 808ac48:	f7f5 ff3a 	bl	8080ac0 <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	__HAL_RCC_TIM5_CLK_ENABLE();					//enable clock for timer5
 808ac4c:	2300      	movs	r3, #0
 808ac4e:	607b      	str	r3, [r7, #4]
 808ac50:	4b2d      	ldr	r3, [pc, #180]	; (808ad08 <main+0xdc>)
 808ac52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808ac54:	4a2c      	ldr	r2, [pc, #176]	; (808ad08 <main+0xdc>)
 808ac56:	f043 0308 	orr.w	r3, r3, #8
 808ac5a:	6413      	str	r3, [r2, #64]	; 0x40
 808ac5c:	4b2a      	ldr	r3, [pc, #168]	; (808ad08 <main+0xdc>)
 808ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808ac60:	f003 0308 	and.w	r3, r3, #8
 808ac64:	607b      	str	r3, [r7, #4]
 808ac66:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); 	//enable receive interrupt for UART
 808ac68:	4b28      	ldr	r3, [pc, #160]	; (808ad0c <main+0xe0>)
 808ac6a:	681b      	ldr	r3, [r3, #0]
 808ac6c:	68da      	ldr	r2, [r3, #12]
 808ac6e:	4b27      	ldr	r3, [pc, #156]	; (808ad0c <main+0xe0>)
 808ac70:	681b      	ldr	r3, [r3, #0]
 808ac72:	f042 0220 	orr.w	r2, r2, #32
 808ac76:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC); 	//enable transmission complete interrupt for UART
 808ac78:	4b24      	ldr	r3, [pc, #144]	; (808ad0c <main+0xe0>)
 808ac7a:	681b      	ldr	r3, [r3, #0]
 808ac7c:	68da      	ldr	r2, [r3, #12]
 808ac7e:	4b23      	ldr	r3, [pc, #140]	; (808ad0c <main+0xe0>)
 808ac80:	681b      	ldr	r3, [r3, #0]
 808ac82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 808ac86:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start(&htim5);
 808ac88:	4821      	ldr	r0, [pc, #132]	; (808ad10 <main+0xe4>)
 808ac8a:	f7f8 fd20 	bl	80836ce <HAL_TIM_Base_Start>
	//qui misurare il tempo di esecuzione dell'algoritmo


	//SHA Test Stat

	tim_value = strlen(output_buffer);
 808ac8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 808ac92:	4618      	mov	r0, r3
 808ac94:	f000 f8b8 	bl	808ae08 <strlen>
 808ac98:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	SHA_INFO sha_info;
	sha_stream(&sha_info, input_vector);
 808ac9c:	f107 0308 	add.w	r3, r7, #8
 808aca0:	491c      	ldr	r1, [pc, #112]	; (808ad14 <main+0xe8>)
 808aca2:	4618      	mov	r0, r3
 808aca4:	f7f5 fd7a 	bl	808079c <sha_stream>
	sprintf(output_buffer,"%08lx %08lx %08lx %08lx %08lx\n",sha_info.digest[0], sha_info.digest[1], sha_info.digest[2],sha_info.digest[3], sha_info.digest[4]);
 808aca8:	68bc      	ldr	r4, [r7, #8]
 808acaa:	68fd      	ldr	r5, [r7, #12]
 808acac:	693b      	ldr	r3, [r7, #16]
 808acae:	697a      	ldr	r2, [r7, #20]
 808acb0:	69b9      	ldr	r1, [r7, #24]
 808acb2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 808acb6:	9102      	str	r1, [sp, #8]
 808acb8:	9201      	str	r2, [sp, #4]
 808acba:	9300      	str	r3, [sp, #0]
 808acbc:	462b      	mov	r3, r5
 808acbe:	4622      	mov	r2, r4
 808acc0:	4915      	ldr	r1, [pc, #84]	; (808ad18 <main+0xec>)
 808acc2:	f000 fadf 	bl	808b284 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) output_buffer, sizeof(output_buffer), HAL_MAX_DELAY);
 808acc6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 808acca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808acce:	2280      	movs	r2, #128	; 0x80
 808acd0:	480e      	ldr	r0, [pc, #56]	; (808ad0c <main+0xe0>)
 808acd2:	f7fe fa49 	bl	8089168 <HAL_UART_Transmit>

	//SHA Test End
	HAL_Delay(1000);
 808acd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808acda:	f7f6 f927 	bl	8080f2c <HAL_Delay>
	tim_value = TIM5->CNT;
 808acde:	4b0f      	ldr	r3, [pc, #60]	; (808ad1c <main+0xf0>)
 808ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808ace2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	sprintf(output_buffer,"Execution Time is %lu\n", tim_value);
 808ace6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 808acea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 808acee:	490c      	ldr	r1, [pc, #48]	; (808ad20 <main+0xf4>)
 808acf0:	4618      	mov	r0, r3
 808acf2:	f000 fac7 	bl	808b284 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) output_buffer, sizeof(output_buffer), HAL_MAX_DELAY);
 808acf6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 808acfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808acfe:	2280      	movs	r2, #128	; 0x80
 808ad00:	4802      	ldr	r0, [pc, #8]	; (808ad0c <main+0xe0>)
 808ad02:	f7fe fa31 	bl	8089168 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while(1);
 808ad06:	e7fe      	b.n	808ad06 <main+0xda>
 808ad08:	40023800 	.word	0x40023800
 808ad0c:	200190e0 	.word	0x200190e0
 808ad10:	200190a0 	.word	0x200190a0
 808ad14:	2000000c 	.word	0x2000000c
 808ad18:	0808bab0 	.word	0x0808bab0
 808ad1c:	40000c00 	.word	0x40000c00
 808ad20:	0808bad0 	.word	0x0808bad0

0808ad24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 808ad24:	b580      	push	{r7, lr}
 808ad26:	b094      	sub	sp, #80	; 0x50
 808ad28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 808ad2a:	f107 0320 	add.w	r3, r7, #32
 808ad2e:	2230      	movs	r2, #48	; 0x30
 808ad30:	2100      	movs	r1, #0
 808ad32:	4618      	mov	r0, r3
 808ad34:	f000 fa9d 	bl	808b272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 808ad38:	f107 030c 	add.w	r3, r7, #12
 808ad3c:	2200      	movs	r2, #0
 808ad3e:	601a      	str	r2, [r3, #0]
 808ad40:	605a      	str	r2, [r3, #4]
 808ad42:	609a      	str	r2, [r3, #8]
 808ad44:	60da      	str	r2, [r3, #12]
 808ad46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 808ad48:	2300      	movs	r3, #0
 808ad4a:	60bb      	str	r3, [r7, #8]
 808ad4c:	4b28      	ldr	r3, [pc, #160]	; (808adf0 <SystemClock_Config+0xcc>)
 808ad4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808ad50:	4a27      	ldr	r2, [pc, #156]	; (808adf0 <SystemClock_Config+0xcc>)
 808ad52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 808ad56:	6413      	str	r3, [r2, #64]	; 0x40
 808ad58:	4b25      	ldr	r3, [pc, #148]	; (808adf0 <SystemClock_Config+0xcc>)
 808ad5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808ad5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808ad60:	60bb      	str	r3, [r7, #8]
 808ad62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 808ad64:	2300      	movs	r3, #0
 808ad66:	607b      	str	r3, [r7, #4]
 808ad68:	4b22      	ldr	r3, [pc, #136]	; (808adf4 <SystemClock_Config+0xd0>)
 808ad6a:	681b      	ldr	r3, [r3, #0]
 808ad6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 808ad70:	4a20      	ldr	r2, [pc, #128]	; (808adf4 <SystemClock_Config+0xd0>)
 808ad72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 808ad76:	6013      	str	r3, [r2, #0]
 808ad78:	4b1e      	ldr	r3, [pc, #120]	; (808adf4 <SystemClock_Config+0xd0>)
 808ad7a:	681b      	ldr	r3, [r3, #0]
 808ad7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 808ad80:	607b      	str	r3, [r7, #4]
 808ad82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 808ad84:	2302      	movs	r3, #2
 808ad86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 808ad88:	2301      	movs	r3, #1
 808ad8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 808ad8c:	2310      	movs	r3, #16
 808ad8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 808ad90:	2302      	movs	r3, #2
 808ad92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 808ad94:	2300      	movs	r3, #0
 808ad96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 808ad98:	2310      	movs	r3, #16
 808ad9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 808ad9c:	2364      	movs	r3, #100	; 0x64
 808ad9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 808ada0:	2302      	movs	r3, #2
 808ada2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 808ada4:	2304      	movs	r3, #4
 808ada6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 808ada8:	f107 0320 	add.w	r3, r7, #32
 808adac:	4618      	mov	r0, r3
 808adae:	f7f7 feb3 	bl	8082b18 <HAL_RCC_OscConfig>
 808adb2:	4603      	mov	r3, r0
 808adb4:	2b00      	cmp	r3, #0
 808adb6:	d001      	beq.n	808adbc <SystemClock_Config+0x98>
  {
    Error_Handler();
 808adb8:	f000 f81e 	bl	808adf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 808adbc:	230f      	movs	r3, #15
 808adbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 808adc0:	2302      	movs	r3, #2
 808adc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 808adc4:	2300      	movs	r3, #0
 808adc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 808adc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 808adcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 808adce:	2300      	movs	r3, #0
 808add0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 808add2:	f107 030c 	add.w	r3, r7, #12
 808add6:	2101      	movs	r1, #1
 808add8:	4618      	mov	r0, r3
 808adda:	f7f8 f8df 	bl	8082f9c <HAL_RCC_ClockConfig>
 808adde:	4603      	mov	r3, r0
 808ade0:	2b00      	cmp	r3, #0
 808ade2:	d001      	beq.n	808ade8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 808ade4:	f000 f808 	bl	808adf8 <Error_Handler>
  }

}
 808ade8:	bf00      	nop
 808adea:	3750      	adds	r7, #80	; 0x50
 808adec:	46bd      	mov	sp, r7
 808adee:	bd80      	pop	{r7, pc}
 808adf0:	40023800 	.word	0x40023800
 808adf4:	40007000 	.word	0x40007000

0808adf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 808adf8:	b480      	push	{r7}
 808adfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 808adfc:	bf00      	nop
 808adfe:	46bd      	mov	sp, r7
 808ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 808ae04:	4770      	bx	lr
 808ae06:	bf00      	nop

0808ae08 <strlen>:
 808ae08:	4603      	mov	r3, r0
 808ae0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 808ae0e:	2a00      	cmp	r2, #0
 808ae10:	d1fb      	bne.n	808ae0a <strlen+0x2>
 808ae12:	1a18      	subs	r0, r3, r0
 808ae14:	3801      	subs	r0, #1
 808ae16:	4770      	bx	lr
	...

0808ae20 <memchr>:
 808ae20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 808ae24:	2a10      	cmp	r2, #16
 808ae26:	db2b      	blt.n	808ae80 <memchr+0x60>
 808ae28:	f010 0f07 	tst.w	r0, #7
 808ae2c:	d008      	beq.n	808ae40 <memchr+0x20>
 808ae2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 808ae32:	3a01      	subs	r2, #1
 808ae34:	428b      	cmp	r3, r1
 808ae36:	d02d      	beq.n	808ae94 <memchr+0x74>
 808ae38:	f010 0f07 	tst.w	r0, #7
 808ae3c:	b342      	cbz	r2, 808ae90 <memchr+0x70>
 808ae3e:	d1f6      	bne.n	808ae2e <memchr+0xe>
 808ae40:	b4f0      	push	{r4, r5, r6, r7}
 808ae42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 808ae46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 808ae4a:	f022 0407 	bic.w	r4, r2, #7
 808ae4e:	f07f 0700 	mvns.w	r7, #0
 808ae52:	2300      	movs	r3, #0
 808ae54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 808ae58:	3c08      	subs	r4, #8
 808ae5a:	ea85 0501 	eor.w	r5, r5, r1
 808ae5e:	ea86 0601 	eor.w	r6, r6, r1
 808ae62:	fa85 f547 	uadd8	r5, r5, r7
 808ae66:	faa3 f587 	sel	r5, r3, r7
 808ae6a:	fa86 f647 	uadd8	r6, r6, r7
 808ae6e:	faa5 f687 	sel	r6, r5, r7
 808ae72:	b98e      	cbnz	r6, 808ae98 <memchr+0x78>
 808ae74:	d1ee      	bne.n	808ae54 <memchr+0x34>
 808ae76:	bcf0      	pop	{r4, r5, r6, r7}
 808ae78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 808ae7c:	f002 0207 	and.w	r2, r2, #7
 808ae80:	b132      	cbz	r2, 808ae90 <memchr+0x70>
 808ae82:	f810 3b01 	ldrb.w	r3, [r0], #1
 808ae86:	3a01      	subs	r2, #1
 808ae88:	ea83 0301 	eor.w	r3, r3, r1
 808ae8c:	b113      	cbz	r3, 808ae94 <memchr+0x74>
 808ae8e:	d1f8      	bne.n	808ae82 <memchr+0x62>
 808ae90:	2000      	movs	r0, #0
 808ae92:	4770      	bx	lr
 808ae94:	3801      	subs	r0, #1
 808ae96:	4770      	bx	lr
 808ae98:	2d00      	cmp	r5, #0
 808ae9a:	bf06      	itte	eq
 808ae9c:	4635      	moveq	r5, r6
 808ae9e:	3803      	subeq	r0, #3
 808aea0:	3807      	subne	r0, #7
 808aea2:	f015 0f01 	tst.w	r5, #1
 808aea6:	d107      	bne.n	808aeb8 <memchr+0x98>
 808aea8:	3001      	adds	r0, #1
 808aeaa:	f415 7f80 	tst.w	r5, #256	; 0x100
 808aeae:	bf02      	ittt	eq
 808aeb0:	3001      	addeq	r0, #1
 808aeb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 808aeb6:	3001      	addeq	r0, #1
 808aeb8:	bcf0      	pop	{r4, r5, r6, r7}
 808aeba:	3801      	subs	r0, #1
 808aebc:	4770      	bx	lr
 808aebe:	bf00      	nop

0808aec0 <__aeabi_uldivmod>:
 808aec0:	b953      	cbnz	r3, 808aed8 <__aeabi_uldivmod+0x18>
 808aec2:	b94a      	cbnz	r2, 808aed8 <__aeabi_uldivmod+0x18>
 808aec4:	2900      	cmp	r1, #0
 808aec6:	bf08      	it	eq
 808aec8:	2800      	cmpeq	r0, #0
 808aeca:	bf1c      	itt	ne
 808aecc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 808aed0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 808aed4:	f000 b972 	b.w	808b1bc <__aeabi_idiv0>
 808aed8:	f1ad 0c08 	sub.w	ip, sp, #8
 808aedc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808aee0:	f000 f806 	bl	808aef0 <__udivmoddi4>
 808aee4:	f8dd e004 	ldr.w	lr, [sp, #4]
 808aee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808aeec:	b004      	add	sp, #16
 808aeee:	4770      	bx	lr

0808aef0 <__udivmoddi4>:
 808aef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808aef4:	9e08      	ldr	r6, [sp, #32]
 808aef6:	4604      	mov	r4, r0
 808aef8:	4688      	mov	r8, r1
 808aefa:	2b00      	cmp	r3, #0
 808aefc:	d14b      	bne.n	808af96 <__udivmoddi4+0xa6>
 808aefe:	428a      	cmp	r2, r1
 808af00:	4615      	mov	r5, r2
 808af02:	d967      	bls.n	808afd4 <__udivmoddi4+0xe4>
 808af04:	fab2 f282 	clz	r2, r2
 808af08:	b14a      	cbz	r2, 808af1e <__udivmoddi4+0x2e>
 808af0a:	f1c2 0720 	rsb	r7, r2, #32
 808af0e:	fa01 f302 	lsl.w	r3, r1, r2
 808af12:	fa20 f707 	lsr.w	r7, r0, r7
 808af16:	4095      	lsls	r5, r2
 808af18:	ea47 0803 	orr.w	r8, r7, r3
 808af1c:	4094      	lsls	r4, r2
 808af1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 808af22:	0c23      	lsrs	r3, r4, #16
 808af24:	fbb8 f7fe 	udiv	r7, r8, lr
 808af28:	fa1f fc85 	uxth.w	ip, r5
 808af2c:	fb0e 8817 	mls	r8, lr, r7, r8
 808af30:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808af34:	fb07 f10c 	mul.w	r1, r7, ip
 808af38:	4299      	cmp	r1, r3
 808af3a:	d909      	bls.n	808af50 <__udivmoddi4+0x60>
 808af3c:	18eb      	adds	r3, r5, r3
 808af3e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 808af42:	f080 811b 	bcs.w	808b17c <__udivmoddi4+0x28c>
 808af46:	4299      	cmp	r1, r3
 808af48:	f240 8118 	bls.w	808b17c <__udivmoddi4+0x28c>
 808af4c:	3f02      	subs	r7, #2
 808af4e:	442b      	add	r3, r5
 808af50:	1a5b      	subs	r3, r3, r1
 808af52:	b2a4      	uxth	r4, r4
 808af54:	fbb3 f0fe 	udiv	r0, r3, lr
 808af58:	fb0e 3310 	mls	r3, lr, r0, r3
 808af5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 808af60:	fb00 fc0c 	mul.w	ip, r0, ip
 808af64:	45a4      	cmp	ip, r4
 808af66:	d909      	bls.n	808af7c <__udivmoddi4+0x8c>
 808af68:	192c      	adds	r4, r5, r4
 808af6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 808af6e:	f080 8107 	bcs.w	808b180 <__udivmoddi4+0x290>
 808af72:	45a4      	cmp	ip, r4
 808af74:	f240 8104 	bls.w	808b180 <__udivmoddi4+0x290>
 808af78:	3802      	subs	r0, #2
 808af7a:	442c      	add	r4, r5
 808af7c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 808af80:	eba4 040c 	sub.w	r4, r4, ip
 808af84:	2700      	movs	r7, #0
 808af86:	b11e      	cbz	r6, 808af90 <__udivmoddi4+0xa0>
 808af88:	40d4      	lsrs	r4, r2
 808af8a:	2300      	movs	r3, #0
 808af8c:	e9c6 4300 	strd	r4, r3, [r6]
 808af90:	4639      	mov	r1, r7
 808af92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808af96:	428b      	cmp	r3, r1
 808af98:	d909      	bls.n	808afae <__udivmoddi4+0xbe>
 808af9a:	2e00      	cmp	r6, #0
 808af9c:	f000 80eb 	beq.w	808b176 <__udivmoddi4+0x286>
 808afa0:	2700      	movs	r7, #0
 808afa2:	e9c6 0100 	strd	r0, r1, [r6]
 808afa6:	4638      	mov	r0, r7
 808afa8:	4639      	mov	r1, r7
 808afaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808afae:	fab3 f783 	clz	r7, r3
 808afb2:	2f00      	cmp	r7, #0
 808afb4:	d147      	bne.n	808b046 <__udivmoddi4+0x156>
 808afb6:	428b      	cmp	r3, r1
 808afb8:	d302      	bcc.n	808afc0 <__udivmoddi4+0xd0>
 808afba:	4282      	cmp	r2, r0
 808afbc:	f200 80fa 	bhi.w	808b1b4 <__udivmoddi4+0x2c4>
 808afc0:	1a84      	subs	r4, r0, r2
 808afc2:	eb61 0303 	sbc.w	r3, r1, r3
 808afc6:	2001      	movs	r0, #1
 808afc8:	4698      	mov	r8, r3
 808afca:	2e00      	cmp	r6, #0
 808afcc:	d0e0      	beq.n	808af90 <__udivmoddi4+0xa0>
 808afce:	e9c6 4800 	strd	r4, r8, [r6]
 808afd2:	e7dd      	b.n	808af90 <__udivmoddi4+0xa0>
 808afd4:	b902      	cbnz	r2, 808afd8 <__udivmoddi4+0xe8>
 808afd6:	deff      	udf	#255	; 0xff
 808afd8:	fab2 f282 	clz	r2, r2
 808afdc:	2a00      	cmp	r2, #0
 808afde:	f040 808f 	bne.w	808b100 <__udivmoddi4+0x210>
 808afe2:	1b49      	subs	r1, r1, r5
 808afe4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 808afe8:	fa1f f885 	uxth.w	r8, r5
 808afec:	2701      	movs	r7, #1
 808afee:	fbb1 fcfe 	udiv	ip, r1, lr
 808aff2:	0c23      	lsrs	r3, r4, #16
 808aff4:	fb0e 111c 	mls	r1, lr, ip, r1
 808aff8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 808affc:	fb08 f10c 	mul.w	r1, r8, ip
 808b000:	4299      	cmp	r1, r3
 808b002:	d907      	bls.n	808b014 <__udivmoddi4+0x124>
 808b004:	18eb      	adds	r3, r5, r3
 808b006:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 808b00a:	d202      	bcs.n	808b012 <__udivmoddi4+0x122>
 808b00c:	4299      	cmp	r1, r3
 808b00e:	f200 80cd 	bhi.w	808b1ac <__udivmoddi4+0x2bc>
 808b012:	4684      	mov	ip, r0
 808b014:	1a59      	subs	r1, r3, r1
 808b016:	b2a3      	uxth	r3, r4
 808b018:	fbb1 f0fe 	udiv	r0, r1, lr
 808b01c:	fb0e 1410 	mls	r4, lr, r0, r1
 808b020:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 808b024:	fb08 f800 	mul.w	r8, r8, r0
 808b028:	45a0      	cmp	r8, r4
 808b02a:	d907      	bls.n	808b03c <__udivmoddi4+0x14c>
 808b02c:	192c      	adds	r4, r5, r4
 808b02e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 808b032:	d202      	bcs.n	808b03a <__udivmoddi4+0x14a>
 808b034:	45a0      	cmp	r8, r4
 808b036:	f200 80b6 	bhi.w	808b1a6 <__udivmoddi4+0x2b6>
 808b03a:	4618      	mov	r0, r3
 808b03c:	eba4 0408 	sub.w	r4, r4, r8
 808b040:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 808b044:	e79f      	b.n	808af86 <__udivmoddi4+0x96>
 808b046:	f1c7 0c20 	rsb	ip, r7, #32
 808b04a:	40bb      	lsls	r3, r7
 808b04c:	fa22 fe0c 	lsr.w	lr, r2, ip
 808b050:	ea4e 0e03 	orr.w	lr, lr, r3
 808b054:	fa01 f407 	lsl.w	r4, r1, r7
 808b058:	fa20 f50c 	lsr.w	r5, r0, ip
 808b05c:	fa21 f30c 	lsr.w	r3, r1, ip
 808b060:	ea4f 481e 	mov.w	r8, lr, lsr #16
 808b064:	4325      	orrs	r5, r4
 808b066:	fbb3 f9f8 	udiv	r9, r3, r8
 808b06a:	0c2c      	lsrs	r4, r5, #16
 808b06c:	fb08 3319 	mls	r3, r8, r9, r3
 808b070:	fa1f fa8e 	uxth.w	sl, lr
 808b074:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 808b078:	fb09 f40a 	mul.w	r4, r9, sl
 808b07c:	429c      	cmp	r4, r3
 808b07e:	fa02 f207 	lsl.w	r2, r2, r7
 808b082:	fa00 f107 	lsl.w	r1, r0, r7
 808b086:	d90b      	bls.n	808b0a0 <__udivmoddi4+0x1b0>
 808b088:	eb1e 0303 	adds.w	r3, lr, r3
 808b08c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 808b090:	f080 8087 	bcs.w	808b1a2 <__udivmoddi4+0x2b2>
 808b094:	429c      	cmp	r4, r3
 808b096:	f240 8084 	bls.w	808b1a2 <__udivmoddi4+0x2b2>
 808b09a:	f1a9 0902 	sub.w	r9, r9, #2
 808b09e:	4473      	add	r3, lr
 808b0a0:	1b1b      	subs	r3, r3, r4
 808b0a2:	b2ad      	uxth	r5, r5
 808b0a4:	fbb3 f0f8 	udiv	r0, r3, r8
 808b0a8:	fb08 3310 	mls	r3, r8, r0, r3
 808b0ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 808b0b0:	fb00 fa0a 	mul.w	sl, r0, sl
 808b0b4:	45a2      	cmp	sl, r4
 808b0b6:	d908      	bls.n	808b0ca <__udivmoddi4+0x1da>
 808b0b8:	eb1e 0404 	adds.w	r4, lr, r4
 808b0bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 808b0c0:	d26b      	bcs.n	808b19a <__udivmoddi4+0x2aa>
 808b0c2:	45a2      	cmp	sl, r4
 808b0c4:	d969      	bls.n	808b19a <__udivmoddi4+0x2aa>
 808b0c6:	3802      	subs	r0, #2
 808b0c8:	4474      	add	r4, lr
 808b0ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 808b0ce:	fba0 8902 	umull	r8, r9, r0, r2
 808b0d2:	eba4 040a 	sub.w	r4, r4, sl
 808b0d6:	454c      	cmp	r4, r9
 808b0d8:	46c2      	mov	sl, r8
 808b0da:	464b      	mov	r3, r9
 808b0dc:	d354      	bcc.n	808b188 <__udivmoddi4+0x298>
 808b0de:	d051      	beq.n	808b184 <__udivmoddi4+0x294>
 808b0e0:	2e00      	cmp	r6, #0
 808b0e2:	d069      	beq.n	808b1b8 <__udivmoddi4+0x2c8>
 808b0e4:	ebb1 050a 	subs.w	r5, r1, sl
 808b0e8:	eb64 0403 	sbc.w	r4, r4, r3
 808b0ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 808b0f0:	40fd      	lsrs	r5, r7
 808b0f2:	40fc      	lsrs	r4, r7
 808b0f4:	ea4c 0505 	orr.w	r5, ip, r5
 808b0f8:	e9c6 5400 	strd	r5, r4, [r6]
 808b0fc:	2700      	movs	r7, #0
 808b0fe:	e747      	b.n	808af90 <__udivmoddi4+0xa0>
 808b100:	f1c2 0320 	rsb	r3, r2, #32
 808b104:	fa20 f703 	lsr.w	r7, r0, r3
 808b108:	4095      	lsls	r5, r2
 808b10a:	fa01 f002 	lsl.w	r0, r1, r2
 808b10e:	fa21 f303 	lsr.w	r3, r1, r3
 808b112:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 808b116:	4338      	orrs	r0, r7
 808b118:	0c01      	lsrs	r1, r0, #16
 808b11a:	fbb3 f7fe 	udiv	r7, r3, lr
 808b11e:	fa1f f885 	uxth.w	r8, r5
 808b122:	fb0e 3317 	mls	r3, lr, r7, r3
 808b126:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 808b12a:	fb07 f308 	mul.w	r3, r7, r8
 808b12e:	428b      	cmp	r3, r1
 808b130:	fa04 f402 	lsl.w	r4, r4, r2
 808b134:	d907      	bls.n	808b146 <__udivmoddi4+0x256>
 808b136:	1869      	adds	r1, r5, r1
 808b138:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 808b13c:	d22f      	bcs.n	808b19e <__udivmoddi4+0x2ae>
 808b13e:	428b      	cmp	r3, r1
 808b140:	d92d      	bls.n	808b19e <__udivmoddi4+0x2ae>
 808b142:	3f02      	subs	r7, #2
 808b144:	4429      	add	r1, r5
 808b146:	1acb      	subs	r3, r1, r3
 808b148:	b281      	uxth	r1, r0
 808b14a:	fbb3 f0fe 	udiv	r0, r3, lr
 808b14e:	fb0e 3310 	mls	r3, lr, r0, r3
 808b152:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 808b156:	fb00 f308 	mul.w	r3, r0, r8
 808b15a:	428b      	cmp	r3, r1
 808b15c:	d907      	bls.n	808b16e <__udivmoddi4+0x27e>
 808b15e:	1869      	adds	r1, r5, r1
 808b160:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 808b164:	d217      	bcs.n	808b196 <__udivmoddi4+0x2a6>
 808b166:	428b      	cmp	r3, r1
 808b168:	d915      	bls.n	808b196 <__udivmoddi4+0x2a6>
 808b16a:	3802      	subs	r0, #2
 808b16c:	4429      	add	r1, r5
 808b16e:	1ac9      	subs	r1, r1, r3
 808b170:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 808b174:	e73b      	b.n	808afee <__udivmoddi4+0xfe>
 808b176:	4637      	mov	r7, r6
 808b178:	4630      	mov	r0, r6
 808b17a:	e709      	b.n	808af90 <__udivmoddi4+0xa0>
 808b17c:	4607      	mov	r7, r0
 808b17e:	e6e7      	b.n	808af50 <__udivmoddi4+0x60>
 808b180:	4618      	mov	r0, r3
 808b182:	e6fb      	b.n	808af7c <__udivmoddi4+0x8c>
 808b184:	4541      	cmp	r1, r8
 808b186:	d2ab      	bcs.n	808b0e0 <__udivmoddi4+0x1f0>
 808b188:	ebb8 0a02 	subs.w	sl, r8, r2
 808b18c:	eb69 020e 	sbc.w	r2, r9, lr
 808b190:	3801      	subs	r0, #1
 808b192:	4613      	mov	r3, r2
 808b194:	e7a4      	b.n	808b0e0 <__udivmoddi4+0x1f0>
 808b196:	4660      	mov	r0, ip
 808b198:	e7e9      	b.n	808b16e <__udivmoddi4+0x27e>
 808b19a:	4618      	mov	r0, r3
 808b19c:	e795      	b.n	808b0ca <__udivmoddi4+0x1da>
 808b19e:	4667      	mov	r7, ip
 808b1a0:	e7d1      	b.n	808b146 <__udivmoddi4+0x256>
 808b1a2:	4681      	mov	r9, r0
 808b1a4:	e77c      	b.n	808b0a0 <__udivmoddi4+0x1b0>
 808b1a6:	3802      	subs	r0, #2
 808b1a8:	442c      	add	r4, r5
 808b1aa:	e747      	b.n	808b03c <__udivmoddi4+0x14c>
 808b1ac:	f1ac 0c02 	sub.w	ip, ip, #2
 808b1b0:	442b      	add	r3, r5
 808b1b2:	e72f      	b.n	808b014 <__udivmoddi4+0x124>
 808b1b4:	4638      	mov	r0, r7
 808b1b6:	e708      	b.n	808afca <__udivmoddi4+0xda>
 808b1b8:	4637      	mov	r7, r6
 808b1ba:	e6e9      	b.n	808af90 <__udivmoddi4+0xa0>

0808b1bc <__aeabi_idiv0>:
 808b1bc:	4770      	bx	lr
 808b1be:	bf00      	nop

0808b1c0 <Reset_Handler>:
 808b1c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 808b1f8 <LoopFillZerobss+0x14>
 808b1c4:	2100      	movs	r1, #0
 808b1c6:	e003      	b.n	808b1d0 <LoopCopyDataInit>

0808b1c8 <CopyDataInit>:
 808b1c8:	4b0c      	ldr	r3, [pc, #48]	; (808b1fc <LoopFillZerobss+0x18>)
 808b1ca:	585b      	ldr	r3, [r3, r1]
 808b1cc:	5043      	str	r3, [r0, r1]
 808b1ce:	3104      	adds	r1, #4

0808b1d0 <LoopCopyDataInit>:
 808b1d0:	480b      	ldr	r0, [pc, #44]	; (808b200 <LoopFillZerobss+0x1c>)
 808b1d2:	4b0c      	ldr	r3, [pc, #48]	; (808b204 <LoopFillZerobss+0x20>)
 808b1d4:	1842      	adds	r2, r0, r1
 808b1d6:	429a      	cmp	r2, r3
 808b1d8:	d3f6      	bcc.n	808b1c8 <CopyDataInit>
 808b1da:	4a0b      	ldr	r2, [pc, #44]	; (808b208 <LoopFillZerobss+0x24>)
 808b1dc:	e002      	b.n	808b1e4 <LoopFillZerobss>

0808b1de <FillZerobss>:
 808b1de:	2300      	movs	r3, #0
 808b1e0:	f842 3b04 	str.w	r3, [r2], #4

0808b1e4 <LoopFillZerobss>:
 808b1e4:	4b09      	ldr	r3, [pc, #36]	; (808b20c <LoopFillZerobss+0x28>)
 808b1e6:	429a      	cmp	r2, r3
 808b1e8:	d3f9      	bcc.n	808b1de <FillZerobss>
 808b1ea:	f7f5 fbb7 	bl	808095c <SystemInit>
 808b1ee:	f000 f811 	bl	808b214 <__libc_init_array>
 808b1f2:	f7ff fd1b 	bl	808ac2c <main>
 808b1f6:	4770      	bx	lr
 808b1f8:	20030000 	.word	0x20030000
 808b1fc:	0808bb4c 	.word	0x0808bb4c
 808b200:	20000000 	.word	0x20000000
 808b204:	20019074 	.word	0x20019074
 808b208:	20019074 	.word	0x20019074
 808b20c:	20019128 	.word	0x20019128

0808b210 <ADC_IRQHandler>:
 808b210:	e7fe      	b.n	808b210 <ADC_IRQHandler>
	...

0808b214 <__libc_init_array>:
 808b214:	b570      	push	{r4, r5, r6, lr}
 808b216:	4e0d      	ldr	r6, [pc, #52]	; (808b24c <__libc_init_array+0x38>)
 808b218:	4c0d      	ldr	r4, [pc, #52]	; (808b250 <__libc_init_array+0x3c>)
 808b21a:	1ba4      	subs	r4, r4, r6
 808b21c:	10a4      	asrs	r4, r4, #2
 808b21e:	2500      	movs	r5, #0
 808b220:	42a5      	cmp	r5, r4
 808b222:	d109      	bne.n	808b238 <__libc_init_array+0x24>
 808b224:	4e0b      	ldr	r6, [pc, #44]	; (808b254 <__libc_init_array+0x40>)
 808b226:	4c0c      	ldr	r4, [pc, #48]	; (808b258 <__libc_init_array+0x44>)
 808b228:	f000 fc36 	bl	808ba98 <_init>
 808b22c:	1ba4      	subs	r4, r4, r6
 808b22e:	10a4      	asrs	r4, r4, #2
 808b230:	2500      	movs	r5, #0
 808b232:	42a5      	cmp	r5, r4
 808b234:	d105      	bne.n	808b242 <__libc_init_array+0x2e>
 808b236:	bd70      	pop	{r4, r5, r6, pc}
 808b238:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808b23c:	4798      	blx	r3
 808b23e:	3501      	adds	r5, #1
 808b240:	e7ee      	b.n	808b220 <__libc_init_array+0xc>
 808b242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808b246:	4798      	blx	r3
 808b248:	3501      	adds	r5, #1
 808b24a:	e7f2      	b.n	808b232 <__libc_init_array+0x1e>
 808b24c:	0808bb44 	.word	0x0808bb44
 808b250:	0808bb44 	.word	0x0808bb44
 808b254:	0808bb44 	.word	0x0808bb44
 808b258:	0808bb48 	.word	0x0808bb48

0808b25c <memcpy>:
 808b25c:	b510      	push	{r4, lr}
 808b25e:	1e43      	subs	r3, r0, #1
 808b260:	440a      	add	r2, r1
 808b262:	4291      	cmp	r1, r2
 808b264:	d100      	bne.n	808b268 <memcpy+0xc>
 808b266:	bd10      	pop	{r4, pc}
 808b268:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b26c:	f803 4f01 	strb.w	r4, [r3, #1]!
 808b270:	e7f7      	b.n	808b262 <memcpy+0x6>

0808b272 <memset>:
 808b272:	4402      	add	r2, r0
 808b274:	4603      	mov	r3, r0
 808b276:	4293      	cmp	r3, r2
 808b278:	d100      	bne.n	808b27c <memset+0xa>
 808b27a:	4770      	bx	lr
 808b27c:	f803 1b01 	strb.w	r1, [r3], #1
 808b280:	e7f9      	b.n	808b276 <memset+0x4>
	...

0808b284 <siprintf>:
 808b284:	b40e      	push	{r1, r2, r3}
 808b286:	b500      	push	{lr}
 808b288:	b09c      	sub	sp, #112	; 0x70
 808b28a:	ab1d      	add	r3, sp, #116	; 0x74
 808b28c:	9002      	str	r0, [sp, #8]
 808b28e:	9006      	str	r0, [sp, #24]
 808b290:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 808b294:	4809      	ldr	r0, [pc, #36]	; (808b2bc <siprintf+0x38>)
 808b296:	9107      	str	r1, [sp, #28]
 808b298:	9104      	str	r1, [sp, #16]
 808b29a:	4909      	ldr	r1, [pc, #36]	; (808b2c0 <siprintf+0x3c>)
 808b29c:	f853 2b04 	ldr.w	r2, [r3], #4
 808b2a0:	9105      	str	r1, [sp, #20]
 808b2a2:	6800      	ldr	r0, [r0, #0]
 808b2a4:	9301      	str	r3, [sp, #4]
 808b2a6:	a902      	add	r1, sp, #8
 808b2a8:	f000 f866 	bl	808b378 <_svfiprintf_r>
 808b2ac:	9b02      	ldr	r3, [sp, #8]
 808b2ae:	2200      	movs	r2, #0
 808b2b0:	701a      	strb	r2, [r3, #0]
 808b2b2:	b01c      	add	sp, #112	; 0x70
 808b2b4:	f85d eb04 	ldr.w	lr, [sp], #4
 808b2b8:	b003      	add	sp, #12
 808b2ba:	4770      	bx	lr
 808b2bc:	20019010 	.word	0x20019010
 808b2c0:	ffff0208 	.word	0xffff0208

0808b2c4 <__ssputs_r>:
 808b2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b2c8:	688e      	ldr	r6, [r1, #8]
 808b2ca:	429e      	cmp	r6, r3
 808b2cc:	4682      	mov	sl, r0
 808b2ce:	460c      	mov	r4, r1
 808b2d0:	4690      	mov	r8, r2
 808b2d2:	4699      	mov	r9, r3
 808b2d4:	d837      	bhi.n	808b346 <__ssputs_r+0x82>
 808b2d6:	898a      	ldrh	r2, [r1, #12]
 808b2d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 808b2dc:	d031      	beq.n	808b342 <__ssputs_r+0x7e>
 808b2de:	6825      	ldr	r5, [r4, #0]
 808b2e0:	6909      	ldr	r1, [r1, #16]
 808b2e2:	1a6f      	subs	r7, r5, r1
 808b2e4:	6965      	ldr	r5, [r4, #20]
 808b2e6:	2302      	movs	r3, #2
 808b2e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 808b2ec:	fb95 f5f3 	sdiv	r5, r5, r3
 808b2f0:	f109 0301 	add.w	r3, r9, #1
 808b2f4:	443b      	add	r3, r7
 808b2f6:	429d      	cmp	r5, r3
 808b2f8:	bf38      	it	cc
 808b2fa:	461d      	movcc	r5, r3
 808b2fc:	0553      	lsls	r3, r2, #21
 808b2fe:	d530      	bpl.n	808b362 <__ssputs_r+0x9e>
 808b300:	4629      	mov	r1, r5
 808b302:	f000 fb21 	bl	808b948 <_malloc_r>
 808b306:	4606      	mov	r6, r0
 808b308:	b950      	cbnz	r0, 808b320 <__ssputs_r+0x5c>
 808b30a:	230c      	movs	r3, #12
 808b30c:	f8ca 3000 	str.w	r3, [sl]
 808b310:	89a3      	ldrh	r3, [r4, #12]
 808b312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808b316:	81a3      	strh	r3, [r4, #12]
 808b318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808b31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b320:	463a      	mov	r2, r7
 808b322:	6921      	ldr	r1, [r4, #16]
 808b324:	f7ff ff9a 	bl	808b25c <memcpy>
 808b328:	89a3      	ldrh	r3, [r4, #12]
 808b32a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 808b32e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808b332:	81a3      	strh	r3, [r4, #12]
 808b334:	6126      	str	r6, [r4, #16]
 808b336:	6165      	str	r5, [r4, #20]
 808b338:	443e      	add	r6, r7
 808b33a:	1bed      	subs	r5, r5, r7
 808b33c:	6026      	str	r6, [r4, #0]
 808b33e:	60a5      	str	r5, [r4, #8]
 808b340:	464e      	mov	r6, r9
 808b342:	454e      	cmp	r6, r9
 808b344:	d900      	bls.n	808b348 <__ssputs_r+0x84>
 808b346:	464e      	mov	r6, r9
 808b348:	4632      	mov	r2, r6
 808b34a:	4641      	mov	r1, r8
 808b34c:	6820      	ldr	r0, [r4, #0]
 808b34e:	f000 fa93 	bl	808b878 <memmove>
 808b352:	68a3      	ldr	r3, [r4, #8]
 808b354:	1b9b      	subs	r3, r3, r6
 808b356:	60a3      	str	r3, [r4, #8]
 808b358:	6823      	ldr	r3, [r4, #0]
 808b35a:	441e      	add	r6, r3
 808b35c:	6026      	str	r6, [r4, #0]
 808b35e:	2000      	movs	r0, #0
 808b360:	e7dc      	b.n	808b31c <__ssputs_r+0x58>
 808b362:	462a      	mov	r2, r5
 808b364:	f000 fb4a 	bl	808b9fc <_realloc_r>
 808b368:	4606      	mov	r6, r0
 808b36a:	2800      	cmp	r0, #0
 808b36c:	d1e2      	bne.n	808b334 <__ssputs_r+0x70>
 808b36e:	6921      	ldr	r1, [r4, #16]
 808b370:	4650      	mov	r0, sl
 808b372:	f000 fa9b 	bl	808b8ac <_free_r>
 808b376:	e7c8      	b.n	808b30a <__ssputs_r+0x46>

0808b378 <_svfiprintf_r>:
 808b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b37c:	461d      	mov	r5, r3
 808b37e:	898b      	ldrh	r3, [r1, #12]
 808b380:	061f      	lsls	r7, r3, #24
 808b382:	b09d      	sub	sp, #116	; 0x74
 808b384:	4680      	mov	r8, r0
 808b386:	460c      	mov	r4, r1
 808b388:	4616      	mov	r6, r2
 808b38a:	d50f      	bpl.n	808b3ac <_svfiprintf_r+0x34>
 808b38c:	690b      	ldr	r3, [r1, #16]
 808b38e:	b96b      	cbnz	r3, 808b3ac <_svfiprintf_r+0x34>
 808b390:	2140      	movs	r1, #64	; 0x40
 808b392:	f000 fad9 	bl	808b948 <_malloc_r>
 808b396:	6020      	str	r0, [r4, #0]
 808b398:	6120      	str	r0, [r4, #16]
 808b39a:	b928      	cbnz	r0, 808b3a8 <_svfiprintf_r+0x30>
 808b39c:	230c      	movs	r3, #12
 808b39e:	f8c8 3000 	str.w	r3, [r8]
 808b3a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808b3a6:	e0c8      	b.n	808b53a <_svfiprintf_r+0x1c2>
 808b3a8:	2340      	movs	r3, #64	; 0x40
 808b3aa:	6163      	str	r3, [r4, #20]
 808b3ac:	2300      	movs	r3, #0
 808b3ae:	9309      	str	r3, [sp, #36]	; 0x24
 808b3b0:	2320      	movs	r3, #32
 808b3b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808b3b6:	2330      	movs	r3, #48	; 0x30
 808b3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 808b3bc:	9503      	str	r5, [sp, #12]
 808b3be:	f04f 0b01 	mov.w	fp, #1
 808b3c2:	4637      	mov	r7, r6
 808b3c4:	463d      	mov	r5, r7
 808b3c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 808b3ca:	b10b      	cbz	r3, 808b3d0 <_svfiprintf_r+0x58>
 808b3cc:	2b25      	cmp	r3, #37	; 0x25
 808b3ce:	d13e      	bne.n	808b44e <_svfiprintf_r+0xd6>
 808b3d0:	ebb7 0a06 	subs.w	sl, r7, r6
 808b3d4:	d00b      	beq.n	808b3ee <_svfiprintf_r+0x76>
 808b3d6:	4653      	mov	r3, sl
 808b3d8:	4632      	mov	r2, r6
 808b3da:	4621      	mov	r1, r4
 808b3dc:	4640      	mov	r0, r8
 808b3de:	f7ff ff71 	bl	808b2c4 <__ssputs_r>
 808b3e2:	3001      	adds	r0, #1
 808b3e4:	f000 80a4 	beq.w	808b530 <_svfiprintf_r+0x1b8>
 808b3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b3ea:	4453      	add	r3, sl
 808b3ec:	9309      	str	r3, [sp, #36]	; 0x24
 808b3ee:	783b      	ldrb	r3, [r7, #0]
 808b3f0:	2b00      	cmp	r3, #0
 808b3f2:	f000 809d 	beq.w	808b530 <_svfiprintf_r+0x1b8>
 808b3f6:	2300      	movs	r3, #0
 808b3f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 808b3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 808b400:	9304      	str	r3, [sp, #16]
 808b402:	9307      	str	r3, [sp, #28]
 808b404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 808b408:	931a      	str	r3, [sp, #104]	; 0x68
 808b40a:	462f      	mov	r7, r5
 808b40c:	2205      	movs	r2, #5
 808b40e:	f817 1b01 	ldrb.w	r1, [r7], #1
 808b412:	4850      	ldr	r0, [pc, #320]	; (808b554 <_svfiprintf_r+0x1dc>)
 808b414:	f7ff fd04 	bl	808ae20 <memchr>
 808b418:	9b04      	ldr	r3, [sp, #16]
 808b41a:	b9d0      	cbnz	r0, 808b452 <_svfiprintf_r+0xda>
 808b41c:	06d9      	lsls	r1, r3, #27
 808b41e:	bf44      	itt	mi
 808b420:	2220      	movmi	r2, #32
 808b422:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 808b426:	071a      	lsls	r2, r3, #28
 808b428:	bf44      	itt	mi
 808b42a:	222b      	movmi	r2, #43	; 0x2b
 808b42c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 808b430:	782a      	ldrb	r2, [r5, #0]
 808b432:	2a2a      	cmp	r2, #42	; 0x2a
 808b434:	d015      	beq.n	808b462 <_svfiprintf_r+0xea>
 808b436:	9a07      	ldr	r2, [sp, #28]
 808b438:	462f      	mov	r7, r5
 808b43a:	2000      	movs	r0, #0
 808b43c:	250a      	movs	r5, #10
 808b43e:	4639      	mov	r1, r7
 808b440:	f811 3b01 	ldrb.w	r3, [r1], #1
 808b444:	3b30      	subs	r3, #48	; 0x30
 808b446:	2b09      	cmp	r3, #9
 808b448:	d94d      	bls.n	808b4e6 <_svfiprintf_r+0x16e>
 808b44a:	b1b8      	cbz	r0, 808b47c <_svfiprintf_r+0x104>
 808b44c:	e00f      	b.n	808b46e <_svfiprintf_r+0xf6>
 808b44e:	462f      	mov	r7, r5
 808b450:	e7b8      	b.n	808b3c4 <_svfiprintf_r+0x4c>
 808b452:	4a40      	ldr	r2, [pc, #256]	; (808b554 <_svfiprintf_r+0x1dc>)
 808b454:	1a80      	subs	r0, r0, r2
 808b456:	fa0b f000 	lsl.w	r0, fp, r0
 808b45a:	4318      	orrs	r0, r3
 808b45c:	9004      	str	r0, [sp, #16]
 808b45e:	463d      	mov	r5, r7
 808b460:	e7d3      	b.n	808b40a <_svfiprintf_r+0x92>
 808b462:	9a03      	ldr	r2, [sp, #12]
 808b464:	1d11      	adds	r1, r2, #4
 808b466:	6812      	ldr	r2, [r2, #0]
 808b468:	9103      	str	r1, [sp, #12]
 808b46a:	2a00      	cmp	r2, #0
 808b46c:	db01      	blt.n	808b472 <_svfiprintf_r+0xfa>
 808b46e:	9207      	str	r2, [sp, #28]
 808b470:	e004      	b.n	808b47c <_svfiprintf_r+0x104>
 808b472:	4252      	negs	r2, r2
 808b474:	f043 0302 	orr.w	r3, r3, #2
 808b478:	9207      	str	r2, [sp, #28]
 808b47a:	9304      	str	r3, [sp, #16]
 808b47c:	783b      	ldrb	r3, [r7, #0]
 808b47e:	2b2e      	cmp	r3, #46	; 0x2e
 808b480:	d10c      	bne.n	808b49c <_svfiprintf_r+0x124>
 808b482:	787b      	ldrb	r3, [r7, #1]
 808b484:	2b2a      	cmp	r3, #42	; 0x2a
 808b486:	d133      	bne.n	808b4f0 <_svfiprintf_r+0x178>
 808b488:	9b03      	ldr	r3, [sp, #12]
 808b48a:	1d1a      	adds	r2, r3, #4
 808b48c:	681b      	ldr	r3, [r3, #0]
 808b48e:	9203      	str	r2, [sp, #12]
 808b490:	2b00      	cmp	r3, #0
 808b492:	bfb8      	it	lt
 808b494:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 808b498:	3702      	adds	r7, #2
 808b49a:	9305      	str	r3, [sp, #20]
 808b49c:	4d2e      	ldr	r5, [pc, #184]	; (808b558 <_svfiprintf_r+0x1e0>)
 808b49e:	7839      	ldrb	r1, [r7, #0]
 808b4a0:	2203      	movs	r2, #3
 808b4a2:	4628      	mov	r0, r5
 808b4a4:	f7ff fcbc 	bl	808ae20 <memchr>
 808b4a8:	b138      	cbz	r0, 808b4ba <_svfiprintf_r+0x142>
 808b4aa:	2340      	movs	r3, #64	; 0x40
 808b4ac:	1b40      	subs	r0, r0, r5
 808b4ae:	fa03 f000 	lsl.w	r0, r3, r0
 808b4b2:	9b04      	ldr	r3, [sp, #16]
 808b4b4:	4303      	orrs	r3, r0
 808b4b6:	3701      	adds	r7, #1
 808b4b8:	9304      	str	r3, [sp, #16]
 808b4ba:	7839      	ldrb	r1, [r7, #0]
 808b4bc:	4827      	ldr	r0, [pc, #156]	; (808b55c <_svfiprintf_r+0x1e4>)
 808b4be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 808b4c2:	2206      	movs	r2, #6
 808b4c4:	1c7e      	adds	r6, r7, #1
 808b4c6:	f7ff fcab 	bl	808ae20 <memchr>
 808b4ca:	2800      	cmp	r0, #0
 808b4cc:	d038      	beq.n	808b540 <_svfiprintf_r+0x1c8>
 808b4ce:	4b24      	ldr	r3, [pc, #144]	; (808b560 <_svfiprintf_r+0x1e8>)
 808b4d0:	bb13      	cbnz	r3, 808b518 <_svfiprintf_r+0x1a0>
 808b4d2:	9b03      	ldr	r3, [sp, #12]
 808b4d4:	3307      	adds	r3, #7
 808b4d6:	f023 0307 	bic.w	r3, r3, #7
 808b4da:	3308      	adds	r3, #8
 808b4dc:	9303      	str	r3, [sp, #12]
 808b4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b4e0:	444b      	add	r3, r9
 808b4e2:	9309      	str	r3, [sp, #36]	; 0x24
 808b4e4:	e76d      	b.n	808b3c2 <_svfiprintf_r+0x4a>
 808b4e6:	fb05 3202 	mla	r2, r5, r2, r3
 808b4ea:	2001      	movs	r0, #1
 808b4ec:	460f      	mov	r7, r1
 808b4ee:	e7a6      	b.n	808b43e <_svfiprintf_r+0xc6>
 808b4f0:	2300      	movs	r3, #0
 808b4f2:	3701      	adds	r7, #1
 808b4f4:	9305      	str	r3, [sp, #20]
 808b4f6:	4619      	mov	r1, r3
 808b4f8:	250a      	movs	r5, #10
 808b4fa:	4638      	mov	r0, r7
 808b4fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 808b500:	3a30      	subs	r2, #48	; 0x30
 808b502:	2a09      	cmp	r2, #9
 808b504:	d903      	bls.n	808b50e <_svfiprintf_r+0x196>
 808b506:	2b00      	cmp	r3, #0
 808b508:	d0c8      	beq.n	808b49c <_svfiprintf_r+0x124>
 808b50a:	9105      	str	r1, [sp, #20]
 808b50c:	e7c6      	b.n	808b49c <_svfiprintf_r+0x124>
 808b50e:	fb05 2101 	mla	r1, r5, r1, r2
 808b512:	2301      	movs	r3, #1
 808b514:	4607      	mov	r7, r0
 808b516:	e7f0      	b.n	808b4fa <_svfiprintf_r+0x182>
 808b518:	ab03      	add	r3, sp, #12
 808b51a:	9300      	str	r3, [sp, #0]
 808b51c:	4622      	mov	r2, r4
 808b51e:	4b11      	ldr	r3, [pc, #68]	; (808b564 <_svfiprintf_r+0x1ec>)
 808b520:	a904      	add	r1, sp, #16
 808b522:	4640      	mov	r0, r8
 808b524:	f3af 8000 	nop.w
 808b528:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 808b52c:	4681      	mov	r9, r0
 808b52e:	d1d6      	bne.n	808b4de <_svfiprintf_r+0x166>
 808b530:	89a3      	ldrh	r3, [r4, #12]
 808b532:	065b      	lsls	r3, r3, #25
 808b534:	f53f af35 	bmi.w	808b3a2 <_svfiprintf_r+0x2a>
 808b538:	9809      	ldr	r0, [sp, #36]	; 0x24
 808b53a:	b01d      	add	sp, #116	; 0x74
 808b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b540:	ab03      	add	r3, sp, #12
 808b542:	9300      	str	r3, [sp, #0]
 808b544:	4622      	mov	r2, r4
 808b546:	4b07      	ldr	r3, [pc, #28]	; (808b564 <_svfiprintf_r+0x1ec>)
 808b548:	a904      	add	r1, sp, #16
 808b54a:	4640      	mov	r0, r8
 808b54c:	f000 f882 	bl	808b654 <_printf_i>
 808b550:	e7ea      	b.n	808b528 <_svfiprintf_r+0x1b0>
 808b552:	bf00      	nop
 808b554:	0808bb08 	.word	0x0808bb08
 808b558:	0808bb0e 	.word	0x0808bb0e
 808b55c:	0808bb12 	.word	0x0808bb12
 808b560:	00000000 	.word	0x00000000
 808b564:	0808b2c5 	.word	0x0808b2c5

0808b568 <_printf_common>:
 808b568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b56c:	4691      	mov	r9, r2
 808b56e:	461f      	mov	r7, r3
 808b570:	688a      	ldr	r2, [r1, #8]
 808b572:	690b      	ldr	r3, [r1, #16]
 808b574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 808b578:	4293      	cmp	r3, r2
 808b57a:	bfb8      	it	lt
 808b57c:	4613      	movlt	r3, r2
 808b57e:	f8c9 3000 	str.w	r3, [r9]
 808b582:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 808b586:	4606      	mov	r6, r0
 808b588:	460c      	mov	r4, r1
 808b58a:	b112      	cbz	r2, 808b592 <_printf_common+0x2a>
 808b58c:	3301      	adds	r3, #1
 808b58e:	f8c9 3000 	str.w	r3, [r9]
 808b592:	6823      	ldr	r3, [r4, #0]
 808b594:	0699      	lsls	r1, r3, #26
 808b596:	bf42      	ittt	mi
 808b598:	f8d9 3000 	ldrmi.w	r3, [r9]
 808b59c:	3302      	addmi	r3, #2
 808b59e:	f8c9 3000 	strmi.w	r3, [r9]
 808b5a2:	6825      	ldr	r5, [r4, #0]
 808b5a4:	f015 0506 	ands.w	r5, r5, #6
 808b5a8:	d107      	bne.n	808b5ba <_printf_common+0x52>
 808b5aa:	f104 0a19 	add.w	sl, r4, #25
 808b5ae:	68e3      	ldr	r3, [r4, #12]
 808b5b0:	f8d9 2000 	ldr.w	r2, [r9]
 808b5b4:	1a9b      	subs	r3, r3, r2
 808b5b6:	42ab      	cmp	r3, r5
 808b5b8:	dc28      	bgt.n	808b60c <_printf_common+0xa4>
 808b5ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 808b5be:	6822      	ldr	r2, [r4, #0]
 808b5c0:	3300      	adds	r3, #0
 808b5c2:	bf18      	it	ne
 808b5c4:	2301      	movne	r3, #1
 808b5c6:	0692      	lsls	r2, r2, #26
 808b5c8:	d42d      	bmi.n	808b626 <_printf_common+0xbe>
 808b5ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 808b5ce:	4639      	mov	r1, r7
 808b5d0:	4630      	mov	r0, r6
 808b5d2:	47c0      	blx	r8
 808b5d4:	3001      	adds	r0, #1
 808b5d6:	d020      	beq.n	808b61a <_printf_common+0xb2>
 808b5d8:	6823      	ldr	r3, [r4, #0]
 808b5da:	68e5      	ldr	r5, [r4, #12]
 808b5dc:	f8d9 2000 	ldr.w	r2, [r9]
 808b5e0:	f003 0306 	and.w	r3, r3, #6
 808b5e4:	2b04      	cmp	r3, #4
 808b5e6:	bf08      	it	eq
 808b5e8:	1aad      	subeq	r5, r5, r2
 808b5ea:	68a3      	ldr	r3, [r4, #8]
 808b5ec:	6922      	ldr	r2, [r4, #16]
 808b5ee:	bf0c      	ite	eq
 808b5f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 808b5f4:	2500      	movne	r5, #0
 808b5f6:	4293      	cmp	r3, r2
 808b5f8:	bfc4      	itt	gt
 808b5fa:	1a9b      	subgt	r3, r3, r2
 808b5fc:	18ed      	addgt	r5, r5, r3
 808b5fe:	f04f 0900 	mov.w	r9, #0
 808b602:	341a      	adds	r4, #26
 808b604:	454d      	cmp	r5, r9
 808b606:	d11a      	bne.n	808b63e <_printf_common+0xd6>
 808b608:	2000      	movs	r0, #0
 808b60a:	e008      	b.n	808b61e <_printf_common+0xb6>
 808b60c:	2301      	movs	r3, #1
 808b60e:	4652      	mov	r2, sl
 808b610:	4639      	mov	r1, r7
 808b612:	4630      	mov	r0, r6
 808b614:	47c0      	blx	r8
 808b616:	3001      	adds	r0, #1
 808b618:	d103      	bne.n	808b622 <_printf_common+0xba>
 808b61a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808b61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b622:	3501      	adds	r5, #1
 808b624:	e7c3      	b.n	808b5ae <_printf_common+0x46>
 808b626:	18e1      	adds	r1, r4, r3
 808b628:	1c5a      	adds	r2, r3, #1
 808b62a:	2030      	movs	r0, #48	; 0x30
 808b62c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 808b630:	4422      	add	r2, r4
 808b632:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 808b636:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 808b63a:	3302      	adds	r3, #2
 808b63c:	e7c5      	b.n	808b5ca <_printf_common+0x62>
 808b63e:	2301      	movs	r3, #1
 808b640:	4622      	mov	r2, r4
 808b642:	4639      	mov	r1, r7
 808b644:	4630      	mov	r0, r6
 808b646:	47c0      	blx	r8
 808b648:	3001      	adds	r0, #1
 808b64a:	d0e6      	beq.n	808b61a <_printf_common+0xb2>
 808b64c:	f109 0901 	add.w	r9, r9, #1
 808b650:	e7d8      	b.n	808b604 <_printf_common+0x9c>
	...

0808b654 <_printf_i>:
 808b654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808b658:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 808b65c:	460c      	mov	r4, r1
 808b65e:	7e09      	ldrb	r1, [r1, #24]
 808b660:	b085      	sub	sp, #20
 808b662:	296e      	cmp	r1, #110	; 0x6e
 808b664:	4617      	mov	r7, r2
 808b666:	4606      	mov	r6, r0
 808b668:	4698      	mov	r8, r3
 808b66a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 808b66c:	f000 80b3 	beq.w	808b7d6 <_printf_i+0x182>
 808b670:	d822      	bhi.n	808b6b8 <_printf_i+0x64>
 808b672:	2963      	cmp	r1, #99	; 0x63
 808b674:	d036      	beq.n	808b6e4 <_printf_i+0x90>
 808b676:	d80a      	bhi.n	808b68e <_printf_i+0x3a>
 808b678:	2900      	cmp	r1, #0
 808b67a:	f000 80b9 	beq.w	808b7f0 <_printf_i+0x19c>
 808b67e:	2958      	cmp	r1, #88	; 0x58
 808b680:	f000 8083 	beq.w	808b78a <_printf_i+0x136>
 808b684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 808b688:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 808b68c:	e032      	b.n	808b6f4 <_printf_i+0xa0>
 808b68e:	2964      	cmp	r1, #100	; 0x64
 808b690:	d001      	beq.n	808b696 <_printf_i+0x42>
 808b692:	2969      	cmp	r1, #105	; 0x69
 808b694:	d1f6      	bne.n	808b684 <_printf_i+0x30>
 808b696:	6820      	ldr	r0, [r4, #0]
 808b698:	6813      	ldr	r3, [r2, #0]
 808b69a:	0605      	lsls	r5, r0, #24
 808b69c:	f103 0104 	add.w	r1, r3, #4
 808b6a0:	d52a      	bpl.n	808b6f8 <_printf_i+0xa4>
 808b6a2:	681b      	ldr	r3, [r3, #0]
 808b6a4:	6011      	str	r1, [r2, #0]
 808b6a6:	2b00      	cmp	r3, #0
 808b6a8:	da03      	bge.n	808b6b2 <_printf_i+0x5e>
 808b6aa:	222d      	movs	r2, #45	; 0x2d
 808b6ac:	425b      	negs	r3, r3
 808b6ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 808b6b2:	486f      	ldr	r0, [pc, #444]	; (808b870 <_printf_i+0x21c>)
 808b6b4:	220a      	movs	r2, #10
 808b6b6:	e039      	b.n	808b72c <_printf_i+0xd8>
 808b6b8:	2973      	cmp	r1, #115	; 0x73
 808b6ba:	f000 809d 	beq.w	808b7f8 <_printf_i+0x1a4>
 808b6be:	d808      	bhi.n	808b6d2 <_printf_i+0x7e>
 808b6c0:	296f      	cmp	r1, #111	; 0x6f
 808b6c2:	d020      	beq.n	808b706 <_printf_i+0xb2>
 808b6c4:	2970      	cmp	r1, #112	; 0x70
 808b6c6:	d1dd      	bne.n	808b684 <_printf_i+0x30>
 808b6c8:	6823      	ldr	r3, [r4, #0]
 808b6ca:	f043 0320 	orr.w	r3, r3, #32
 808b6ce:	6023      	str	r3, [r4, #0]
 808b6d0:	e003      	b.n	808b6da <_printf_i+0x86>
 808b6d2:	2975      	cmp	r1, #117	; 0x75
 808b6d4:	d017      	beq.n	808b706 <_printf_i+0xb2>
 808b6d6:	2978      	cmp	r1, #120	; 0x78
 808b6d8:	d1d4      	bne.n	808b684 <_printf_i+0x30>
 808b6da:	2378      	movs	r3, #120	; 0x78
 808b6dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 808b6e0:	4864      	ldr	r0, [pc, #400]	; (808b874 <_printf_i+0x220>)
 808b6e2:	e055      	b.n	808b790 <_printf_i+0x13c>
 808b6e4:	6813      	ldr	r3, [r2, #0]
 808b6e6:	1d19      	adds	r1, r3, #4
 808b6e8:	681b      	ldr	r3, [r3, #0]
 808b6ea:	6011      	str	r1, [r2, #0]
 808b6ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 808b6f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 808b6f4:	2301      	movs	r3, #1
 808b6f6:	e08c      	b.n	808b812 <_printf_i+0x1be>
 808b6f8:	681b      	ldr	r3, [r3, #0]
 808b6fa:	6011      	str	r1, [r2, #0]
 808b6fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 808b700:	bf18      	it	ne
 808b702:	b21b      	sxthne	r3, r3
 808b704:	e7cf      	b.n	808b6a6 <_printf_i+0x52>
 808b706:	6813      	ldr	r3, [r2, #0]
 808b708:	6825      	ldr	r5, [r4, #0]
 808b70a:	1d18      	adds	r0, r3, #4
 808b70c:	6010      	str	r0, [r2, #0]
 808b70e:	0628      	lsls	r0, r5, #24
 808b710:	d501      	bpl.n	808b716 <_printf_i+0xc2>
 808b712:	681b      	ldr	r3, [r3, #0]
 808b714:	e002      	b.n	808b71c <_printf_i+0xc8>
 808b716:	0668      	lsls	r0, r5, #25
 808b718:	d5fb      	bpl.n	808b712 <_printf_i+0xbe>
 808b71a:	881b      	ldrh	r3, [r3, #0]
 808b71c:	4854      	ldr	r0, [pc, #336]	; (808b870 <_printf_i+0x21c>)
 808b71e:	296f      	cmp	r1, #111	; 0x6f
 808b720:	bf14      	ite	ne
 808b722:	220a      	movne	r2, #10
 808b724:	2208      	moveq	r2, #8
 808b726:	2100      	movs	r1, #0
 808b728:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 808b72c:	6865      	ldr	r5, [r4, #4]
 808b72e:	60a5      	str	r5, [r4, #8]
 808b730:	2d00      	cmp	r5, #0
 808b732:	f2c0 8095 	blt.w	808b860 <_printf_i+0x20c>
 808b736:	6821      	ldr	r1, [r4, #0]
 808b738:	f021 0104 	bic.w	r1, r1, #4
 808b73c:	6021      	str	r1, [r4, #0]
 808b73e:	2b00      	cmp	r3, #0
 808b740:	d13d      	bne.n	808b7be <_printf_i+0x16a>
 808b742:	2d00      	cmp	r5, #0
 808b744:	f040 808e 	bne.w	808b864 <_printf_i+0x210>
 808b748:	4665      	mov	r5, ip
 808b74a:	2a08      	cmp	r2, #8
 808b74c:	d10b      	bne.n	808b766 <_printf_i+0x112>
 808b74e:	6823      	ldr	r3, [r4, #0]
 808b750:	07db      	lsls	r3, r3, #31
 808b752:	d508      	bpl.n	808b766 <_printf_i+0x112>
 808b754:	6923      	ldr	r3, [r4, #16]
 808b756:	6862      	ldr	r2, [r4, #4]
 808b758:	429a      	cmp	r2, r3
 808b75a:	bfde      	ittt	le
 808b75c:	2330      	movle	r3, #48	; 0x30
 808b75e:	f805 3c01 	strble.w	r3, [r5, #-1]
 808b762:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 808b766:	ebac 0305 	sub.w	r3, ip, r5
 808b76a:	6123      	str	r3, [r4, #16]
 808b76c:	f8cd 8000 	str.w	r8, [sp]
 808b770:	463b      	mov	r3, r7
 808b772:	aa03      	add	r2, sp, #12
 808b774:	4621      	mov	r1, r4
 808b776:	4630      	mov	r0, r6
 808b778:	f7ff fef6 	bl	808b568 <_printf_common>
 808b77c:	3001      	adds	r0, #1
 808b77e:	d14d      	bne.n	808b81c <_printf_i+0x1c8>
 808b780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808b784:	b005      	add	sp, #20
 808b786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808b78a:	4839      	ldr	r0, [pc, #228]	; (808b870 <_printf_i+0x21c>)
 808b78c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 808b790:	6813      	ldr	r3, [r2, #0]
 808b792:	6821      	ldr	r1, [r4, #0]
 808b794:	1d1d      	adds	r5, r3, #4
 808b796:	681b      	ldr	r3, [r3, #0]
 808b798:	6015      	str	r5, [r2, #0]
 808b79a:	060a      	lsls	r2, r1, #24
 808b79c:	d50b      	bpl.n	808b7b6 <_printf_i+0x162>
 808b79e:	07ca      	lsls	r2, r1, #31
 808b7a0:	bf44      	itt	mi
 808b7a2:	f041 0120 	orrmi.w	r1, r1, #32
 808b7a6:	6021      	strmi	r1, [r4, #0]
 808b7a8:	b91b      	cbnz	r3, 808b7b2 <_printf_i+0x15e>
 808b7aa:	6822      	ldr	r2, [r4, #0]
 808b7ac:	f022 0220 	bic.w	r2, r2, #32
 808b7b0:	6022      	str	r2, [r4, #0]
 808b7b2:	2210      	movs	r2, #16
 808b7b4:	e7b7      	b.n	808b726 <_printf_i+0xd2>
 808b7b6:	064d      	lsls	r5, r1, #25
 808b7b8:	bf48      	it	mi
 808b7ba:	b29b      	uxthmi	r3, r3
 808b7bc:	e7ef      	b.n	808b79e <_printf_i+0x14a>
 808b7be:	4665      	mov	r5, ip
 808b7c0:	fbb3 f1f2 	udiv	r1, r3, r2
 808b7c4:	fb02 3311 	mls	r3, r2, r1, r3
 808b7c8:	5cc3      	ldrb	r3, [r0, r3]
 808b7ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 808b7ce:	460b      	mov	r3, r1
 808b7d0:	2900      	cmp	r1, #0
 808b7d2:	d1f5      	bne.n	808b7c0 <_printf_i+0x16c>
 808b7d4:	e7b9      	b.n	808b74a <_printf_i+0xf6>
 808b7d6:	6813      	ldr	r3, [r2, #0]
 808b7d8:	6825      	ldr	r5, [r4, #0]
 808b7da:	6961      	ldr	r1, [r4, #20]
 808b7dc:	1d18      	adds	r0, r3, #4
 808b7de:	6010      	str	r0, [r2, #0]
 808b7e0:	0628      	lsls	r0, r5, #24
 808b7e2:	681b      	ldr	r3, [r3, #0]
 808b7e4:	d501      	bpl.n	808b7ea <_printf_i+0x196>
 808b7e6:	6019      	str	r1, [r3, #0]
 808b7e8:	e002      	b.n	808b7f0 <_printf_i+0x19c>
 808b7ea:	066a      	lsls	r2, r5, #25
 808b7ec:	d5fb      	bpl.n	808b7e6 <_printf_i+0x192>
 808b7ee:	8019      	strh	r1, [r3, #0]
 808b7f0:	2300      	movs	r3, #0
 808b7f2:	6123      	str	r3, [r4, #16]
 808b7f4:	4665      	mov	r5, ip
 808b7f6:	e7b9      	b.n	808b76c <_printf_i+0x118>
 808b7f8:	6813      	ldr	r3, [r2, #0]
 808b7fa:	1d19      	adds	r1, r3, #4
 808b7fc:	6011      	str	r1, [r2, #0]
 808b7fe:	681d      	ldr	r5, [r3, #0]
 808b800:	6862      	ldr	r2, [r4, #4]
 808b802:	2100      	movs	r1, #0
 808b804:	4628      	mov	r0, r5
 808b806:	f7ff fb0b 	bl	808ae20 <memchr>
 808b80a:	b108      	cbz	r0, 808b810 <_printf_i+0x1bc>
 808b80c:	1b40      	subs	r0, r0, r5
 808b80e:	6060      	str	r0, [r4, #4]
 808b810:	6863      	ldr	r3, [r4, #4]
 808b812:	6123      	str	r3, [r4, #16]
 808b814:	2300      	movs	r3, #0
 808b816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 808b81a:	e7a7      	b.n	808b76c <_printf_i+0x118>
 808b81c:	6923      	ldr	r3, [r4, #16]
 808b81e:	462a      	mov	r2, r5
 808b820:	4639      	mov	r1, r7
 808b822:	4630      	mov	r0, r6
 808b824:	47c0      	blx	r8
 808b826:	3001      	adds	r0, #1
 808b828:	d0aa      	beq.n	808b780 <_printf_i+0x12c>
 808b82a:	6823      	ldr	r3, [r4, #0]
 808b82c:	079b      	lsls	r3, r3, #30
 808b82e:	d413      	bmi.n	808b858 <_printf_i+0x204>
 808b830:	68e0      	ldr	r0, [r4, #12]
 808b832:	9b03      	ldr	r3, [sp, #12]
 808b834:	4298      	cmp	r0, r3
 808b836:	bfb8      	it	lt
 808b838:	4618      	movlt	r0, r3
 808b83a:	e7a3      	b.n	808b784 <_printf_i+0x130>
 808b83c:	2301      	movs	r3, #1
 808b83e:	464a      	mov	r2, r9
 808b840:	4639      	mov	r1, r7
 808b842:	4630      	mov	r0, r6
 808b844:	47c0      	blx	r8
 808b846:	3001      	adds	r0, #1
 808b848:	d09a      	beq.n	808b780 <_printf_i+0x12c>
 808b84a:	3501      	adds	r5, #1
 808b84c:	68e3      	ldr	r3, [r4, #12]
 808b84e:	9a03      	ldr	r2, [sp, #12]
 808b850:	1a9b      	subs	r3, r3, r2
 808b852:	42ab      	cmp	r3, r5
 808b854:	dcf2      	bgt.n	808b83c <_printf_i+0x1e8>
 808b856:	e7eb      	b.n	808b830 <_printf_i+0x1dc>
 808b858:	2500      	movs	r5, #0
 808b85a:	f104 0919 	add.w	r9, r4, #25
 808b85e:	e7f5      	b.n	808b84c <_printf_i+0x1f8>
 808b860:	2b00      	cmp	r3, #0
 808b862:	d1ac      	bne.n	808b7be <_printf_i+0x16a>
 808b864:	7803      	ldrb	r3, [r0, #0]
 808b866:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 808b86a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 808b86e:	e76c      	b.n	808b74a <_printf_i+0xf6>
 808b870:	0808bb19 	.word	0x0808bb19
 808b874:	0808bb2a 	.word	0x0808bb2a

0808b878 <memmove>:
 808b878:	4288      	cmp	r0, r1
 808b87a:	b510      	push	{r4, lr}
 808b87c:	eb01 0302 	add.w	r3, r1, r2
 808b880:	d807      	bhi.n	808b892 <memmove+0x1a>
 808b882:	1e42      	subs	r2, r0, #1
 808b884:	4299      	cmp	r1, r3
 808b886:	d00a      	beq.n	808b89e <memmove+0x26>
 808b888:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b88c:	f802 4f01 	strb.w	r4, [r2, #1]!
 808b890:	e7f8      	b.n	808b884 <memmove+0xc>
 808b892:	4283      	cmp	r3, r0
 808b894:	d9f5      	bls.n	808b882 <memmove+0xa>
 808b896:	1881      	adds	r1, r0, r2
 808b898:	1ad2      	subs	r2, r2, r3
 808b89a:	42d3      	cmn	r3, r2
 808b89c:	d100      	bne.n	808b8a0 <memmove+0x28>
 808b89e:	bd10      	pop	{r4, pc}
 808b8a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808b8a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 808b8a8:	e7f7      	b.n	808b89a <memmove+0x22>
	...

0808b8ac <_free_r>:
 808b8ac:	b538      	push	{r3, r4, r5, lr}
 808b8ae:	4605      	mov	r5, r0
 808b8b0:	2900      	cmp	r1, #0
 808b8b2:	d045      	beq.n	808b940 <_free_r+0x94>
 808b8b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 808b8b8:	1f0c      	subs	r4, r1, #4
 808b8ba:	2b00      	cmp	r3, #0
 808b8bc:	bfb8      	it	lt
 808b8be:	18e4      	addlt	r4, r4, r3
 808b8c0:	f000 f8d2 	bl	808ba68 <__malloc_lock>
 808b8c4:	4a1f      	ldr	r2, [pc, #124]	; (808b944 <_free_r+0x98>)
 808b8c6:	6813      	ldr	r3, [r2, #0]
 808b8c8:	4610      	mov	r0, r2
 808b8ca:	b933      	cbnz	r3, 808b8da <_free_r+0x2e>
 808b8cc:	6063      	str	r3, [r4, #4]
 808b8ce:	6014      	str	r4, [r2, #0]
 808b8d0:	4628      	mov	r0, r5
 808b8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808b8d6:	f000 b8c8 	b.w	808ba6a <__malloc_unlock>
 808b8da:	42a3      	cmp	r3, r4
 808b8dc:	d90c      	bls.n	808b8f8 <_free_r+0x4c>
 808b8de:	6821      	ldr	r1, [r4, #0]
 808b8e0:	1862      	adds	r2, r4, r1
 808b8e2:	4293      	cmp	r3, r2
 808b8e4:	bf04      	itt	eq
 808b8e6:	681a      	ldreq	r2, [r3, #0]
 808b8e8:	685b      	ldreq	r3, [r3, #4]
 808b8ea:	6063      	str	r3, [r4, #4]
 808b8ec:	bf04      	itt	eq
 808b8ee:	1852      	addeq	r2, r2, r1
 808b8f0:	6022      	streq	r2, [r4, #0]
 808b8f2:	6004      	str	r4, [r0, #0]
 808b8f4:	e7ec      	b.n	808b8d0 <_free_r+0x24>
 808b8f6:	4613      	mov	r3, r2
 808b8f8:	685a      	ldr	r2, [r3, #4]
 808b8fa:	b10a      	cbz	r2, 808b900 <_free_r+0x54>
 808b8fc:	42a2      	cmp	r2, r4
 808b8fe:	d9fa      	bls.n	808b8f6 <_free_r+0x4a>
 808b900:	6819      	ldr	r1, [r3, #0]
 808b902:	1858      	adds	r0, r3, r1
 808b904:	42a0      	cmp	r0, r4
 808b906:	d10b      	bne.n	808b920 <_free_r+0x74>
 808b908:	6820      	ldr	r0, [r4, #0]
 808b90a:	4401      	add	r1, r0
 808b90c:	1858      	adds	r0, r3, r1
 808b90e:	4282      	cmp	r2, r0
 808b910:	6019      	str	r1, [r3, #0]
 808b912:	d1dd      	bne.n	808b8d0 <_free_r+0x24>
 808b914:	6810      	ldr	r0, [r2, #0]
 808b916:	6852      	ldr	r2, [r2, #4]
 808b918:	605a      	str	r2, [r3, #4]
 808b91a:	4401      	add	r1, r0
 808b91c:	6019      	str	r1, [r3, #0]
 808b91e:	e7d7      	b.n	808b8d0 <_free_r+0x24>
 808b920:	d902      	bls.n	808b928 <_free_r+0x7c>
 808b922:	230c      	movs	r3, #12
 808b924:	602b      	str	r3, [r5, #0]
 808b926:	e7d3      	b.n	808b8d0 <_free_r+0x24>
 808b928:	6820      	ldr	r0, [r4, #0]
 808b92a:	1821      	adds	r1, r4, r0
 808b92c:	428a      	cmp	r2, r1
 808b92e:	bf04      	itt	eq
 808b930:	6811      	ldreq	r1, [r2, #0]
 808b932:	6852      	ldreq	r2, [r2, #4]
 808b934:	6062      	str	r2, [r4, #4]
 808b936:	bf04      	itt	eq
 808b938:	1809      	addeq	r1, r1, r0
 808b93a:	6021      	streq	r1, [r4, #0]
 808b93c:	605c      	str	r4, [r3, #4]
 808b93e:	e7c7      	b.n	808b8d0 <_free_r+0x24>
 808b940:	bd38      	pop	{r3, r4, r5, pc}
 808b942:	bf00      	nop
 808b944:	20019094 	.word	0x20019094

0808b948 <_malloc_r>:
 808b948:	b570      	push	{r4, r5, r6, lr}
 808b94a:	1ccd      	adds	r5, r1, #3
 808b94c:	f025 0503 	bic.w	r5, r5, #3
 808b950:	3508      	adds	r5, #8
 808b952:	2d0c      	cmp	r5, #12
 808b954:	bf38      	it	cc
 808b956:	250c      	movcc	r5, #12
 808b958:	2d00      	cmp	r5, #0
 808b95a:	4606      	mov	r6, r0
 808b95c:	db01      	blt.n	808b962 <_malloc_r+0x1a>
 808b95e:	42a9      	cmp	r1, r5
 808b960:	d903      	bls.n	808b96a <_malloc_r+0x22>
 808b962:	230c      	movs	r3, #12
 808b964:	6033      	str	r3, [r6, #0]
 808b966:	2000      	movs	r0, #0
 808b968:	bd70      	pop	{r4, r5, r6, pc}
 808b96a:	f000 f87d 	bl	808ba68 <__malloc_lock>
 808b96e:	4a21      	ldr	r2, [pc, #132]	; (808b9f4 <_malloc_r+0xac>)
 808b970:	6814      	ldr	r4, [r2, #0]
 808b972:	4621      	mov	r1, r4
 808b974:	b991      	cbnz	r1, 808b99c <_malloc_r+0x54>
 808b976:	4c20      	ldr	r4, [pc, #128]	; (808b9f8 <_malloc_r+0xb0>)
 808b978:	6823      	ldr	r3, [r4, #0]
 808b97a:	b91b      	cbnz	r3, 808b984 <_malloc_r+0x3c>
 808b97c:	4630      	mov	r0, r6
 808b97e:	f000 f863 	bl	808ba48 <_sbrk_r>
 808b982:	6020      	str	r0, [r4, #0]
 808b984:	4629      	mov	r1, r5
 808b986:	4630      	mov	r0, r6
 808b988:	f000 f85e 	bl	808ba48 <_sbrk_r>
 808b98c:	1c43      	adds	r3, r0, #1
 808b98e:	d124      	bne.n	808b9da <_malloc_r+0x92>
 808b990:	230c      	movs	r3, #12
 808b992:	6033      	str	r3, [r6, #0]
 808b994:	4630      	mov	r0, r6
 808b996:	f000 f868 	bl	808ba6a <__malloc_unlock>
 808b99a:	e7e4      	b.n	808b966 <_malloc_r+0x1e>
 808b99c:	680b      	ldr	r3, [r1, #0]
 808b99e:	1b5b      	subs	r3, r3, r5
 808b9a0:	d418      	bmi.n	808b9d4 <_malloc_r+0x8c>
 808b9a2:	2b0b      	cmp	r3, #11
 808b9a4:	d90f      	bls.n	808b9c6 <_malloc_r+0x7e>
 808b9a6:	600b      	str	r3, [r1, #0]
 808b9a8:	50cd      	str	r5, [r1, r3]
 808b9aa:	18cc      	adds	r4, r1, r3
 808b9ac:	4630      	mov	r0, r6
 808b9ae:	f000 f85c 	bl	808ba6a <__malloc_unlock>
 808b9b2:	f104 000b 	add.w	r0, r4, #11
 808b9b6:	1d23      	adds	r3, r4, #4
 808b9b8:	f020 0007 	bic.w	r0, r0, #7
 808b9bc:	1ac3      	subs	r3, r0, r3
 808b9be:	d0d3      	beq.n	808b968 <_malloc_r+0x20>
 808b9c0:	425a      	negs	r2, r3
 808b9c2:	50e2      	str	r2, [r4, r3]
 808b9c4:	e7d0      	b.n	808b968 <_malloc_r+0x20>
 808b9c6:	428c      	cmp	r4, r1
 808b9c8:	684b      	ldr	r3, [r1, #4]
 808b9ca:	bf16      	itet	ne
 808b9cc:	6063      	strne	r3, [r4, #4]
 808b9ce:	6013      	streq	r3, [r2, #0]
 808b9d0:	460c      	movne	r4, r1
 808b9d2:	e7eb      	b.n	808b9ac <_malloc_r+0x64>
 808b9d4:	460c      	mov	r4, r1
 808b9d6:	6849      	ldr	r1, [r1, #4]
 808b9d8:	e7cc      	b.n	808b974 <_malloc_r+0x2c>
 808b9da:	1cc4      	adds	r4, r0, #3
 808b9dc:	f024 0403 	bic.w	r4, r4, #3
 808b9e0:	42a0      	cmp	r0, r4
 808b9e2:	d005      	beq.n	808b9f0 <_malloc_r+0xa8>
 808b9e4:	1a21      	subs	r1, r4, r0
 808b9e6:	4630      	mov	r0, r6
 808b9e8:	f000 f82e 	bl	808ba48 <_sbrk_r>
 808b9ec:	3001      	adds	r0, #1
 808b9ee:	d0cf      	beq.n	808b990 <_malloc_r+0x48>
 808b9f0:	6025      	str	r5, [r4, #0]
 808b9f2:	e7db      	b.n	808b9ac <_malloc_r+0x64>
 808b9f4:	20019094 	.word	0x20019094
 808b9f8:	20019098 	.word	0x20019098

0808b9fc <_realloc_r>:
 808b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b9fe:	4607      	mov	r7, r0
 808ba00:	4614      	mov	r4, r2
 808ba02:	460e      	mov	r6, r1
 808ba04:	b921      	cbnz	r1, 808ba10 <_realloc_r+0x14>
 808ba06:	4611      	mov	r1, r2
 808ba08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 808ba0c:	f7ff bf9c 	b.w	808b948 <_malloc_r>
 808ba10:	b922      	cbnz	r2, 808ba1c <_realloc_r+0x20>
 808ba12:	f7ff ff4b 	bl	808b8ac <_free_r>
 808ba16:	4625      	mov	r5, r4
 808ba18:	4628      	mov	r0, r5
 808ba1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808ba1c:	f000 f826 	bl	808ba6c <_malloc_usable_size_r>
 808ba20:	42a0      	cmp	r0, r4
 808ba22:	d20f      	bcs.n	808ba44 <_realloc_r+0x48>
 808ba24:	4621      	mov	r1, r4
 808ba26:	4638      	mov	r0, r7
 808ba28:	f7ff ff8e 	bl	808b948 <_malloc_r>
 808ba2c:	4605      	mov	r5, r0
 808ba2e:	2800      	cmp	r0, #0
 808ba30:	d0f2      	beq.n	808ba18 <_realloc_r+0x1c>
 808ba32:	4631      	mov	r1, r6
 808ba34:	4622      	mov	r2, r4
 808ba36:	f7ff fc11 	bl	808b25c <memcpy>
 808ba3a:	4631      	mov	r1, r6
 808ba3c:	4638      	mov	r0, r7
 808ba3e:	f7ff ff35 	bl	808b8ac <_free_r>
 808ba42:	e7e9      	b.n	808ba18 <_realloc_r+0x1c>
 808ba44:	4635      	mov	r5, r6
 808ba46:	e7e7      	b.n	808ba18 <_realloc_r+0x1c>

0808ba48 <_sbrk_r>:
 808ba48:	b538      	push	{r3, r4, r5, lr}
 808ba4a:	4c06      	ldr	r4, [pc, #24]	; (808ba64 <_sbrk_r+0x1c>)
 808ba4c:	2300      	movs	r3, #0
 808ba4e:	4605      	mov	r5, r0
 808ba50:	4608      	mov	r0, r1
 808ba52:	6023      	str	r3, [r4, #0]
 808ba54:	f000 f812 	bl	808ba7c <_sbrk>
 808ba58:	1c43      	adds	r3, r0, #1
 808ba5a:	d102      	bne.n	808ba62 <_sbrk_r+0x1a>
 808ba5c:	6823      	ldr	r3, [r4, #0]
 808ba5e:	b103      	cbz	r3, 808ba62 <_sbrk_r+0x1a>
 808ba60:	602b      	str	r3, [r5, #0]
 808ba62:	bd38      	pop	{r3, r4, r5, pc}
 808ba64:	20019124 	.word	0x20019124

0808ba68 <__malloc_lock>:
 808ba68:	4770      	bx	lr

0808ba6a <__malloc_unlock>:
 808ba6a:	4770      	bx	lr

0808ba6c <_malloc_usable_size_r>:
 808ba6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 808ba70:	1f18      	subs	r0, r3, #4
 808ba72:	2b00      	cmp	r3, #0
 808ba74:	bfbc      	itt	lt
 808ba76:	580b      	ldrlt	r3, [r1, r0]
 808ba78:	18c0      	addlt	r0, r0, r3
 808ba7a:	4770      	bx	lr

0808ba7c <_sbrk>:
 808ba7c:	4b04      	ldr	r3, [pc, #16]	; (808ba90 <_sbrk+0x14>)
 808ba7e:	6819      	ldr	r1, [r3, #0]
 808ba80:	4602      	mov	r2, r0
 808ba82:	b909      	cbnz	r1, 808ba88 <_sbrk+0xc>
 808ba84:	4903      	ldr	r1, [pc, #12]	; (808ba94 <_sbrk+0x18>)
 808ba86:	6019      	str	r1, [r3, #0]
 808ba88:	6818      	ldr	r0, [r3, #0]
 808ba8a:	4402      	add	r2, r0
 808ba8c:	601a      	str	r2, [r3, #0]
 808ba8e:	4770      	bx	lr
 808ba90:	2001909c 	.word	0x2001909c
 808ba94:	20019128 	.word	0x20019128

0808ba98 <_init>:
 808ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808ba9a:	bf00      	nop
 808ba9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 808ba9e:	bc08      	pop	{r3}
 808baa0:	469e      	mov	lr, r3
 808baa2:	4770      	bx	lr

0808baa4 <_fini>:
 808baa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808baa6:	bf00      	nop
 808baa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 808baaa:	bc08      	pop	{r3}
 808baac:	469e      	mov	lr, r3
 808baae:	4770      	bx	lr
